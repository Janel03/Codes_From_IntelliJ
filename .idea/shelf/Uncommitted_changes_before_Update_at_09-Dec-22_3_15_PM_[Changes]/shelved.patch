Index: AllSyntaxCodes/src/Repls/src/R221.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R221.java b/AllSyntaxCodes/src/Repls/src/R221.java
new file mode 100644
--- /dev/null	(date 1669060393082)
+++ b/AllSyntaxCodes/src/Repls/src/R221.java	(date 1669060393082)
@@ -0,0 +1,37 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+//  JUST EXAMPLE
+public class R221 {
+    public static void main(String[] args) {
+
+        System.out.println(findMaxLenEven("find MaxLen Even"));
+        System.out.println(findMaxLenEven("I am very Good at Java"));
+        System.out.println(findMaxLenEven("I was"));
+    }
+    public static String findMaxLenEven(String str) {
+      /*  String result="";
+        String arr[]=str.split("\\s");
+
+        for(String a:arr){
+            result=(a.length()>result.length()&&a.length()%2==0)?a:result;
+        }
+
+        if(result.length()==0){
+            return "-1";
+        }else{
+            return result;
+        }}}*/
+        String input = "";
+        String[] input_words = str.split(" ");
+        String longestWord = " ";
+
+        for (String word : input_words) {
+            Pattern p = Pattern.compile("^[a-zA-Z]+");
+            Matcher m = p.matcher(word);
+            m.find();
+            if (m.group().length() % 2 == 0 && m.group().length() > longestWord.length()) {
+                longestWord = m.group();
+            }}
+        return longestWord;
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/Repls/src/R225.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R225.java b/AllSyntaxCodes/src/Repls/src/R225.java
new file mode 100644
--- /dev/null	(date 1669057625277)
+++ b/AllSyntaxCodes/src/Repls/src/R225.java	(date 1669057625277)
@@ -0,0 +1,25 @@
+public class R225 {
+    public static void main(String[] args) {
+
+        System.out.println(reverseInteger(123)+"\n"+reverseInteger(12345)+"\n"
+                +reverseInteger(1001)+"\n"+reverseInteger(789));
+    }
+    public  static int reverseInteger(int N) {
+   /*     int reverse=0;
+        while(N!=0){
+            int reminder=N%10;
+            reverse=reverse*10+reminder;
+            N/=10;
+        }
+        return reverse;
+    }
+}*/
+        int reversed = 0;
+
+        for (; N != 0; N /= 10) {
+            int digit = N % 10;
+            reversed = reversed * 10 + digit;
+        }
+        return reversed;
+    }}
+
Index: AllSyntaxCodes/src/Repls/src/R226.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R226.java b/AllSyntaxCodes/src/Repls/src/R226.java
new file mode 100644
--- /dev/null	(date 1669062355070)
+++ b/AllSyntaxCodes/src/Repls/src/R226.java	(date 1669062355070)
@@ -0,0 +1,28 @@
+public class R226 {
+    public static void main(String[] args) {
+        System.out.println(reverse("I am a java Programmer"));
+    }
+    public static String reverse(String strToRev){
+        String reverse="";
+        String[] singleWord = strToRev.split(" ");
+        int length = singleWord.length;
+        for(int i=length-1;i>=0;i--){
+            String word = singleWord[i];
+            reverse+=word+" ";
+        }
+        return reverse.trim() ;
+    }}
+
+   /*     String s;
+        Scanner sc=new Scanner(System.in);
+        System.out.print("Enter a String: ");
+        s=sc.nextLine();                    //reading string from user
+        System.out.print("After reverse string is: ");
+        for(int i=s.length();i>0;--i)                //i is the length of the string
+        {
+            System.out.print(s.charAt(i-1));            //printing the character at index i-1
+        }
+        return s;
+    }
+}
+*/
\ No newline at end of file
Index: AllSyntaxCodes/src/Repls/src/R125S.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R125S.java b/AllSyntaxCodes/src/Repls/src/R125S.java
new file mode 100644
--- /dev/null	(date 1669054879712)
+++ b/AllSyntaxCodes/src/Repls/src/R125S.java	(date 1669054879712)
@@ -0,0 +1,47 @@
+import java.util.Scanner;
+public class R125S {
+    static Scanner scan = new Scanner (System.in);
+    public static void main(String[] args) {
+        String[] arr = new String [scan.nextInt()];
+        arrFiller(arr);
+
+        for (String s : arr) {
+            print(isBalanced(s));
+        }
+        scan.close();
+    }
+    public static boolean isBalanced(String s) {
+        //if length of s is not even -> braces are not balanced by default
+        if (s.length() % 2 != 0) return false;
+
+        //here I split String s on two equal parts;
+        String s1 = s.substring(0, s.length() / 2);
+        String s2 = s.substring(s.length() / 2);
+
+        return bracketComparor(s1, s2);
+    }
+
+    public static void print(Boolean b) {
+        System.out.println(b);
+    }
+    //here I checked s1 "((" and s2 "))", if s1 ='(',hence s2 =')' and wise versa, otherwise, braces are not balanced.
+    public static boolean bracketComparor(String s1, String s2) {
+        for (int i = 0; i < s1.length(); i++) {
+
+            //s1 starts from index 0 -> to end, s2 - starts from last index-> to first, both Strings move to 'center'.
+            if (s1.charAt(i) == '(' && s2.charAt(s1.length() - i - 1) != ')') {
+                return false;
+            } else if (s1.charAt(i) == ')' && s2.charAt(s1.length() - i - 1) != '(') {
+                return false;
+            }}
+        return true;
+    }
+    public static String []arrFiller(String []s){
+        for(int i=0;i<s.length;i++){
+            s[i]=scan.next();
+        }
+        return s;
+    }
+
+}
+
Index: AllSyntaxCodes/src/Repls/src/R215BalancedBrackets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R215BalancedBrackets.java b/AllSyntaxCodes/src/Repls/src/R215BalancedBrackets.java
new file mode 100644
--- /dev/null	(date 1668999040651)
+++ b/AllSyntaxCodes/src/Repls/src/R215BalancedBrackets.java	(date 1668999040651)
@@ -0,0 +1,30 @@
+public class R215BalancedBrackets {
+    public static void main(String[] args) {
+        System.out.println(isBalanced("(()"));
+        System.out.println(isBalanced("("));
+        System.out.println(isBalanced(")"));
+        System.out.println(isBalanced("(()))"));
+        System.out.println(isBalanced("(())"));
+        System.out.println(isBalanced("()"));
+        System.out.println(isBalanced(")()("));
+    }
+    public static boolean isBalanced(String s){
+        char[] arr=s.toCharArray();
+        int opening = 0;
+        int closing = 0;
+        for (char c : arr) {
+            if (c == '(') {
+                opening++;
+            } else if(c==')'){
+                closing++;
+            }}
+        System.out.println(opening);
+        System.out.println(closing);
+        if (opening==closing){
+            return true;
+        }
+        else {
+            return false;
+        }}}
+
+
Index: AllSyntaxCodes/src/Repls/src/R217CountDuplicates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R217CountDuplicates.java b/AllSyntaxCodes/src/Repls/src/R217CountDuplicates.java
new file mode 100644
--- /dev/null	(date 1669059412071)
+++ b/AllSyntaxCodes/src/Repls/src/R217CountDuplicates.java	(date 1669059412071)
@@ -0,0 +1,58 @@
+import java.util.HashSet;
+//JUST EXAMPLE
+public class R217CountDuplicates {
+        public static void main(String[] args) {
+            int[] arr={12,12,13,45,78,7,7};
+            int[] arr2={12,12,7,7,7,7,7};
+            int[] arr3={12,120,13,45,78,17,57};
+            int[] arr4={12,12,13,45,78,67,87};
+            System.out.println(DistinctList(arr));
+            System.out.println(DistinctList(arr2));
+            System.out.println(DistinctList(arr3));
+            System.out.println(DistinctList(arr4));
+        }
+        public static boolean DistinctList(int[] arr){
+            HashSet<Integer> hashSet = new HashSet<>();
+            for (int num : arr) {
+                hashSet.add(num);
+            }
+            int originalSize = arr.length;
+            System.out.println("original size " + originalSize);
+            int afterRemovalOfDup = hashSet.size();
+            System.out.println("after removing duplicates " + afterRemovalOfDup);
+
+            if (originalSize == afterRemovalOfDup) {
+                return true;
+            } else {
+                return false;
+            }}}
+
+
+      /*  //JUST EXAMPLE
+        System.out.println(check("12,12,13,45,78,7,7")); //false
+        System.out.println(check("12,12,7,7,7,7,7")); //true
+        System.out.println(check("12,120,13,45,78,17,57")); //false
+        System.out.println(check("12,12,13,45,78,67,87")); // true
+    }
+    public static boolean check(String str){
+        char [] arr=str.toCharArray();
+        int opening=0;
+        int closing=0;
+        for (char c:arr
+        ) {
+            if(c=='1'){
+                opening++;
+            }else if(c=='2') {
+                closing++;
+            }}
+        System.out.println(opening);
+        System.out.println(closing);
+
+        if(opening==closing){
+            return true;
+        }else {
+            return false;
+        }
+    }
+}
+*/
\ No newline at end of file
Index: AllSyntaxCodes/src/Repls/src/R220.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R220.java b/AllSyntaxCodes/src/Repls/src/R220.java
new file mode 100644
--- /dev/null	(date 1669081792049)
+++ b/AllSyntaxCodes/src/Repls/src/R220.java	(date 1669081792049)
@@ -0,0 +1,32 @@
+public class R220 {
+    public static void main(String[] args) {
+        System.out.print(formatString("00-44  #$% 48 55"));
+    }
+    public static String formatString(String S){
+        String format="";
+        String newFormat = "";
+        var j=3;
+        String newWord = S.replaceAll("[^0-9]","");
+        var length = newWord.length();
+        for(int i=0;i<length;i+=3)
+            if (j < length) {
+                newFormat = newWord.substring(i, j);
+                format += newFormat + "-";
+                j += 3;
+            } else {
+                format += newWord.substring(i, length);
+            }
+        return format;
+    }}
+
+
+
+
+        //JUST EXAMPLE
+       /* String input = "004448555555";
+
+        String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)", "$1 $2-$3");
+
+        System.out.println(number);
+    }
+    }*/
\ No newline at end of file
Index: AllSyntaxCodes/src/C30/ExceptionDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C30/ExceptionDemo.java b/AllSyntaxCodes/src/C30/ExceptionDemo.java
new file mode 100644
--- /dev/null	(date 1668871591850)
+++ b/AllSyntaxCodes/src/C30/ExceptionDemo.java	(date 1668871591850)
@@ -0,0 +1,17 @@
+package C30;
+
+public class ExceptionDemo {
+    public static void main(String[] args) {
+        System.out.println("some important lines of code 1");
+        System.out.println("some important lines of code 2");
+        System.out.println("some important lines of code 3");
+        System.out.println("some important lines of code 4");
+        String name=null;
+        System.out.println(name.length());//line with error
+        System.out.println("some important lines of code 5");
+        System.out.println("some important lines of code 6");
+        System.out.println("some important lines of code 7");
+        System.out.println("some important lines of code 8");
+
+    }
+}
Index: AllSyntaxCodes/src/PrivateClass/Brackets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/PrivateClass/Brackets.java b/AllSyntaxCodes/src/PrivateClass/Brackets.java
new file mode 100644
--- /dev/null	(date 1668998956583)
+++ b/AllSyntaxCodes/src/PrivateClass/Brackets.java	(date 1668998956583)
@@ -0,0 +1,39 @@
+package PrivateClass;
+
+public class Brackets {
+    public static void main(String[] args) {
+        System.out.println(isBalanced("(()"));
+        System.out.println(isBalanced("("));
+        System.out.println(isBalanced(")"));
+        System.out.println(isBalanced("(()))"));
+        System.out.println(isBalanced("(())"));
+        System.out.println(isBalanced("()"));
+        System.out.println(isBalanced(")()("));
+    }
+    public static boolean isBalanced(String s){
+        char[] arr=s.toCharArray();
+        int opening = 0;
+        int closing = 0;
+        for (char c : arr) {
+            if (c == '(') {
+                opening++;
+            } else if(c==')'){
+                closing++;
+            }}
+        System.out.println(opening);
+        System.out.println(closing);
+        if (opening==closing){
+            return true;
+        }
+        else {
+            return false;
+        }}}
+
+
+
+
+
+
+
+
+
Index: AllSyntaxCodes/src/Review13/FileDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Review13/FileDemo.java b/AllSyntaxCodes/src/Review13/FileDemo.java
new file mode 100644
--- /dev/null	(date 1668480840867)
+++ b/AllSyntaxCodes/src/Review13/FileDemo.java	(date 1668480840867)
@@ -0,0 +1,20 @@
+package Review13;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Properties;
+//build a method to read data from properties file
+//it should be available to any other class in project
+//& once the key is passed, it should give its value
+public class FileDemo {
+    public static void main(String[] args) throws IOException {
+        System.out.println(getProperty("password"));
+    }
+    //write all this code, then call with method above to access from anywhere
+    public static String getProperty(String key) throws IOException {
+        String path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\config.properties";
+        FileInputStream fis=new FileInputStream(path);
+        Properties properties=new Properties();
+        properties.load(fis);
+        return properties.getProperty(key);
+    }}
Index: AllSyntaxCodes/src/Review13/MapMethodToGetKeys.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Review13/MapMethodToGetKeys.java b/AllSyntaxCodes/src/Review13/MapMethodToGetKeys.java
new file mode 100644
--- /dev/null	(date 1668472324985)
+++ b/AllSyntaxCodes/src/Review13/MapMethodToGetKeys.java	(date 1668472324985)
@@ -0,0 +1,21 @@
+package Review13;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+public class MapMethodToGetKeys {
+    public static void main(String[] args) {
+        //method that takes a map & returns a set containing all the keys from that map
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+        Set<String> keys=getKeys(items);
+        for (var key:keys) {
+            System.out.println(key);
+        }}
+    public static Set<String> getKeys(Map<String, Double>map){
+        return map.keySet();
+    }}
Index: AllSyntaxCodes/src/Review13/ListMethodToGetKeys.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Review13/ListMethodToGetKeys.java b/AllSyntaxCodes/src/Review13/ListMethodToGetKeys.java
new file mode 100644
--- /dev/null	(date 1668472723688)
+++ b/AllSyntaxCodes/src/Review13/ListMethodToGetKeys.java	(date 1668472723688)
@@ -0,0 +1,23 @@
+package Review13;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+public class ListMethodToGetKeys {
+    public static void main(String[] args) {
+        //method that takes a map & returns an array containing all the keys from that map
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+        ArrayList<String> keys=getKeys(items);
+        for (var key:keys) {
+            System.out.println(key);
+        }}
+    public static ArrayList<String> getKeys(Map<String, Double> map){
+        return new ArrayList<>(map.keySet());
+    }}
+
Index: AllSyntaxCodes/src/Review13/ListMethodToGetValues.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Review13/ListMethodToGetValues.java b/AllSyntaxCodes/src/Review13/ListMethodToGetValues.java
new file mode 100644
--- /dev/null	(date 1668474475315)
+++ b/AllSyntaxCodes/src/Review13/ListMethodToGetValues.java	(date 1668474475315)
@@ -0,0 +1,25 @@
+package Review13;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class ListMethodToGetValues {
+    public static void main(String[] args) {
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+
+        List<Double> values=getValues(items);
+        System.out.println(values);
+
+    }//method that takes a map & returns an arrayList containing all the keys from that map
+    public static List<Double> getValues(Map<String, Double> mapValue) {
+    return new ArrayList<>(mapValue.values());
+    }
+}
+
+
Index: AllSyntaxCodes/src/Review13/MapCountCharsWithMethod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Review13/MapCountCharsWithMethod.java b/AllSyntaxCodes/src/Review13/MapCountCharsWithMethod.java
new file mode 100644
--- /dev/null	(date 1668477200492)
+++ b/AllSyntaxCodes/src/Review13/MapCountCharsWithMethod.java	(date 1668477200492)
@@ -0,0 +1,23 @@
+package Review13;
+import java.util.HashMap;
+import java.util.Map;
+//create a method that returns a map of character & their count in a String
+//Interview question
+public class MapCountCharsWithMethod {
+    public static void main(String[] args) {
+        String str="I am a successful Automation Tester";
+        System.out.println(getCount(str));
+    }
+    public static Map<Character,Integer> getCount(String str){
+        char[] charArr=str.toCharArray();
+        Map<Character,Integer> map=new HashMap<>();
+        for (char c:charArr){
+            if (map.get(c)==null){
+                map.put(c,1);
+            }else {
+                int count=map.get(c);
+                count=count+1;
+                map.put(c,count);
+            }}
+        return map;
+    }}
Index: AllSyntaxCodes/src/C24Incapsulation/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24Incapsulation/Dog.java b/AllSyntaxCodes/src/C24Incapsulation/Dog.java
new file mode 100644
--- /dev/null	(date 1667062488948)
+++ b/AllSyntaxCodes/src/C24Incapsulation/Dog.java	(date 1667062488948)
@@ -0,0 +1,73 @@
+package C24Incapsulation;
+
+public class Dog {
+    private String name;
+    private String breed;
+    private int age;
+    private double weight;
+    public Dog(String name, String breed, int age, double weight) {
+        setName(name);
+        setBreed(breed);
+        setAge(age);
+        setWeight(weight);
+    }
+    void setName(String name){
+        if (name.length()>30){
+            System.out.println("Name can not be more than 30 characters. Please try again.");
+        }else if (name.isEmpty()){
+            System.out.println("Name can not be empty. Please try again.");
+        }else{
+            this.name=name;
+        }}
+    void setAge(int age){
+        if (age>20){
+            System.out.println("Please use realistic dog age. Something is off here, are you sure it's a dog?");
+        } else if (age<0) {
+            System.out.println("Age can not be negative. Your dog is dead?");
+        }else {
+            this.age=age;
+        }}
+    void setBreed(String breed){
+            if (breed.length()>20){
+                System.out.println("Breed can not be more than 30 characters. Please try again.");
+            } else if (breed.isEmpty()) {
+                System.out.println("Breed can not be empty. Please try again.");
+            }else {
+                this.breed=breed;
+            }}
+    void setWeight(double weight){
+        if (weight>300){
+            System.out.println("Your dog is fat");
+        } else if (weight<0) {
+            System.out.println("is your dog alive?");
+        }else {
+            this.weight=weight;
+        }}
+    String getName(){
+        return name;
+    }
+    String getBreed(){
+        return breed;
+    }
+    int getAge(){
+        return age;
+    }
+    double getWeight(){
+        return weight;
+    }
+    void  print(){
+        System.out.println("Name: "+name+", Breed: "+breed+", Age: "+age+", Weight: "+weight);
+    }}
+class Test {
+    public static void main(String[] args) {
+        Dog tommy=new Dog("Tommy", "German",10,20);
+        //tommy.age=1500; //they will be able to cheat like this & change the value, one way to protect> make age private
+       /* tommy.name="Tommy";
+        tommy.breed="German";
+        tommy.age=15;
+        tommy.weight=20;*/
+       // System.out.println(tommy.name);//can not use it, cause it's private
+        System.out.println(tommy.getName());//will print Tommy separately
+        tommy.print();
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/ArrayListNumbers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListNumbers.java b/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListNumbers.java
new file mode 100644
--- /dev/null	(date 1667068335245)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListNumbers.java	(date 1667068335245)
@@ -0,0 +1,20 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ArrayListNumbers {
+    public static void main(String[] args) {
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(10);
+        numbers.add(20);
+        numbers.add(35);
+
+        int a=34;
+        numbers.add(a);
+        System.out.println(numbers);
+
+        for (Integer num:numbers){
+            System.out.println(num);
+        }
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/ArrayListDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListDemo.java b/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListDemo.java
new file mode 100644
--- /dev/null	(date 1667066893355)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListDemo.java	(date 1667066893355)
@@ -0,0 +1,31 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ArrayListDemo {
+    public static void main(String[] args) {
+        /*String[] names={"Janel", "Rimma", "Puskar"};//for multiple values of same kind, for single use variables
+        //cons> arrays are fixed in size
+
+        java.util.ArrayList<String> colors=new java.util.ArrayList<>();
+        colors.add("Green");
+        colors.add("Blue");
+        System.out.println(colors);*/
+        ArrayList<String> colors=new ArrayList<>();
+        colors.add("Blue");
+        colors.add("Green");
+        colors.add("Red");
+        colors.add("Yellow");
+        colors.add("Purple");
+        System.out.println(colors);
+
+        System.out.println(colors.get(0));//to get specific value
+        System.out.println(colors.get(2));
+        System.out.println(colors.size());//will print number of colors
+
+        for (int i = 0; i <colors.size();i++){
+            System.out.println(colors.get(i));
+    }
+        for (String color:colors)
+            System.out.println(color);}
+}
\ No newline at end of file
Index: AllSyntaxCodes/src/C29FileHandling/GetAllDataFromExcel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/GetAllDataFromExcel.java b/AllSyntaxCodes/src/C29FileHandling/GetAllDataFromExcel.java
new file mode 100644
--- /dev/null	(date 1668453436001)
+++ b/AllSyntaxCodes/src/C29FileHandling/GetAllDataFromExcel.java	(date 1668453436001)
@@ -0,0 +1,16 @@
+package C29FileHandling;
+import Utils.ExcelReader;
+import java.io.IOException;
+
+public class GetAllDataFromExcel {
+    /*read data from files*/
+    public static void main(String[] args) throws IOException {
+        String path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx";
+        var data=  ExcelReader.read(path);
+       /*Map<String ,String> row1=data.get(0);
+        System.out.println(row1.get("Name"));*/
+              for (var row:data) {//use var instead of Map
+            System.out.println(row);
+        }
+        System.out.println(data);
+    }}
Index: AllSyntaxCodes/src/Repls/src/R207HashMapReplace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R207HashMapReplace.java b/AllSyntaxCodes/src/Repls/src/R207HashMapReplace.java
new file mode 100644
--- /dev/null	(date 1668460623719)
+++ b/AllSyntaxCodes/src/Repls/src/R207HashMapReplace.java	(date 1668460623719)
@@ -0,0 +1,25 @@
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public class R207HashMapReplace {
+    public static void main(String[] args) {
+        HashMap<String,String> names=new HashMap<>();
+        names.put("ONE","AAA");
+        names.put("TWO","BBB");
+        names.put("THREE","CCC");
+        names.put("FOUR","DDD");
+        names.put("FIVE","EEE");
+
+        System.out.println("HashMap Before Replace :");
+        Iterator<Map.Entry<String,String>> iterator=names.entrySet().iterator();
+        while (iterator.hasNext()){
+            Map.Entry<String,String> it=iterator.next();
+            System.out.println(it.getKey()+" : "+it.getValue());
+        }
+        System.out.println("------------------");
+        names.replace("THREE",  "ASEL");
+        names.replace("FIVE", "SUMAIR");
+        System.out.println("HashMap After Replace :");
+        names.forEach((K,V)-> System.out.println(K+" : "+V));
+    }}
Index: AllSyntaxCodes/src/Repls/src/R208.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R208.java b/AllSyntaxCodes/src/Repls/src/R208.java
new file mode 100644
--- /dev/null	(date 1668470076877)
+++ b/AllSyntaxCodes/src/Repls/src/R208.java	(date 1668470076877)
@@ -0,0 +1,26 @@
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public class R208 {
+    public static void main(String[] args) {
+
+        Map<String,Integer> fruit=new HashMap<>();
+        fruit.put("mango", 10);
+        fruit.put("apple", 30);
+        fruit.put("orange", 20);
+        Display(fruit);
+        fruit.clear();
+        Display(fruit);
+    }
+    static void Display(Map<String,Integer> fruits){
+        if(fruits.isEmpty()){
+            System.out.println("map is empty");
+        }else {
+            Iterator<Map.Entry<String,Integer>> iterator=fruits.entrySet().iterator();
+            while (iterator.hasNext()){
+                Map.Entry<String,Integer>it=iterator.next();
+                System.out.println(it.getKey()+" : "+it.getValue());
+            }}}}
+
+
Index: AllSyntaxCodes/src/C24Incapsulation/Horse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24Incapsulation/Horse.java b/AllSyntaxCodes/src/C24Incapsulation/Horse.java
new file mode 100644
--- /dev/null	(date 1667062488895)
+++ b/AllSyntaxCodes/src/C24Incapsulation/Horse.java	(date 1667062488895)
@@ -0,0 +1,56 @@
+package C24Incapsulation;
+
+public class Horse {
+   private String name;
+   private String breed;
+   private String color;
+   private int age;
+
+    public Horse(String name, String breed, String color, int age) {
+        setName(name);
+        setBreed(breed);
+        setColor(color);
+        setAge(age);
+    }
+    public String getName(String name) {
+        if (name.equals("Josh")){
+            return "Not allowed";
+        }else{
+            return name;
+        }}
+    public void setName(String name) {
+        if (name.isEmpty()){
+            System.out.println("Really?! your horse is nameless?");
+        }else {
+            this.name = name;
+        }}
+    public String getBreed() {
+        return breed;
+    }
+    public void setBreed(String breed) {
+        if (breed.isEmpty()){
+            System.out.println("Really?! you dont know your horse's breed?");
+        }else {
+            this.breed = breed;
+        }}
+    public String getColor() {
+        return color;
+    }
+    public void setColor(String color) {
+        if (color.isEmpty()){
+            System.out.println("Are you color blind?");
+        }else{
+            this.color = color;
+        }}
+    public int getAge() {
+        return age;
+    }
+    public void setAge(int age) {
+        if (age<0){
+            System.out.println("For real? You dont know the age of your horse?");
+        }else {
+            this.age = age;
+        }
+
+    }
+}
Index: AllSyntaxCodes/src/C24Incapsulation/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24Incapsulation/Cat.java b/AllSyntaxCodes/src/C24Incapsulation/Cat.java
new file mode 100644
--- /dev/null	(date 1667062488811)
+++ b/AllSyntaxCodes/src/C24Incapsulation/Cat.java	(date 1667062488811)
@@ -0,0 +1,47 @@
+package C24Incapsulation;
+
+public class Cat {
+   private String name;
+   private String breed;
+   private int age;
+   private double weight;
+    public Cat(String name, String breed, int age, double weight) {
+        setName(name);
+        setBreed(breed);
+        setAge(age);
+        setWeight(weight);
+    }
+    public void setName(String name) {
+        this.name = name;
+    }
+    public void setBreed(String breed) {
+        this.breed = breed;
+    }
+    public void setAge(int age) {
+        this.age = age;
+    }
+    public void setWeight(double weight) {
+        this.weight = weight;
+    }
+
+    public String getName() {
+        return name;
+    }
+    public String getBreed() {
+        return breed;
+    }
+    public int getAge() {
+        return age;
+    }
+    public double getWeight() {
+        return weight;
+    }
+    public static void main(String[] args) {
+        Cat cat=new Cat("Thunder", "Egyptian",8,30);
+        System.out.println(cat.getName());
+        System.out.println(cat.getBreed());
+        System.out.println(cat.getAge());
+        System.out.println(cat.getWeight());
+    }}
+
+
Index: AllSyntaxCodes/src/Repls/src/R209.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R209.java b/AllSyntaxCodes/src/Repls/src/R209.java
new file mode 100644
--- /dev/null	(date 1668982515380)
+++ b/AllSyntaxCodes/src/Repls/src/R209.java	(date 1668982515380)
@@ -0,0 +1,40 @@
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+public class R209 {
+    public static void main(String[] args) {
+        List<Map<String, Object>> dataList = new ArrayList<>();
+
+        Map<String, Object> appleMap = new HashMap<>();
+        appleMap.put("Items", "Apple");
+        appleMap.put("Price", 20.00);
+        appleMap.put("Quantity", 10.0);
+        dataList.add(appleMap);
+        Map<String, Object> OrangeMap = new HashMap<>();
+        OrangeMap.put("Items", "Orange");
+        OrangeMap.put("Price", 21.99);
+        OrangeMap.put("Quantity", 10.0);
+        dataList.add(OrangeMap);
+
+        double subtotal = 0;
+        double sum = 0;
+
+        for (Map<String, Object> eachMap : dataList) {
+            Object price = eachMap.get("Price");
+            double eachPrice = (double) price;
+
+            Object quantity = eachMap.get("Quantity");
+            double eachQuantity = (double) quantity;
+
+            Object items = eachMap.get("Items");
+            String item = (String) items;
+
+            subtotal = eachPrice * eachQuantity;
+            sum += subtotal;
+
+            System.out.println("Items: " + item + " Price: " + eachPrice + " Quantity: " + eachQuantity + " SubTotal: " + subtotal);
+            System.out.println();
+        }
+        System.out.println("Your Purchase total : " + sum);
+    }}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AnalysisUIOptions\">\r\n    <option name=\"SCOPE_TYPE\" value=\"3\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"fbca7dcd-14d9-40cb-9390-d60d483aceb6\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/CatTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/modules.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/AllSyntaxCodes.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/AllSyntaxCodes.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/Class17.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Class17.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/DateTime.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/DateTime.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW3.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW3.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW4.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW4.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW4Tester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW4Tester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW5.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW5.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW6.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW6.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW6Tester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW6Tester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW7.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW7.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/Main.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Animal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Animal.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Bird.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Bird.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Car.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Car.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Dog.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Dog.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Furniture.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Furniture.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/HW1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/HW1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/HW2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/HW2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/This&amp;Inheritance\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/This&amp;Inheritance\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW1n1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW1n1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW2n2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW2n2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW3.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW3.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/Inheritance\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/Inheritance\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/TeacherTesterHW3.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/TeacherTesterHW3.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Animal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Animal.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/AnimalTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/AnimalTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Browser.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Browser.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/BrowserTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/BrowserTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Employee.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Employee.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/EmployeeTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/EmployeeTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW3.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW3.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW4.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW4.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/MethodOverloading.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/MethodOverloading.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/MethodOverloading2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/MethodOverloading2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/MethodOverloadingNotes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/MethodOverloadingNotes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Parent.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Parent.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Animal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Animal.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/AnimalTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/AnimalTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Car.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Car.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/CarTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/CarTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/FinalDemo.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/FinalDemo.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/HW1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/HW1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/HW2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/HW2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Parent.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Parent.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/StudentTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/StudentTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Task1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Task1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/WebDriver.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/WebDriver.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/WebDriverTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/WebDriverTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/Animal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/Animal.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/DataBase.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/DataBase.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/DataBaseTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/DataBaseTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW1.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW1.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW1Student.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW1Student.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW1Tester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW1Tester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW2.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW2Tester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW2Tester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/IDataBase.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/IDataBase.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/InterfaceTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/InterfaceTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/Notes\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/Notes\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/Person.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/Person.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/StudentTester.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/StudentTester.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Dog.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Dog.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Employee.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Employee.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/ObjectClasss.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/ObjectClasss.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Person.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Person.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Phone.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Phone.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Student.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Student.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/YZ.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/YZ.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/ReplSolutions.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/ReplSolutions.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R1PrintValueOfInt.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R1PrintValueOfInt.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R2Boolean.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R2Boolean.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R3BooleanPrintSameLine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R3BooleanPrintSameLine.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R4PrintPattern.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R4PrintPattern.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R5ReassignInt.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R5ReassignInt.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R6PrintJohnSmith.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R6PrintJohnSmith.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R76ArrayScannerDaysOfWeek.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R76ArrayScannerDaysOfWeek.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R77ArrayScannerPrintNumsBackwards.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R77ArrayScannerPrintNumsBackwards.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R78ArrayScannerInputNumsPrintMultiplied.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R78ArrayScannerInputNumsPrintMultiplied.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R79TwoDArray.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R79TwoDArray.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R7PrintStringInOneLine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R7PrintStringInOneLine.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R80DoubleandPrint2DArray.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R80DoubleandPrint2DArray.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R8Print2StringInOneLine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R8Print2StringInOneLine.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/ReplSolutions/src/R9Multiplication.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R9Multiplication.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/Repls.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/Repls.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Cars.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Cars.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/FirstInterface.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/FirstInterface.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Output.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Output.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R108.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R108.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R109.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R109.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R110.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R110.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R111.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R111.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R112.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R112.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R113.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R113.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R114.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R114.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R115.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R115.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R115Two.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R115Two.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R116.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R116.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R120.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R120.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R121.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R121.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R122.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R122.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R123.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R123.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R124.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R124.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R124N.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R124N.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R124Print3Ways.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R124Print3Ways.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R125.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R125.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R126.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R126.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R130.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R130.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R131.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R131.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R132.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R132.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R135.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R135.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R136.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R136.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R137.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R137.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R139.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R139Asghar.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139Asghar.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R139Three.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139Three.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R139Two.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139Two.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R140.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R140.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R141.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R141.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R142.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R142.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R144.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R144.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R158.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R158.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R159.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R159.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R160.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R160.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R161.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R161.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R162.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R162.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R167.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R167.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R172.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R172.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R174.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R174.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/R176.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R176.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Repl103.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl103.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Repl104.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl104.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Repl105.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl105.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Repl106.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl106.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/Repl99.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl99.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/ReplNineSeven.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/ReplNineSeven.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Repls/src/ReverseSentenceWithStringBuffer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/ReverseSentenceWithStringBuffer.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Soundr/Soundr.iml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Soundr/src/Main.java\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeInsightWorkspaceSettings\">\r\n    <option name=\"optimizeImportsOnTheFly\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"SyntaxGitHub/main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--tags\" />\r\n        <option name=\"title\" value=\"All\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"SYNC\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2FGrjZZ7XOG17ct40yvufAu3mXh\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;create.test.in.the.same.root&quot;: &quot;true&quot;,\r\n    &quot;full.screen.before.presentation.mode&quot;: &quot;false&quot;,\r\n    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;openjdk-19 (2)&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/ryan_/IdeaProjects/SDETBatch14Java/AllSyntaxCodes/Data&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;editing.templates&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"PolymorpC22\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\src\" />\r\n      <recent name=\"C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\src\\PrivateClass\" />\r\n      <recent name=\"C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\Eclip\" />\r\n      <recent name=\"C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\Repls\" />\r\n      <recent name=\"C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\src\\Pract\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.R210\">\r\n    <configuration name=\"R210\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"R210\" />\r\n      <module name=\"Repls\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"R217\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"R217\" />\r\n      <module name=\"Repls\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"R218\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"R218\" />\r\n      <module name=\"Repls\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"R219\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"R219\" />\r\n      <module name=\"Repls\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"R227\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"R227\" />\r\n      <module name=\"Repls\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.R210\" />\r\n        <item itemvalue=\"Application.R227\" />\r\n        <item itemvalue=\"Application.R218\" />\r\n        <item itemvalue=\"Application.R219\" />\r\n        <item itemvalue=\"Application.R217\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"fbca7dcd-14d9-40cb-9390-d60d483aceb6\" name=\"Changes\" comment=\"\" />\r\n      <created>1664129445836</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1664129445836</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"01ce635e-1ed3-49ce-8cad-7e748052eeec\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"SyntaxGitHub/main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"52ee8556-3854-4d43-99ba-5235a87dcc1a\">\r\n          <value>\r\n            <State>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"structure\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"dir:C:/Users/ryan_/IdeaProjects/SDETBatch14Java/AllSyntaxCodes/src/C25\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"SyntaxGitHub/main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"01ce635e-1ed3-49ce-8cad-7e748052eeec\" value=\"TOOL_WINDOW\" />\r\n        <entry key=\"52ee8556-3854-4d43-99ba-5235a87dcc1a\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.util.ConcurrentModificationException\" package=\"java.util\" />\r\n          <option name=\"timeStamp\" value=\"2\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/SDETBatch14Java$DataBaseTester.ic\" NAME=\"DataBaseTester Coverage Results\" MODIFIED=\"1665943806802\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>Class23.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8466e6eeebdd2b8b3821ee02f6446fcff9d13921)
+++ b/.idea/workspace.xml	(date 1670281247403)
@@ -4,157 +4,221 @@
     <option name="SCOPE_TYPE" value="3" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="fbca7dcd-14d9-40cb-9390-d60d483aceb6" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/CatTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+    <list default="true" id="fbca7dcd-14d9-40cb-9390-d60d483aceb6" name="Changes" comment="Test">
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/Data/ExcelTest.xlsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/Data/config.properties" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Car.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Object" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/OOPs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/Phone.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/PhoneTester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo5.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo6.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo7.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/StringDemo8.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C12OOPs/Task1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/StringDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/StringDemo2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/StringDemo3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/StringDemo4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/Task1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/Task2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C13StringClass/Task3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/HW1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/HW2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/HW3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/HW4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/HW5.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/HW6.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/Math.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/MethodsDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/MethodsDemo2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/MethodsDemo3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/MethodsDemo4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/StringBufferVsBuilder.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C14StringMethods/StringRecap.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/Dog.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW5.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW6.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HW7.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/HondaBike.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/LocalVarDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C15Methods/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/BankAccount.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/Person.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/PersonTester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/Student.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/SyntaxEmployee.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C16JavaVariables/Task1Tester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Dog.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/DogTester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/EmpTester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Employee.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Person.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Task1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Task1Tester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Task2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Task3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Animal.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Car.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Cat.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/CatTester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Dog.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Horse.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Student.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Task1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Task3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Task3Tester.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/Task4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C18Constructors/ThisKeywordDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/MethodOverloading.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/MethodOverloadingD2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/Repl139.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListNumbers.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListRemoveDelete.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Arrays4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Asghar1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Asghar2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Asghar3.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Asghar4.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Asghar5.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/Asghar6.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24CollectionsFramework/StoreDiffValuesInArrayList.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24Incapsulation/Cat.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24Incapsulation/Dog.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24Incapsulation/HW1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C24Incapsulation/Horse.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/ALAddAllRemove1RemoveAll.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/ALRemoveEndsWith.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/ArrayListStringLength.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/ContainsAllDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/HW1RemoveStringWithLastChar.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/HW2ReplaceWithAnotherStringIfContainsChar.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/HW3RemoveNumsDividedBy5.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/IteratorCountPrintNewLinePrintAllinArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/IteratorNextHasNextPrintNewLine.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemove.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveChars.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveStartsWith.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/LambdaRemoveStartsWith.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/LoopsWithIterator.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/RemoveStringFromArrayList.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C25CollectionsFramework/WrapperClass.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/ApachiCheck.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/ArrayListVsLinkedList.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/HW1IteratorRemoveLastChar.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/HW2ReplaceStringWithAnotherString.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/HW3EvenNumbersandRemoveNumsDivisibleBy5.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/PrintAllRemoveDuplicate.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/WhenToUseSets.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/WrapperDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C26CollectionsFramework/typesOfSets.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/Dog.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/DogArray.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/Duplicates.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/GetAllKeysNremove.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/GetSpecificValueWithLambda.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/HW2.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/HashMapReturnKeysNValuesPrintValueOf1Key.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/Insurance.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/InsuranceHW1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/MapDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/PrintAllnClear.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/RemoveCharLambdaHashMap.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C27CollectionsFramewors/SearchReturnReplacePrintOneItemOnly.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28Excel/GetAllDataFromExcel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28Excel/GetDataFromSheetAndRow.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28Excel/PropertiesDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysOnlyNoBrackets.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysnValues.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/PrintValuesOnly.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/RemoveBasedOnValues.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsLetter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsPrintValues.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/CallExcelReader.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/CallMethodsWithPath.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/GetAllDataFromExcel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/HW1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/HeaderRowCells.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/MethodsDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C29FileHandling/ReadDataFromExcel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C30/ExceptionDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/LambdaS/Notes" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Practice/T1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/PrivateClass/ArrayVsArrayList.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/PrivateClass/Brackets.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/PrivateClass/CountChars.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/PrivateClass/EnhancedForLoop.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R125S.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R178.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R195RemoveDuplicate.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R196Remove.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R197SetNoOrderNcount.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R198SetPrintInOrderNremoveDuplicate.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R199SetPrintInOrderNforLoop.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R200MapPreserveOrderPrintRemove.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R201MapCountOccuranceRemove.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R202MapPrintInOrderKeysNvaluesSeparately.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R203MapPrintWithIteratorNoDuplicates.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R204PrintAllIterator.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R205HashMapPrintUpperCase.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R206HashMapRemoveWithForLoopEntrySet.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R207HashMapReplace.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R208.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R209.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R210.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R215BalancedBrackets.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R216.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R217.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R217CountDuplicates.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R218.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R219.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R220.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R221.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R223.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R225.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R226.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R227.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Review13/FileDemo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Review13/ListMethodToGetKeys.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Review13/ListMethodToGetValues.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Review13/MapCountCharsWithMethod.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Review13/MapMethodToGetKeys.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewLists/PrintArrayListToStringInNewLine.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewLists/PrintCountOfLettersInWord.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewLists/RemoveWordsWithMoreThan4Letters.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewLists/ReplaceElementBiggerThan4Letters.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewLists/Student.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewLists/StudentPrint.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewMap/Demo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewSets/Demo.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewSets/PrintSpecificLine.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/ReviewSets/RemoveDuplicatesFromArrayListAndSort.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Utils/ConfigReader.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Utils/ExcelReader.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/AllSyntaxCodes.iml" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/AllSyntaxCodes.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/Class17.iml" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/Class17.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/DateTime.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/DateTime.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW3.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW3.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW4.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW4.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW4Tester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW4Tester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW5.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW5.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW6.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW6.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW6Tester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW6Tester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/HW7.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C17AccessModifiers/HW7.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl17Strings/Main.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Animal.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Animal.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Bird.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Bird.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Car.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Car.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Dog.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Dog.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/Furniture.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/Furniture.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/HW1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/HW1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/HW2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/HW2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl19ThisKeywordInheritance/This&amp;Inheritance" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C19ThisKeywordInheritance/This&amp;Inheritance" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW1n1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW1n1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW2n2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW2n2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/HW3.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/HW3.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/Inheritance" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/Inheritance" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl20inheriance/TeacherTesterHW3.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C20inheriance/TeacherTesterHW3.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Animal.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Animal.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/AnimalTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/AnimalTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Browser.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Browser.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/BrowserTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/BrowserTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Employee.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Employee.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/EmployeeTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/EmployeeTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW3.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW3.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/HW4.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/HW4.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/MethodOverloading.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/MethodOverloading.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/MethodOverloading2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/MethodOverloading2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/MethodOverloadingNotes" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/MethodOverloadingNotes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl21MethodOverloading/Parent.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C21MethodOverloading/Parent.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Animal.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Animal.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/AnimalTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/AnimalTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Car.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Car.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/CarTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/CarTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/FinalDemo.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/FinalDemo.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/HW1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/HW1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/HW2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/HW2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Notes" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Parent.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Parent.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/StudentTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/StudentTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/Task1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/Task1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/WebDriver.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/WebDriver.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl22MethodOverriding/WebDriverTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C22MethodOverriding/WebDriverTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/Animal.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/Animal.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/DataBase.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/DataBase.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/DataBaseTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/DataBaseTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW1.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW1.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW1Student.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW1Student.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW1Tester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW1Tester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW2.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW2.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/HW2Tester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/HW2Tester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/IDataBase.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/IDataBase.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/InterfaceTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/InterfaceTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/Notes" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/Notes" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/Person.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/Person.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/Cl23AbstractNinterface/StudentTester.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C23AbstractNinterface/StudentTester.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Dog.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Dog.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Employee.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Employee.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/ObjectClasss.iml" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/ObjectClasss.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Person.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Person.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Phone.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Phone.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/Student.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/Student.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/AllSyntaxCodes/src/ObjClass/YZ.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/C11Object/YZ.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/ReplSolutions.iml" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/ReplSolutions.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R1PrintValueOfInt.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R1PrintValueOfInt.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R2Boolean.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R2Boolean.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R3BooleanPrintSameLine.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R3BooleanPrintSameLine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R4PrintPattern.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R4PrintPattern.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R5ReassignInt.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R5ReassignInt.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R6PrintJohnSmith.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R6PrintJohnSmith.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R76ArrayScannerDaysOfWeek.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R76ArrayScannerDaysOfWeek.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R77ArrayScannerPrintNumsBackwards.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R77ArrayScannerPrintNumsBackwards.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R78ArrayScannerInputNumsPrintMultiplied.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R78ArrayScannerInputNumsPrintMultiplied.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R79TwoDArray.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R79TwoDArray.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R7PrintStringInOneLine.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R7PrintStringInOneLine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R80DoubleandPrint2DArray.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R80DoubleandPrint2DArray.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R8Print2StringInOneLine.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R8Print2StringInOneLine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/ReplSolutions/src/R9Multiplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/ReplSolutions/src/R9Multiplication.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/Repls.iml" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/Repls.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Cars.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Cars.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/FirstInterface.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/FirstInterface.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Output.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Output.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R108.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R108.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R109.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R109.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R110.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R110.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R111.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R111.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R112.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R112.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R113.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R113.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R114.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R114.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R115.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R115.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R115Two.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R115Two.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R116.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R116.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R120.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R120.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R121.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R121.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R122.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R122.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R123.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R123.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R124.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R124.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R124N.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R124N.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R124Print3Ways.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R124Print3Ways.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R125.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R125.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R126.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R126.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R130.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R130.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R131.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R131.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R132.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R132.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R135.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R135.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R136.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R136.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R137.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R137.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R139.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R139Asghar.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139Asghar.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R139Three.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139Three.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R139Two.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R139Two.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R140.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R140.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R141.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R141.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R142.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R142.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R144.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R144.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R158.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R158.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R159.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R159.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R160.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R160.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R161.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R161.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R162.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R162.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R167.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R167.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R172.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R172.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R174.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R174.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/R176.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/R176.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Repl103.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl103.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Repl104.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl104.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Repl105.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl105.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Repl106.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl106.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/Repl99.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/Repl99.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/ReplNineSeven.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/ReplNineSeven.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Repls/src/ReverseSentenceWithStringBuffer.java" beforeDir="false" afterPath="$PROJECT_DIR$/AllSyntaxCodes/src/Repls/src/ReverseSentenceWithStringBuffer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Soundr/Soundr.iml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Soundr/src/Main.java" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -230,16 +294,9 @@
       <recent name="C:\Users\ryan_\IdeaProjects\SDETBatch14Java\AllSyntaxCodes\src\Pract" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.R210">
+  <component name="RunManager" selected="Application.Rep31">
     <configuration name="R210" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="R210" />
-      <module name="Repls" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="R217" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="R217" />
       <module name="Repls" />
       <method v="2">
         <option name="Make" enabled="true" />
@@ -266,13 +323,26 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="Rep31" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="ReplsStudyGroup.Rep31" />
+      <module name="AllSyntaxCodes" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="ReplsStudyGroup.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.Rep31" />
         <item itemvalue="Application.R210" />
         <item itemvalue="Application.R227" />
         <item itemvalue="Application.R218" />
         <item itemvalue="Application.R219" />
-        <item itemvalue="Application.R217" />
       </list>
     </recent_temporary>
   </component>
@@ -285,6 +355,14 @@
       <option name="presentableId" value="Default" />
       <updated>1664129445836</updated>
     </task>
+    <task id="LOCAL-00001" summary="Test">
+      <created>1670257507937</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1670257507938</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -362,6 +440,10 @@
         <entry key="52ee8556-3854-4d43-99ba-5235a87dcc1a" value="TOOL_WINDOW" />
       </map>
     </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Test" />
+    <option name="LAST_COMMIT_MESSAGE" value="Test" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: AllSyntaxCodes/src/Repls/src/R178.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R178.java b/AllSyntaxCodes/src/Repls/src/R178.java
new file mode 100644
--- /dev/null	(date 1667247977274)
+++ b/AllSyntaxCodes/src/Repls/src/R178.java	(date 1667247977274)
@@ -0,0 +1,26 @@
+public class R178 {
+    private String empName;
+    private int empAge;
+
+    public String getEmpName() {
+        return empName;
+    }
+    public void setEmpName(String empName) {
+        this.empName = empName;
+    }
+    public int getEmpAge() {
+        return empAge;
+    }
+    public void setEmpAge(int empAge) {
+        this.empAge = empAge;
+    }
+    public R178(String empName, int empAge) {
+        this.empName = empName;
+        this.empAge = empAge;
+    }
+    public static void main(String[] args) {
+        R178 print=new R178("John",30);
+        System.out.println("Employee Name: "+print.empName);
+        System.out.println("Employee Age: "+print.empAge);
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/ArrayListRemoveDelete.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListRemoveDelete.java b/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListRemoveDelete.java
new file mode 100644
--- /dev/null	(date 1667069925650)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/ArrayListRemoveDelete.java	(date 1667069925650)
@@ -0,0 +1,18 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ArrayListRemoveDelete {
+    public static void main(String[] args) {
+        ArrayList<String> colors=new ArrayList<>();
+
+        colors.add("Red");
+        colors.add("Blue");
+        colors.add("Pink");
+        colors.add("Purple");
+        System.out.println(colors);
+        colors.remove("Blue");//remove > removes one by one, clear deletes everything
+        colors.remove(2);//also can remove by index
+        System.out.println(colors);
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Arrays4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Arrays4.java b/AllSyntaxCodes/src/C24CollectionsFramework/Arrays4.java
new file mode 100644
--- /dev/null	(date 1667069506077)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Arrays4.java	(date 1667069506077)
@@ -0,0 +1,26 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class Arrays4 {
+    public static void main(String[] args) {
+
+        ArrayList<String>names=new ArrayList<>();
+        names.add("Janel");
+        names.add("Luda");
+        names.add("Rimma");
+
+        names.add(2, "Josh again");//will add Josh
+        names.set(2,"Josh again");//will replace Rimma
+        System.out.println(names);
+
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(10);
+        numbers.add(5);
+        numbers.add(25);
+        numbers.add(1,100);//move elements. this with 2 values is overloading
+        System.out.println(numbers);
+        numbers.clear();//deletes all the elements from the list
+        System.out.println(numbers);
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/StoreDiffValuesInArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/StoreDiffValuesInArrayList.java b/AllSyntaxCodes/src/C24CollectionsFramework/StoreDiffValuesInArrayList.java
new file mode 100644
--- /dev/null	(date 1667068335174)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/StoreDiffValuesInArrayList.java	(date 1667068335174)
@@ -0,0 +1,31 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class StoreDiffValuesInArrayList {
+    public static void main(String[] args) {
+        //store chars
+        ArrayList<Character> chars=new ArrayList<>();
+        chars.add('A');
+        chars.add('B');
+        chars.add('C');
+        chars.add('D');
+        System.out.println(chars);
+
+        ArrayList<Boolean> booleans=new ArrayList<>();
+        booleans.add(false);
+        booleans.add(true);
+        booleans.add(false);
+        System.out.println(booleans);
+
+        ArrayList<Float> floats=new ArrayList<>();
+        floats.add(10.1F);
+        floats.add(22.0F);
+        floats.add(52.8F);
+        floats.add(56.2F);
+        System.out.println(floats);
+
+
+
+    }
+}
Index: AllSyntaxCodes/src/C28MapsAndexcel/PrintValuesOnly.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/PrintValuesOnly.java b/AllSyntaxCodes/src/C28MapsAndexcel/PrintValuesOnly.java
new file mode 100644
--- /dev/null	(date 1668367438041)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/PrintValuesOnly.java	(date 1668367438041)
@@ -0,0 +1,15 @@
+package C28MapsAndexcel;
+import java.util.HashMap;
+//Demo 4 Print Values only
+public class PrintValuesOnly {
+    public static void main(String[] args) {
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+
+        for (Double value: items.values()){
+            System.out.println(value);
+        }}}
\ No newline at end of file
Index: AllSyntaxCodes/src/C24Incapsulation/HW1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24Incapsulation/HW1.java b/AllSyntaxCodes/src/C24Incapsulation/HW1.java
new file mode 100644
--- /dev/null	(date 1667158846045)
+++ b/AllSyntaxCodes/src/C24Incapsulation/HW1.java	(date 1667158846045)
@@ -0,0 +1,25 @@
+package C24Incapsulation;
+
+import java.util.ArrayList;
+
+/*
+Create an ArrayList that will store 5 names into it. Find out whether the given ArrayList is empty or not?
+Check whether the specific name is present in an ArrayList or not? Find the size of your arrayList and print all values from that
+ */
+public class HW1 {
+    public static void main(String[] args) {
+
+        ArrayList<String> names=new ArrayList<>(5);
+        names.add("Nesrin");
+        names.add("Vidaya");
+        names.add("Jam");
+        names.add("Jamo");
+        names.add("Jami");
+        System.out.println(names.isEmpty()); //given ArrayList is empty or not?
+        System.out.println(names.contains("Jam"));
+        System.out.println(names.contains("Dam"));
+        System.out.println(names.size());
+        System.out.println(names);
+
+    }
+}
Index: AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysnValues.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysnValues.java b/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysnValues.java
new file mode 100644
--- /dev/null	(date 1668367438222)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysnValues.java	(date 1668367438222)
@@ -0,0 +1,28 @@
+package C28MapsAndexcel;
+import java.util.HashMap;
+//Demo 5 Get Keys & Values
+public class PrintKeysnValues {
+    public static void main(String[] args) {
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+        //to get Keys & Values
+        //Set<Map.Entry<String,Double>> entrySet=items.entrySet();1st way
+        //2nd shorter way with []
+        var entrySet=items.entrySet();
+        System.out.println(entrySet);
+        /*   var dog=new Dog(); // doesn't work with instance variables
+        var number=10.2;*/
+        // var lastname; does not work with instance variables as java can't figure out
+        // the data type as there are no values
+
+        //loop to print without []
+        for (var item:entrySet){
+            System.out.println(item);//PRINT VALUES & KEYS
+            System.out.println("PRINT KEYS ONLY: "+item.getKey());
+            System.out.println("PRINT VALUES ONLY: "+item.getValue());
+            System.out.println("PRINT KEYS & VALUES TOGETHER: "+item.getKey() +" "+item.getValue());
+        }}}
\ No newline at end of file
Index: AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemove.java b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemove.java
new file mode 100644
--- /dev/null	(date 1667692649687)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemove.java	(date 1667692649687)
@@ -0,0 +1,32 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class IteratorRemove {
+    public static void main(String[] args) {
+        ArrayList<String> beautyProd =new ArrayList<>();
+        beautyProd.add("Blush");
+        beautyProd.add("concealer");
+        beautyProd.add("foundation");
+        beautyProd.add("foundation");
+        beautyProd.add("eyeshadow");
+        beautyProd.add("shampoo");
+        beautyProd.add("lotion");
+        beautyProd.add("mascara");
+        beautyProd.add("lipstick");
+        beautyProd.add("moisturizer");
+        beautyProd.add("conditioner");
+
+        Iterator<String> iterator=beautyProd.iterator();
+        System.out.println(beautyProd.size());//will print count of items
+//to remove items from AL while loop is best for hasNext
+        while (iterator.hasNext()){
+            String item= iterator.next();
+            if (item.endsWith("r")){
+                iterator.remove();
+            }
+        }
+        System.out.println(beautyProd);
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/IteratorNextHasNextPrintNewLine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/IteratorNextHasNextPrintNewLine.java b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorNextHasNextPrintNewLine.java
new file mode 100644
--- /dev/null	(date 1668270070790)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorNextHasNextPrintNewLine.java	(date 1668270070790)
@@ -0,0 +1,30 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class IteratorNextHasNextPrintNewLine {
+    public static void main(String[] args) {
+        ArrayList<String> beautyProd =new ArrayList<>();
+        beautyProd.add("Blush");
+        beautyProd.add("concealer");
+        beautyProd.add("foundation");
+        beautyProd.add("foundation");
+        beautyProd.add("eyeshadow");
+        beautyProd.add("shampoo");
+        beautyProd.add("lotion");
+        beautyProd.add("mascara");
+        beautyProd.add("lipstick");
+        beautyProd.add("moisturizer");
+        beautyProd.add("conditioner");
+//get the iterator from list
+        Iterator<String> iterator=beautyProd.iterator();
+        System.out.println(iterator.hasNext());//we have 1 item (if I comment out the rest of the list)
+        System.out.println(iterator.next());//it gives the item & removes the items from iterator
+        System.out.println(iterator.hasNext());//false, cause there's only 1 item, there's nothing after next > so, no hasNext
+        iterator.next();
+        iterator.next();//true
+        System.out.println(iterator.next());//foundation, prints foundation cause called next twice
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/LoopsWithIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/LoopsWithIterator.java b/AllSyntaxCodes/src/C25CollectionsFramework/LoopsWithIterator.java
new file mode 100644
--- /dev/null	(date 1667692649221)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/LoopsWithIterator.java	(date 1667692649221)
@@ -0,0 +1,29 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class LoopsWithIterator {
+    public static void main(String[] args) {
+        ArrayList<String> beautyProd =new ArrayList<>();
+        beautyProd.add("Blush");
+        beautyProd.add("concealer");
+        beautyProd.add("foundation");
+        beautyProd.add("foundation");
+        beautyProd.add("eyeshadow");
+        beautyProd.add("shampoo");
+        beautyProd.add("lotion");
+        beautyProd.add("mascara");
+        beautyProd.add("lipstick");
+        beautyProd.add("moisturizer");
+        beautyProd.add("conditioner");
+
+        //never use loops with Collections Framework classes
+        /*for (int i = 0; i < beautyProd.size(); i++) {//for loop won't remove all, don't use loop or enhanced loop with ArrayList, AL will adjust its size
+            if (beautyProd.get(i).endsWith("r")){
+                beautyProd.remove(i);
+            }
+        }*/
+
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/ContainsAllDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/ContainsAllDemo.java b/AllSyntaxCodes/src/C25CollectionsFramework/ContainsAllDemo.java
new file mode 100644
--- /dev/null	(date 1667692649446)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/ContainsAllDemo.java	(date 1667692649446)
@@ -0,0 +1,36 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ContainsAllDemo {
+    public static void main(String[] args) {
+        ArrayList<String> beautyProd =new ArrayList<>();
+        beautyProd.add("Blush");
+        beautyProd.add("concealer");
+        beautyProd.add("foundation");
+        beautyProd.add("mascara");
+        beautyProd.add("lipstick");
+        beautyProd.add("foundation");
+        beautyProd.add("eyeshadow");
+        beautyProd.add("shampoo");
+        beautyProd.add("lotion");
+        beautyProd.add("moisturizer");
+        beautyProd.add("conditioner");
+
+        /*System.out.println(beautyProd.contains("Lipstick"));
+        System.out.println(beautyProd.contains("eyeshadow"));
+        System.out.println(beautyProd.contains("eyeliner"));*/
+
+        //to check if things are in list > shorter way, than the one above
+
+        ArrayList<String> bodyCare=new ArrayList<>();
+        bodyCare.add("shampoo");
+        bodyCare.add("lotion");
+        bodyCare.add("moisturizer");
+        bodyCare.add("conditioner");
+
+        System.out.println(beautyProd.containsAll(bodyCare));
+
+
+    }
+}
Index: AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysOnlyNoBrackets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysOnlyNoBrackets.java b/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysOnlyNoBrackets.java
new file mode 100644
--- /dev/null	(date 1668367438464)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/PrintKeysOnlyNoBrackets.java	(date 1668367438464)
@@ -0,0 +1,18 @@
+package C28MapsAndexcel;
+import java.util.HashMap;
+import java.util.Set;
+//Demo 3 print all the Keys without a bracket
+public class PrintKeysOnlyNoBrackets {
+    public static void main(String[] args) {
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+        //keySet method returns a Set that contains all the keys of map
+        Set<String>keys=items.keySet();
+        // Collection<String> keys2 =items.keySet(); >another way
+        for (String key:keys){
+            System.out.println(key);
+        }}}
\ No newline at end of file
Index: AllSyntaxCodes/src/C25CollectionsFramework/ALAddAllRemove1RemoveAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/ALAddAllRemove1RemoveAll.java b/AllSyntaxCodes/src/C25CollectionsFramework/ALAddAllRemove1RemoveAll.java
new file mode 100644
--- /dev/null	(date 1668269970065)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/ALAddAllRemove1RemoveAll.java	(date 1668269970065)
@@ -0,0 +1,36 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ALAddAllRemove1RemoveAll {
+    public static void main(String[] args) {
+
+        ArrayList<String> makeUpItem=new ArrayList<>();
+        makeUpItem.add("Blush");
+        makeUpItem.add("Base");
+        makeUpItem.add("concealer");
+        makeUpItem.add("Mascara");
+        makeUpItem.add("eyeLinear");
+        makeUpItem.add("lipstick");
+
+        ArrayList<String> cosmetics=new ArrayList<>();
+        cosmetics.add("Dove Soap");
+        cosmetics.add("Conditioner");
+        cosmetics.add("shampoo");
+        cosmetics.add("lotion");
+
+
+        ArrayList<String> beautyProducts=new ArrayList<>();
+        //adds everything from makeUpItem to beautyProducts
+        beautyProducts.addAll(makeUpItem);
+        beautyProducts.addAll(cosmetics);
+        System.out.println(beautyProducts);
+        beautyProducts.remove("lotion");  // removes only one item
+        System.out.println(beautyProducts);
+
+        beautyProducts.removeAll(cosmetics);
+
+        System.out.println(beautyProducts);
+        beautyProducts.clear(); // removes everything
+        System.out.println(beautyProducts);
+}}
Index: AllSyntaxCodes/src/C25CollectionsFramework/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/Notes b/AllSyntaxCodes/src/C25CollectionsFramework/Notes
new file mode 100644
--- /dev/null	(date 1668269387674)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/Notes	(date 1668269387674)
@@ -0,0 +1,34 @@
+Collections Framework:
+    Collection framework is collection of multiple classes and interfaces which help us process the data
+    efficiently and easily.
+why we should learn about it.
+    1) Its very flexible.
+    2) Provide ready-made methods that we can just use.
+what is the Syntax?
+    Its similar how we create the object of any class, but we use <> to specify the name of the class
+    whose objects we are going to store in that class.
+Issues with Collections framework:
+    1) Collection framework does not work with primitive datatypes(solution is use wrapper classes).
+
+Note: frequently asked in interviews!!!!!!!
+
+Wrapper classes:
+    wrapper classes are object types for all primitive types.
+Boxing:
+    converting the primitive data type to its corresponding wrapper type by explicitly calling methods.
+    int num=10;
+            // boxing or manual conversion from primitive to wrapper type
+          //  Integer wrappedNum=Integer.valueOf(num);
+Auto Boxing:
+    converting the primitive data type to its corresponding wrapper type by simply assigning the values.
+     Integer wrappedNum=10;
+Unboxing:
+    Converting a wrapper type to its corresponding primtive type by explicitly calling a method.
+      //unboxing converting a wrapper type to a corresponding primitive type
+          //  int num2=wrappedNum.intValue();
+Auto Unboxing:
+    converting a wrapper to corresponding primitive automatically by just assigning the value.
+    Integer wrappedNum=new Integer(10);
+    int num2=wrappedNum;
+
+Iterators:
\ No newline at end of file
Index: AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveChars.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveChars.java b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveChars.java
new file mode 100644
--- /dev/null	(date 1667692649336)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveChars.java	(date 1667692649336)
@@ -0,0 +1,50 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class IteratorRemoveChars {
+    public static void main(String[] args) {
+        //delete all items with letter B or ends with a
+        ArrayList<String> beautyProd =new ArrayList<>();
+        beautyProd.add("Blush");
+        beautyProd.add("concealer");
+        beautyProd.add("foundation");
+        beautyProd.add("foundation");
+        beautyProd.add("eyeshadow");
+        beautyProd.add("shampoo");
+        beautyProd.add("lotion");
+        beautyProd.add("mascara");
+        beautyProd.add("lipstick");
+        beautyProd.add("moisturizer");
+        beautyProd.add("conditioner");
+
+        var iterator = beautyProd.iterator();//if you don't know what data type you're working with
+        while (iterator.hasNext()){
+            var item=iterator.next();
+            if (item.startsWith("B")||item.endsWith("a")){
+                iterator.remove();
+            }}
+        System.out.println(beautyProd);
+
+        /*
+           var iterator=beautyProducts.iterator();
+
+        while(iterator.hasNext()){
+            var item=iterator.next();
+            if(item.startsWith("B") || item.endsWith("a")){
+                iterator.remove();
+            } THIS IS AN EASIER WAY > Lambda method
+        }
+        System.out.println(beautyProducts);
+    }
+         */
+
+        //names.removeIf(item -> item.endsWith("r")); //> another easier way
+
+        /*var number=10;
+        var name="Janel";
+        var decimalNum=21.5;*/
+
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/IteratorCountPrintNewLinePrintAllinArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/IteratorCountPrintNewLinePrintAllinArray.java b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorCountPrintNewLinePrintAllinArray.java
new file mode 100644
--- /dev/null	(date 1668270291317)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorCountPrintNewLinePrintAllinArray.java	(date 1668270291317)
@@ -0,0 +1,30 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class IteratorCountPrintNewLinePrintAllinArray {
+    public static void main(String[] args) {
+        ArrayList<String> beautyProducts=new ArrayList<>();
+        beautyProducts.add("Blush");
+        beautyProducts.add("Base");
+        beautyProducts.add("Mascara");
+        beautyProducts.add("lipstick");
+        beautyProducts.add("Dove Soap");
+        beautyProducts.add("Conditioner");
+        beautyProducts.add("Primer");
+        beautyProducts.add("shampoo");
+        beautyProducts.add("lotion");
+        beautyProducts.add("concealer");
+        // beautyProducts.add("eyeLinear");
+
+        Iterator<String> iterator=beautyProducts.iterator();
+        System.out.println(beautyProducts.size());
+        while (iterator.hasNext()){
+            System.out.println(iterator.next());
+            System.out.println(iterator.next());
+        }
+        System.out.println(beautyProducts);
+
+    }
+}
Index: AllSyntaxCodes/src/C28MapsAndexcel/RemoveBasedOnValues.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/RemoveBasedOnValues.java b/AllSyntaxCodes/src/C28MapsAndexcel/RemoveBasedOnValues.java
new file mode 100644
--- /dev/null	(date 1668367438409)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/RemoveBasedOnValues.java	(date 1668367438409)
@@ -0,0 +1,30 @@
+package C28MapsAndexcel;//MapsDemo
+import java.util.HashMap;
+public class RemoveBasedOnValues {
+    public static void main(String[] args) {
+        //Remove the items if their price is more than 10
+        HashMap<String,Double> items=new HashMap<>();
+        items.put("Iphone 14",1000.0);
+        items.put("Eggs",2.40);
+        items.put("Apples",5.0);
+        items.put("Keyboard",100.0);
+        items.put("Flower",1.0);
+      /*  //first we are getting a collection of values then an Iterator
+           Iterator<Double> iterator=items.values().iterator();
+           //first we are getting a collection of values then an Iterator
+        while (iterator.hasNext()){
+            Double price=iterator.next();
+            if(price>10){
+                iterator.remove();
+            }}*/
+        //with Lambda
+        items.values().removeIf(price -> price>10);
+        //items.values().removeIf(price -> price>10&&price<100);
+        System.out.println(items);
+    }
+    /*public boolean check(Double price){
+        if (price > 10) {
+            return true;
+        } else {
+            return false;
+        }}*/}
Index: AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsLetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsLetter.java b/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsLetter.java
new file mode 100644
--- /dev/null	(date 1668367438316)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsLetter.java	(date 1668367438316)
@@ -0,0 +1,15 @@
+package C28MapsAndexcel;
+import java.util.HashMap;
+//Demo 2 > Remove items containing "e"
+public class RemoveContainsLetter {
+    public static void main(String[] args) {
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+        //must have a collection 1st >keySet
+        items.keySet().removeIf(name-> name.contains("e"));//lambda
+        System.out.println(items);
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/C25CollectionsFramework/ArrayListStringLength.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/ArrayListStringLength.java b/AllSyntaxCodes/src/C25CollectionsFramework/ArrayListStringLength.java
new file mode 100644
--- /dev/null	(date 1668269599713)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/ArrayListStringLength.java	(date 1668269599713)
@@ -0,0 +1,21 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ArrayListStringLength {
+
+    //generic collection
+
+    public static void main(String[] args) {
+
+        // Non-generic way of using collections framework this is how your ancestors use to write code before java
+        // 1.5 it causes a lot of problems at run time because java don't know at compile time what type of data
+        //you are storing in this class and because java does not know it can't help you avoid these errors
+        ArrayList names=new ArrayList();
+        names.add("Serhi");
+        names.add(10);
+        // System.out.println(names);
+
+        System.out.println(((String)names.get(0)).length());
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/ALRemoveEndsWith.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/ALRemoveEndsWith.java b/AllSyntaxCodes/src/C25CollectionsFramework/ALRemoveEndsWith.java
new file mode 100644
--- /dev/null	(date 1668270507257)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/ALRemoveEndsWith.java	(date 1668270507257)
@@ -0,0 +1,34 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class ALRemoveEndsWith {
+    public static void main(String[] args) {
+        ArrayList<String> beautyProducts=new ArrayList<>();
+        beautyProducts.add("Blush");
+        beautyProducts.add("Base");
+        beautyProducts.add("Mascara");
+        beautyProducts.add("lipstick");
+        beautyProducts.add("Dove Soap");
+        beautyProducts.add("Conditioner");
+        beautyProducts.add("Primer");
+        beautyProducts.add("shampoo");
+        beautyProducts.add("lotion");
+        beautyProducts.add("concealer");
+        beautyProducts.add("eyeLinear");
+//11
+        for (int i = 0; i < beautyProducts.size(); i++) {
+            if(beautyProducts.get(i).endsWith("r")){
+                beautyProducts.remove(i);
+            }
+        }
+       /* for (String item:beautyProducts
+             ) {
+            if(item.endsWith("r")){
+                beautyProducts.remove(item);
+            }
+        }*/
+        System.out.println(beautyProducts);
+    }
+}
+
Index: AllSyntaxCodes/src/C25CollectionsFramework/RemoveStringFromArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/RemoveStringFromArrayList.java b/AllSyntaxCodes/src/C25CollectionsFramework/RemoveStringFromArrayList.java
new file mode 100644
--- /dev/null	(date 1668270471724)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/RemoveStringFromArrayList.java	(date 1668270471724)
@@ -0,0 +1,29 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class RemoveStringFromArrayList {
+
+    //remove all
+    public static void main(String[] args) {
+        ArrayList<String> makeUpItem=new ArrayList<>();
+        makeUpItem.add("Blush");
+        makeUpItem.add("Base");
+        makeUpItem.add("concealer");
+        makeUpItem.add("Mascara");
+        makeUpItem.add("eyeLinear");
+        makeUpItem.add("lipstick");
+
+
+        ArrayList<String> itemsToBeRemoved=new ArrayList<>();
+        itemsToBeRemoved.add("Blush");
+        itemsToBeRemoved.add("Base");
+        itemsToBeRemoved.add("concealer");
+        itemsToBeRemoved.add("Josh");
+
+        makeUpItem.removeAll(itemsToBeRemoved);
+        // makeUpItem.clear();  // it removes everything
+        System.out.println(makeUpItem);
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/LambdaRemoveStartsWith.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/LambdaRemoveStartsWith.java b/AllSyntaxCodes/src/C25CollectionsFramework/LambdaRemoveStartsWith.java
new file mode 100644
--- /dev/null	(date 1668270413792)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/LambdaRemoveStartsWith.java	(date 1668270413792)
@@ -0,0 +1,26 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class LambdaRemoveStartsWith {
+    public static void main(String[] args) {
+        // delete all the products which start with letter B or ends with letter a
+        ArrayList<String> beautyProducts=new ArrayList<>();
+        beautyProducts.add("Blush");
+        beautyProducts.add("Base");
+        beautyProducts.add("Mascara");
+        beautyProducts.add("lipstick");
+        beautyProducts.add("Dove Soap");
+        /*
+         var number=10;
+        var name="Tymur";
+        var decimalNumber=21.5;
+         */
+
+        // var item=iterator.next(); java 11
+        beautyProducts.removeIf(x -> x.startsWith("B"));
+        System.out.println(beautyProducts);
+
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveStartsWith.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveStartsWith.java b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveStartsWith.java
new file mode 100644
--- /dev/null	(date 1668270362337)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/IteratorRemoveStartsWith.java	(date 1668270362337)
@@ -0,0 +1,32 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class IteratorRemoveStartsWith {
+    public static void main(String[] args) {
+        // delete all the products which start with letter B or ends with letter a
+        ArrayList<String> beautyProducts=new ArrayList<>();
+        beautyProducts.add("Blush");
+        beautyProducts.add("Base");
+        beautyProducts.add("Mascara");
+        beautyProducts.add("lipstick");
+        beautyProducts.add("Dove Soap");
+        /*
+         var number=10;
+        var name="Tymur";
+        var decimalNumber=21.5;
+         */
+        var iterator = beautyProducts.iterator();
+
+        while (iterator.hasNext()){
+            // var item=iterator.next(); java 11
+            String item=iterator.next();
+            if(item.startsWith("B")||item.endsWith("a")){
+                iterator.remove();
+            }
+        }
+        System.out.println(beautyProducts);
+
+
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Asghar3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Asghar3.java b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar3.java
new file mode 100644
--- /dev/null	(date 1667159333908)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar3.java	(date 1667159333908)
@@ -0,0 +1,29 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class Asghar3 {
+    public static void main(String[] args) {
+        //how to store chars in arrayList
+        // ArrayList<Character> chars=new ArrayList<>(new ArrayList<>(Arrays.asList('E','F')));
+        ArrayList<Character> chars=new ArrayList<>();
+        chars.add('A');
+        chars.add('B');
+        chars.add('C');
+        chars.add('Z');
+        chars.add('G');
+        System.out.println(chars);
+
+        ArrayList<Boolean> booleans=new ArrayList<>();
+        booleans.add(false);
+        booleans.add(false);
+        booleans.add(true);
+        System.out.println(booleans);
+
+        ArrayList<Float> floats=new ArrayList<>();
+        floats.add(12.5F);
+        floats.add(12f);
+        System.out.println(floats);
+
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Asghar2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Asghar2.java b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar2.java
new file mode 100644
--- /dev/null	(date 1667159312348)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar2.java	(date 1667159312348)
@@ -0,0 +1,29 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class Asghar2 {
+    public static void main(String[] args) {
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(10);
+        numbers.add(20);
+        numbers.add(35);
+
+        int a=34;
+        numbers.add(a);
+        System.out.println(numbers);
+
+
+        for(Integer num:numbers){
+            System.out.println(num);
+        }
+
+        //int => Integer
+        // boolean => Boolean
+        // byte => Byte
+        // double => Double
+        // long => Long
+        // float => Float
+        // char => Character
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Asghar1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Asghar1.java b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar1.java
new file mode 100644
--- /dev/null	(date 1667159271256)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar1.java	(date 1667159271256)
@@ -0,0 +1,36 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class Asghar1 {
+    public static void main(String[] args) {
+
+        //Syntax to create an arrayList
+        ArrayList<String> colors=new ArrayList<>();
+        //use add method to insert elements in an arrayList
+        colors.add("Red");
+        colors.add("Green");
+        colors.add("Blue");
+        colors.add("Yellow");
+        colors.add("Black");
+
+        //prints all the elements
+        System.out.println(colors);
+        // get method prints individual elements from arraylist
+        System.out.println(colors.get(0));
+        System.out.println(colors.get(2));
+        //size me
+        System.out.println(colors.size());
+
+        //getting all the elements through normal loop
+        for (int i = 0; i < colors.size(); i++) {
+            System.out.println(colors.get(i));
+        }
+        System.out.println("**************");
+        //getting all the elements through enhanced loop
+        for(String color:colors){
+            System.out.println(color);
+        }
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/WrapperClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/WrapperClass.java b/AllSyntaxCodes/src/C25CollectionsFramework/WrapperClass.java
new file mode 100644
--- /dev/null	(date 1668270576541)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/WrapperClass.java	(date 1668270576541)
@@ -0,0 +1,26 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class WrapperClass {
+
+    //wrapper classes
+
+    public static void main(String[] args) {
+
+        int num=10;
+        // boxing or manual conversion from primitive to wrapper type
+        //  Integer wrappedNum=Integer.valueOf(num);
+        // AutoBoxing or automatic conversion of a primitive to a wrapper type
+        Integer wrappedNum=10;
+        System.out.println(wrappedNum);
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(10);
+        //unboxing converting a wrapper type to a corresponding primitive type
+        //  int num2=wrappedNum.intValue();
+        // Auto unboxing or automatic conversion of a wrapper type to a primitive type
+        int num2=wrappedNum;
+
+
+    }
+}
Index: AllSyntaxCodes/src/PrivateClass/ArrayVsArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/PrivateClass/ArrayVsArrayList.java b/AllSyntaxCodes/src/PrivateClass/ArrayVsArrayList.java
new file mode 100644
--- /dev/null	(date 1667160973985)
+++ b/AllSyntaxCodes/src/PrivateClass/ArrayVsArrayList.java	(date 1667160973985)
@@ -0,0 +1,25 @@
+package PrivateClass;
+
+import java.util.ArrayList;
+
+public class ArrayVsArrayList {
+    public static void main(String[] args) {
+
+        String[] names={"adam","jon","don","karl"};
+        String name="adam";
+
+        for (String nam:names) {
+            if (nam.equals("adam")){
+                System.out.println("found");
+            }
+        }
+        ArrayList<String> arrayList=new ArrayList<>();
+        arrayList.add("adam");
+        arrayList.add("janel");
+        arrayList.add("rimma");
+        arrayList.add("dusan");
+
+        System.out.println(arrayList.contains("adam"));
+
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Asghar6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Asghar6.java b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar6.java
new file mode 100644
--- /dev/null	(date 1667159455708)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar6.java	(date 1667159455708)
@@ -0,0 +1,35 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+public class Asghar6 {
+    public static void main(String[] args) {
+        /*
+        if we have to store a single value we should use variables
+         */
+        String name="Josh";
+        String name2="Joe";
+        System.out.println(name);
+        System.out.println(name2);
+        /*
+        if we have to store more than 2 values of same kind then we should go with arrays
+         */
+        String[] names={"Reshad","Adam","Again josh"};
+
+
+        /*
+        fixed in size
+         */
+        String[] breeds=new String[10];
+        breeds[0]="BullDogs";
+        System.out.println(Arrays.toString(breeds));
+
+        ArrayList<String> colors=new ArrayList<>();
+        colors.add("Green");
+        colors.add("Red");
+        System.out.println(colors.contains("Green"));
+        System.out.println(colors);
+
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Asghar5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Asghar5.java b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar5.java
new file mode 100644
--- /dev/null	(date 1667159408200)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar5.java	(date 1667159408200)
@@ -0,0 +1,19 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class Asghar5 {
+    public static void main(String[] args) {
+        ArrayList<String> colors=new ArrayList<>();
+        //use add method to insert elements in an arrayList
+        colors.add("Red");
+        colors.add("Green");
+        colors.add("Blue");
+        colors.add("Yellow");
+        colors.add("Black");
+        System.out.println(colors);
+        //   colors.remove("Blue");
+        colors.remove(2);
+        System.out.println(colors);
+    }
+}
Index: AllSyntaxCodes/src/C24CollectionsFramework/Asghar4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C24CollectionsFramework/Asghar4.java b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar4.java
new file mode 100644
--- /dev/null	(date 1667159368322)
+++ b/AllSyntaxCodes/src/C24CollectionsFramework/Asghar4.java	(date 1667159368322)
@@ -0,0 +1,28 @@
+package C24CollectionsFramework;
+
+import java.util.ArrayList;
+
+public class Asghar4 {
+    public static void main(String[] args) {
+
+        ArrayList<String> names=new ArrayList<>();
+        names.add("Tymur");
+        names.add("Salma");
+        names.add("MJ");
+        names.add("Josh");
+        names.set(2,"Josh Again");
+        System.out.println(names);
+
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(10);
+        numbers.add(25);
+        numbers.add(35);
+        numbers.add(1,100);
+        numbers.set(0,12000);
+        System.out.println(numbers);
+        numbers.clear(); // deletes all the elements from the list
+        System.out.println(numbers);
+
+
+    }
+}
Index: AllSyntaxCodes/src/C29FileHandling/MethodsDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/MethodsDemo.java b/AllSyntaxCodes/src/C29FileHandling/MethodsDemo.java
new file mode 100644
--- /dev/null	(date 1668450973143)
+++ b/AllSyntaxCodes/src/C29FileHandling/MethodsDemo.java	(date 1668450973143)
@@ -0,0 +1,31 @@
+package C29FileHandling;
+import C27CollectionsFramewors.Dog;
+import Utils.ExcelReader;
+import java.io.IOException;
+import java.util.LinkedHashMap;
+import java.util.Map;
+//accessing through this method, the Dog Object/class from another package
+public class MethodsDemo {
+    public static Dog returnDog(){
+        return new Dog("Fluffy","green","German");
+    }
+    //can return anything from that class, for eg>returning map
+    public static Map<String,String>getMap(){
+        Map<String,String> map=new LinkedHashMap<>();
+        map.put("Apple", "Mango");
+        return map;
+    }
+    /*when we created properties object, we are returning it from the method*/
+    public static void main(String[] args) throws IOException {
+        Dog dog=returnDog();
+        System.out.println(dog);
+        //calling Map
+        System.out.println(getMap());
+        //calling Excel file
+        var data=ExcelReader.read("C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx");
+        //if I want to return data from row #1
+        System.out.println(data.get(0));
+        //to get a specific cell, for eg>Age
+        LinkedHashMap<String,String> map=data.get(0);
+        System.out.println(map.get("Age"));
+    }}
Index: AllSyntaxCodes/src/C25CollectionsFramework/HW3RemoveNumsDividedBy5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/HW3RemoveNumsDividedBy5.java b/AllSyntaxCodes/src/C25CollectionsFramework/HW3RemoveNumsDividedBy5.java
new file mode 100644
--- /dev/null	(date 1667692648840)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/HW3RemoveNumsDividedBy5.java	(date 1667692648840)
@@ -0,0 +1,22 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+//Create an arrayList of even numbers from 1 to 500. Remove any number that is divisible by 5 from that arrayList.
+public class HW3RemoveNumsDividedBy5 {
+    public static void main(String[] args) {
+        ArrayList<Integer> nums=new ArrayList<>();
+
+        for (int i = 1; i < 500; i++) {
+            if (i%5==0){
+                nums.add(i);
+            }
+        }
+        System.out.println(nums);
+
+
+
+
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/HW2ReplaceWithAnotherStringIfContainsChar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/HW2ReplaceWithAnotherStringIfContainsChar.java b/AllSyntaxCodes/src/C25CollectionsFramework/HW2ReplaceWithAnotherStringIfContainsChar.java
new file mode 100644
--- /dev/null	(date 1667692649518)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/HW2ReplaceWithAnotherStringIfContainsChar.java	(date 1667692649518)
@@ -0,0 +1,27 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
+//Create an arrayList of drinks. If any drink has letter “a” or “e” replace it with water.
+public class HW2ReplaceWithAnotherStringIfContainsChar {
+    public static void main(String[] args) {
+        ArrayList<String> drinks=new ArrayList<>();
+        drinks.add("coke");
+        drinks.add("pepsi");
+        drinks.add("juice");
+        drinks.add("tea");
+
+        Iterator<String> iterator= drinks.iterator();
+
+        while (iterator.hasNext()){
+            String beverage= iterator.next();
+            if (beverage.contains("a")||beverage.contains("e")){
+                System.out.println("Water");
+            }else {
+                System.out.println(beverage);
+            }
+        }
+
+    }
+}
Index: AllSyntaxCodes/src/C25CollectionsFramework/HW1RemoveStringWithLastChar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C25CollectionsFramework/HW1RemoveStringWithLastChar.java b/AllSyntaxCodes/src/C25CollectionsFramework/HW1RemoveStringWithLastChar.java
new file mode 100644
--- /dev/null	(date 1667692648693)
+++ b/AllSyntaxCodes/src/C25CollectionsFramework/HW1RemoveStringWithLastChar.java	(date 1667692648693)
@@ -0,0 +1,24 @@
+package C25CollectionsFramework;
+
+import java.util.ArrayList;
+
+//Create an arrayList of words. Remove every word that ends with “e”.
+public class HW1RemoveStringWithLastChar {
+    public static void main(String[] args) {
+        ArrayList<String> names=new ArrayList<>();
+        names.add("Janel");
+        names.add("Luda");
+        names.add("Rimma");
+        names.add("Mike");
+        names.add("Apple");
+
+        var iterator=names.iterator();
+
+        while (iterator.hasNext()){
+            var name=iterator.next();
+            if (name.endsWith("e")){
+                iterator.remove();
+            }}
+        System.out.println(names);
+    }}
+
Index: AllSyntaxCodes/src/PrivateClass/EnhancedForLoop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/PrivateClass/EnhancedForLoop.java b/AllSyntaxCodes/src/PrivateClass/EnhancedForLoop.java
new file mode 100644
--- /dev/null	(date 1667161744087)
+++ b/AllSyntaxCodes/src/PrivateClass/EnhancedForLoop.java	(date 1667161744087)
@@ -0,0 +1,21 @@
+package PrivateClass;
+
+import java.util.Arrays;
+
+public class EnhancedForLoop {
+    public static void main(String[] args) {
+        String[] names={"adam","jon","don","karl"};
+//first specify var String, then give a name to store, then call the var names
+        for (String name:names){ //enhanced for loop can't update, 1 con
+            System.out.println(name);
+        }
+        for (int i = 0; i < names.length; i++) {//only normal for loop can update the name
+            if (names[i].equals("john")){
+                names[i]="john";
+            }
+        }
+        names[1]="john";//this is how you update the array
+
+        System.out.println(Arrays.toString(names));
+    }
+}
Index: AllSyntaxCodes/src/C26CollectionsFramework/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/Notes b/AllSyntaxCodes/src/C26CollectionsFramework/Notes
new file mode 100644
--- /dev/null	(date 1668270922582)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/Notes	(date 1668270922582)
@@ -0,0 +1,60 @@
+Collections Framework:
+    It's a collection of classes and interfaces that help us to store and manipulate the data efficiently.
+Why we should use Collections Framework?
+    1) It's flexible( we don't need to provide size beforehand).
+    2) It's dynamic(all the classes can increase and decrease their size at run time).
+    3) There are built-in methods to perform common tasks.
+    4) pre-built data structures.
+downsides of Collections framework:
+    1)we can't use primitive data types we have to use wrapper classes which occupy 4 times more memory
+    than a primitive.
+    int num=10 // 4 memory locations
+    Integer num1=10; //16 memory locations
+Wrapper:
+    Wrapper classes are object types for all the primitive types
+why should we learn about the wrapper types?
+    1) Because collections framework only supports wrapper types.
+    2) There are built-in methods to perform common tasks.
+
+Downsides:
+1)we can't use primitive data types we have to use wrapper classes which occupy 4 times more memory
+    than a primitive.
+    int num=10 // 4 memory locations
+    Integer num1=10; //16 memory locations
+Boxing:
+    Converting a primitive to its corresponding wrapper type by manually calling methods.
+    int pnum=10;
+    Integer wnum=new Integer(pnum);
+AutoBoxing:
+    conversion from primitive to a wrapper type but here we don't need to call any methods explicitly.
+     int pnum=10;
+     Integer wnum=pnum;
+Unboxing:
+    converting a wrapper to a primitive by calling a method.
+    Integer wnum=new Integer(10);
+    int pnum=wnum.intValue();
+AutoUnboxing:
+    converting a wrapper to a primitive without calling any methods.
+    Integer wnum=new Integer(10);
+    int pnum=wnum;
+ArrayList Class:
+    it is a classes in collections framework that allows us to store data like an array.
+    some common methods from this class are 1) add() 2) remove 3) contains 4) size().
+Iterator:
+    its a mechanism that allows us to iterate and delete data from any class in collections framework.
+    it has hasNext() next() remove().
+why we should learn about Iterator?
+    Because loops are not safe when we perform an operation that can change the size of a data structure.
+ArrayList Vs LinkedList
+    Both of the classes implement the list interface which means both of them will have same methods.
+ArrayList:
+    uses an array behind the scenes to store the data.
+    we should use arrayList when we are retrieving the data most of the time and not inserting the data
+    in the start or in-between if we have to shift the data to the list.
+LinkedList:
+    Linked-list does not store the data in consecutive memory locations, that's why it is easier to insert
+    and remove the data from anywhere in a list.
+    if you are going to manipulate the data(shifting of elements) always use linked-list.
+
+if most of the time you use add or remove method then use linkedList.
+if most of the time you use get method use ArrayList.
\ No newline at end of file
Index: AllSyntaxCodes/src/C26CollectionsFramework/HW1IteratorRemoveLastChar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/HW1IteratorRemoveLastChar.java b/AllSyntaxCodes/src/C26CollectionsFramework/HW1IteratorRemoveLastChar.java
new file mode 100644
--- /dev/null	(date 1668289395090)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/HW1IteratorRemoveLastChar.java	(date 1668289395090)
@@ -0,0 +1,20 @@
+package C26CollectionsFramework;
+
+import java.util.ArrayList;
+//Create an arrayList of words. Remove every word that ends with “e”.
+public class HW1IteratorRemoveLastChar {
+    public static void main(String[] args) {
+        ArrayList<String> words=new ArrayList();
+        words.add("Java");
+        words.add("Janelle");
+        words.add("France");
+        words.add("Luda");
+
+        var iterator=words.iterator();
+        while(iterator.hasNext()){
+            var item=iterator.next();
+            if (item.endsWith("e")){
+                iterator.remove();
+            }}
+        System.out.println(words);
+    }}
Index: AllSyntaxCodes/src/C26CollectionsFramework/WrapperDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/WrapperDemo.java b/AllSyntaxCodes/src/C26CollectionsFramework/WrapperDemo.java
new file mode 100644
--- /dev/null	(date 1668289396174)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/WrapperDemo.java	(date 1668289396174)
@@ -0,0 +1,13 @@
+package C26CollectionsFramework;
+
+public class WrapperDemo {
+    public static void main(String[] args) {
+        String num="10";
+        int number=Integer.parseInt(num);//converting string to primitive->int
+        //show how much can store each primitive
+        System.out.println(Integer.MAX_VALUE);
+        System.out.println(Double.MAX_VALUE);
+        System.out.println(Long.MAX_VALUE);
+
+    }
+}
Index: AllSyntaxCodes/src/C26CollectionsFramework/typesOfSets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/typesOfSets.java b/AllSyntaxCodes/src/C26CollectionsFramework/typesOfSets.java
new file mode 100644
--- /dev/null	(date 1668289396706)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/typesOfSets.java	(date 1668289396706)
@@ -0,0 +1,42 @@
+package C26CollectionsFramework;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.TreeSet;
+public class typesOfSets {
+    public static void main(String[] args) {
+        /*There are three types of sets
+HashSet:DownSide=> it does not care about the insertion order
+UpSide => It is the fastest type of Set*/
+        HashSet<String> hashSet=new HashSet<>();
+        //doesn't print in order
+        hashSet.add("Mango");
+        hashSet.add("Apple");
+        hashSet.add("Mango");
+        hashSet.add("Kiwi");
+        hashSet.add("Orange");
+        hashSet.add("Banana");
+        System.out.println("HashSet");
+        System.out.println(hashSet);
+        //Whenever you need insertion order
+        LinkedHashSet<String> linkedHashSet=new LinkedHashSet<>();
+        linkedHashSet.add("Mango");
+        linkedHashSet.add("Apple");
+        linkedHashSet.add("Kiwi");
+        linkedHashSet.add("Mango");
+        linkedHashSet.add("Orange");
+        linkedHashSet.add("Banana");
+        System.out.println("linkedHashSet");
+        System.out.println(linkedHashSet);
+        // When ever you need sorted data use TreeSet
+        TreeSet<String> treeSet=new TreeSet<>();
+        treeSet.add("Mango");
+        treeSet.add("Apple");
+        treeSet.add("Kiwi");
+        treeSet.add("Mango");
+        treeSet.add("Orange");
+        treeSet.add("Banana");
+        System.out.println("TreeSet");
+        System.out.println(treeSet);
+    }}
+
+
Index: AllSyntaxCodes/src/C26CollectionsFramework/ArrayListVsLinkedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/ArrayListVsLinkedList.java b/AllSyntaxCodes/src/C26CollectionsFramework/ArrayListVsLinkedList.java
new file mode 100644
--- /dev/null	(date 1668290553178)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/ArrayListVsLinkedList.java	(date 1668290553178)
@@ -0,0 +1,28 @@
+package C26CollectionsFramework;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+
+public class ArrayListVsLinkedList {
+    public static void main(String[] args) {
+
+        LinkedList<String> linkedList=new LinkedList<>();
+        //LinkedList is faster
+        long startTime = System.currentTimeMillis();
+        for (int i = 0; i < 1000000; i++) {
+            linkedList.add(0,"Test");
+        }
+        long endTime = System.currentTimeMillis();
+
+        System.out.println("LinkedList "+(endTime-startTime));
+        //ArrayList is slower
+        ArrayList<String> arrayList=new ArrayList<>();
+        long startTimeA = System.currentTimeMillis();
+        for (int i = 0; i < 1000000; i++) {
+            arrayList.add(0,"Test");
+        }
+        long endTimeA = System.currentTimeMillis();
+
+        System.out.println("ArrayList "+(endTimeA-startTimeA));
+    }
+}
\ No newline at end of file
Index: AllSyntaxCodes/src/C26CollectionsFramework/HW3EvenNumbersandRemoveNumsDivisibleBy5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/HW3EvenNumbersandRemoveNumsDivisibleBy5.java b/AllSyntaxCodes/src/C26CollectionsFramework/HW3EvenNumbersandRemoveNumsDivisibleBy5.java
new file mode 100644
--- /dev/null	(date 1668289395788)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/HW3EvenNumbersandRemoveNumsDivisibleBy5.java	(date 1668289395788)
@@ -0,0 +1,23 @@
+package C26CollectionsFramework;
+
+import java.util.ArrayList;
+/* Create an arrayList of even numbers from 1 to 500.
+Remove any number that is divisible by 5 from that arrayList.
+  */
+public class HW3EvenNumbersandRemoveNumsDivisibleBy5 {
+    public static void main(String[] args) {
+        ArrayList<Integer> even=new ArrayList<>();
+        for (int i = 2; i <=500; i=i+2) {
+            even.add(i);
+        }
+        System.out.println(even);
+
+        var it=even.iterator();
+
+        while (it.hasNext()){
+            Integer num= it.next();
+            if (num%5==0){
+                it.remove();
+            }}
+        System.out.println(even);
+    }}
Index: AllSyntaxCodes/src/C26CollectionsFramework/HW2ReplaceStringWithAnotherString.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/HW2ReplaceStringWithAnotherString.java b/AllSyntaxCodes/src/C26CollectionsFramework/HW2ReplaceStringWithAnotherString.java
new file mode 100644
--- /dev/null	(date 1668289395879)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/HW2ReplaceStringWithAnotherString.java	(date 1668289395879)
@@ -0,0 +1,22 @@
+package C26CollectionsFramework;
+import java.util.ArrayList;
+/*
+create an arraylist of drinks.if any drink has letter "a" or "e"
+replace it with water.
+ */
+public class HW2ReplaceStringWithAnotherString {
+    public static void main(String[] args) {
+        ArrayList<String> drinks=new ArrayList<>();
+        drinks.add("lemonade");
+        drinks.add("tea");
+        drinks.add("tequila");
+        drinks.add("milk");
+//better to use for loop, cause we are not changing the list
+        for (int i = 0; i < drinks.size(); i++) {
+            if(drinks.get(i).contains("a")||drinks.get(i).contains("e")){
+                drinks.set(i,"water");
+            }}
+        System.out.println(drinks);
+    }}
+
+
Index: AllSyntaxCodes/src/C26CollectionsFramework/PrintAllRemoveDuplicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/PrintAllRemoveDuplicate.java b/AllSyntaxCodes/src/C26CollectionsFramework/PrintAllRemoveDuplicate.java
new file mode 100644
--- /dev/null	(date 1668289395690)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/PrintAllRemoveDuplicate.java	(date 1668289395690)
@@ -0,0 +1,18 @@
+package C26CollectionsFramework;
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+public class PrintAllRemoveDuplicate {
+    public static void main(String[] args) {
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(10);
+        numbers.add(10);
+        numbers.add(10);
+        System.out.println(numbers);
+
+        LinkedHashSet<Integer> setNumbers=new LinkedHashSet<>();
+        setNumbers.add(10);
+        setNumbers.add(10);
+        setNumbers.add(10);
+        System.out.println(setNumbers);
+    }}
+
Index: AllSyntaxCodes/src/C26CollectionsFramework/WhenToUseSets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/WhenToUseSets.java b/AllSyntaxCodes/src/C26CollectionsFramework/WhenToUseSets.java
new file mode 100644
--- /dev/null	(date 1668289395335)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/WhenToUseSets.java	(date 1668289395335)
@@ -0,0 +1,30 @@
+package C26CollectionsFramework;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+//use Sets to remove Duplicates
+public class WhenToUseSets {
+    public static void main(String[] args) {
+        ArrayList<Integer> numbers=new ArrayList<>();
+        //print all the numbers
+        numbers.add(10);
+        numbers.add(20);
+        numbers.add(10);
+        numbers.add(40);
+        numbers.add(50);
+        numbers.add(50);
+        numbers.add(50);
+        numbers.add(50);
+        numbers.add(50);
+        System.out.println(numbers);
+        //CONVERT TO LinkedHashSet & print NO DUPLICATES IN ORDER
+        System.out.println(new LinkedHashSet<>(numbers)+"REMOVE DUPLICATES IN ORDER");
+        //CONVERT TO HashSet & print NO DUPLICATES
+        HashSet<Integer> hashSet=new HashSet<>(numbers);
+        System.out.println(hashSet);
+        //CONVERT TO LinkedList & print NO DUPLICATES
+        LinkedList<Integer> linkedList=new LinkedList<>(hashSet);
+        System.out.println(linkedList);
+    }}
+
Index: AllSyntaxCodes/src/C26CollectionsFramework/ApachiCheck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C26CollectionsFramework/ApachiCheck.java b/AllSyntaxCodes/src/C26CollectionsFramework/ApachiCheck.java
new file mode 100644
--- /dev/null	(date 1668289395966)
+++ b/AllSyntaxCodes/src/C26CollectionsFramework/ApachiCheck.java	(date 1668289395966)
@@ -0,0 +1,19 @@
+package C26CollectionsFramework;
+
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+
+public class ApachiCheck {
+    public static void main(String[] args) throws IOException {
+       String path="D:\\Apachi\\checkApachi.xlsx";
+        FileInputStream fileInputStream=new FileInputStream(path);
+        XSSFWorkbook xssfWorkbook=new XSSFWorkbook(fileInputStream);
+        Sheet sheet=xssfWorkbook.getSheet("Sheet1");
+        Row row=sheet.getRow(0);
+        System.out.println(row.getCell(0));
+    }
+}
\ No newline at end of file
Index: AllSyntaxCodes/src/C27CollectionsFramewors/HW2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/HW2.java b/AllSyntaxCodes/src/C27CollectionsFramewors/HW2.java
new file mode 100644
--- /dev/null	(date 1668289393997)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/HW2.java	(date 1668289393997)
@@ -0,0 +1,37 @@
+package C27CollectionsFramewors;
+import java.util.LinkedList;
+/* Create a Card class that will have interest rate field, card type
+  and a constructor that will initialize the fields.
+  Create 3 objects of different cardS and store them into LinkedList.
+  Using for loop/advanced for loop/ iterator access all methods of the class.
+*/
+public class HW2 {
+    public static void main(String[] args) {
+        LinkedList<Card> cards=new LinkedList<>();
+        cards.add(new Card(10,"Credit card",2000));
+        cards.add(new Card(15,"Credit card",25000));
+        cards.add(new Card(20,"Credit card",100));
+
+        for (Card card:cards
+        ) {
+            card.printBalance();
+        }}}
+class Card{
+    double interestRate;
+    String cardType;
+    double balance;
+    public Card(double interestRate, String cardType, double balance) {
+        this.interestRate = interestRate;
+        this.cardType = cardType;
+        this.balance=balance;
+    }
+    void printBalance(){
+        System.out.println(balance);
+    }
+    @Override
+    public String toString() {
+        return "Card{" +
+                "interestRate=" + interestRate +
+                ", cardType='" + cardType + '\'' +
+                '}';
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/C27CollectionsFramewors/Insurance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/Insurance.java b/AllSyntaxCodes/src/C27CollectionsFramewors/Insurance.java
new file mode 100644
--- /dev/null	(date 1668289396489)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/Insurance.java	(date 1668289396489)
@@ -0,0 +1,67 @@
+package C27CollectionsFramewors;
+public abstract class Insurance {
+    String insuranceName;
+    Insurance(String insuranceName){
+        this.insuranceName=insuranceName;
+    }
+    abstract  void getQuote();
+    abstract void cancelInsurance();
+    @Override
+    public String toString() {
+        return super.toString();
+    }
+}
+    class Car extends  Insurance{
+    String carModel;
+    Car(String insuranceName, String carModel) {
+        super(insuranceName);//calls the parent constructor
+        this.carModel=carModel;
+        }
+        @Override
+        void getQuote() {
+            System.out.println(insuranceName+"charges 3% of the car value for "+carModel);
+        }
+        @Override
+        void cancelInsurance() {
+            System.out.println(insuranceName+" has been cancelled");
+        }
+
+        @Override
+        public String toString() {
+            return "Car{" +
+                    "carModel='" + carModel + '\'' +
+                    ", insuranceName='" + insuranceName + '\'' +
+                    '}';
+        }}
+    class Pet extends Insurance{
+        String petType;
+        Pet(String insurance, String petType){
+            super(insurance);
+            this.petType=petType;
+        }
+        @Override
+        void getQuote() {
+            System.out.println(insuranceName+" charges $1,500 for "+petType);
+        }
+        @Override
+        void cancelInsurance() {
+            System.out.println(insuranceName+" has been canceled for "+petType);
+        }
+    }
+    class Health extends Insurance{
+        Health(String insuranceName) {
+            super(insuranceName+"charges $2,000 for a check up");
+        }
+        @Override
+        void getQuote() {
+        }
+        @Override
+        void cancelInsurance() {
+            System.out.println(insuranceName+"");
+        }
+        @Override
+        public String toString() {
+            return super.toString();
+        }
+    }
+
Index: AllSyntaxCodes/src/C11Object/Car.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C11Object/Car.java b/AllSyntaxCodes/src/C11Object/Car.java
new file mode 100644
--- /dev/null	(date 1667689349082)
+++ b/AllSyntaxCodes/src/C11Object/Car.java	(date 1667689349082)
@@ -0,0 +1,18 @@
+package C11Object;
+
+public class Car {
+    String color="White";
+    String make="Tesla";
+    String model="S3";
+    int year=2018;
+    int Hp=300;
+
+    void moveForward() {
+        System.out.println("Moving forward.....");
+    }
+
+    void movebackwards() {
+        System.out.println("Moving Backwards.....");
+    }
+}
+
Index: AllSyntaxCodes/src/C11Object/Object
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C11Object/Object b/AllSyntaxCodes/src/C11Object/Object
new file mode 100644
--- /dev/null	(date 1667689386157)
+++ b/AllSyntaxCodes/src/C11Object/Object	(date 1667689386157)
@@ -0,0 +1,16 @@
+what is an Object?
+	Everything around us is an object for example keyboard, mouse, glass, etc.
+	Objects can be defined based on how they look and how they behave. Objects in computer programming are also
+	very similar. They have state(which helps us define how that object looks like) and behaviours (what that object
+	does)
+What is class:
+	Class is blueprint/design/template from which we create the objects.
+
+Object oriented programming:
+	Is just a way of writing programs.
+Why we should learn OOP?
+	1)It simplify the development of large programs.
+	2)It will also help us maintain and modify the existing code.
+	3)It helps use write more secure code
+	4)It helps us avoid duplicate code.
+What is the syntax?
\ No newline at end of file
Index: AllSyntaxCodes/src/C12OOPs/StringDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo.java b/AllSyntaxCodes/src/C12OOPs/StringDemo.java
new file mode 100644
--- /dev/null	(date 1667689508863)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo.java	(date 1667689508863)
@@ -0,0 +1,20 @@
+package C12OOPs;
+
+public class StringDemo {
+    public static void main(String[] args) {
+        // Proper way of creating an object
+        String str= new String("Java");
+        // Simpler and shorter way provided by Java Creators to make our life a little easier
+        String name="Asma Alfadhli The Great"; // Only works for String and Wrapper classes
+        /*
+         * Counts the number of characters in a string including the spaces
+         */
+        System.out.println(str.length());
+        System.out.println(name.length());
+        if(name.length()>15) {
+            System.out.println("Name can't be more than 15 characters");
+        }
+
+    }
+
+}
Index: AllSyntaxCodes/src/C12OOPs/StringDemo2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo2.java b/AllSyntaxCodes/src/C12OOPs/StringDemo2.java
new file mode 100644
--- /dev/null	(date 1667689530096)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo2.java	(date 1667689530096)
@@ -0,0 +1,20 @@
+package C12OOPs;
+
+public class StringDemo2 {
+    public static void main(String[] args) {
+        // TODO Auto-generated method stub
+
+        String firstName="Olena";
+        String lastName="Dudka";
+        System.out.println(firstName+lastName); // Mostly this is used
+        System.out.println(firstName.concat(" ").concat(lastName));
+
+        String str=" ";
+        /*
+         * isEmpty() returns true if a String is empty this method will return false even if you have
+         * a space in a String variable however the isBalnk method does not count the spaces
+         */
+        System.out.println(str.isEmpty());
+        System.out.println(str.isBlank());
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/StringDemo3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo3.java b/AllSyntaxCodes/src/C12OOPs/StringDemo3.java
new file mode 100644
--- /dev/null	(date 1667689552365)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo3.java	(date 1667689552365)
@@ -0,0 +1,26 @@
+package C12OOPs;
+
+public class StringDemo3 {
+    public static void main(String[] args) {
+        String str=" i love java ";
+        System.out.println(str);
+        /*
+         * Remove the spaces before and after the
+         * String but not the ones which are present in between
+         */
+        System.out.println(str.trim());
+
+        String str2="Java is Very easy";
+        /*
+         * startsWith=> checks if a String starts with a specific letter or word
+         * endsWith=> checks if a String Ends with a specific letter or word
+         * contains=> checks if a String Contains a specific letter or word
+         */
+        System.out.println(str2.startsWith("J"));
+        System.out.println(str2.endsWith("y"));
+        /*
+         * Method chaining helps us call multiple methods on a single line one method after an other
+         */
+        System.out.println(str2.toLowerCase().contains("very"));
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/StringDemo4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo4.java b/AllSyntaxCodes/src/C12OOPs/StringDemo4.java
new file mode 100644
--- /dev/null	(date 1667689606306)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo4.java	(date 1667689606306)
@@ -0,0 +1,22 @@
+package C12OOPs;
+
+public class StringDemo4 {
+    public static void main(String[] args) {
+
+        String str="Shah";
+        String str2="Shah";
+        String str3=new String("Shah");
+
+        if(str.equals("shah")) {
+            System.out.println("I found it");
+        }
+        /*
+         * equals checks if two Strings are exactly the same with exact same case
+         * equalsIgnoreCase checks if two Strings are exactly the same but does not care about the
+         * case of letters
+         */
+        if(str.equalsIgnoreCase("shah")) {
+            System.out.println("I found it with equalsIgnoreCase");
+        }
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/OOPs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/OOPs b/AllSyntaxCodes/src/C12OOPs/OOPs
new file mode 100644
--- /dev/null	(date 1667689453313)
+++ b/AllSyntaxCodes/src/C12OOPs/OOPs	(date 1667689453313)
@@ -0,0 +1,24 @@
+WHat is Object Oriented Programming(OOP):
+	OOP is just a way of writing code. There are other ways as well like
+	functional programming.
+Why we should learn about OOP?
+	1)It helps us maintain and modify the code easily.
+	2)It helps us write more secure code.
+	3) Simplify the development of large programs.
+	4)It helps us reduce duplicate code in our programs.
+
+Main pillars of OOP
+	1)Classes and objects.
+	2)Inheritance.
+	3)Polymorphism.
+	4)Abstraction.
+	5)Encapsulation.
+Classes and Objects?
+	A class is a template/Blueprint from which we create the objects.
+	An Object in programming is very similar to the objects that we have in real life.
+Object:
+	Objects have states that defines how the object looks like. we define the states with the help
+	of Attributes/properties/fields inside a class.
+	Objects can also have behaviours(Things that object can do). We use methods to define these
+	behaviuors.
+
Index: AllSyntaxCodes/src/C12OOPs/Phone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/Phone.java b/AllSyntaxCodes/src/C12OOPs/Phone.java
new file mode 100644
--- /dev/null	(date 1667689465234)
+++ b/AllSyntaxCodes/src/C12OOPs/Phone.java	(date 1667689465234)
@@ -0,0 +1,26 @@
+package C12OOPs;
+
+public class Phone {
+    /*
+	Create a Class “Phone”. Create 3 Objects of it: iPhone, Pixel,
+	Samsung with specific  attributes and behaviors.
+	*/
+    String make;
+    String model;
+    String color;
+    int year;
+    int storage;
+
+    void makeCall() {
+        System.out.println("Making a call using "+model);
+    }
+
+    void takePictures() {
+        System.out.println("Taking picture with "+model);
+    }
+    void browseInternet() {
+        System.out.println("Browsing the internet using "+ model);
+    }
+
+}
+
Index: AllSyntaxCodes/src/C12OOPs/PhoneTester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/PhoneTester.java b/AllSyntaxCodes/src/C12OOPs/PhoneTester.java
new file mode 100644
--- /dev/null	(date 1667689489727)
+++ b/AllSyntaxCodes/src/C12OOPs/PhoneTester.java	(date 1667689489727)
@@ -0,0 +1,25 @@
+package C12OOPs;
+
+public class PhoneTester {
+    public static void main(String[] args) {
+        /*
+         * if class whos object we are creating
+         * is present inside the same package
+         * we don't need to import it.
+         */
+        Phone iphone=new Phone();
+        iphone.make="Apple";
+        iphone.model="Iphone 14 Pro Max";
+        iphone.year=2022;
+        iphone.storage=128;
+        iphone.makeCall();
+
+
+        //new Phone() => To Create the object
+        Phone samsungPhone=new Phone();
+        samsungPhone.model="S22 Ultra";
+        samsungPhone.make="Samsng";
+        samsungPhone.year=2022;
+        samsungPhone.makeCall();
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/Task1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/Task1.java b/AllSyntaxCodes/src/C12OOPs/Task1.java
new file mode 100644
--- /dev/null	(date 1667689705051)
+++ b/AllSyntaxCodes/src/C12OOPs/Task1.java	(date 1667689705051)
@@ -0,0 +1,42 @@
+package C12OOPs;
+
+import java.util.Scanner;
+
+public class Task1 {
+    public static void main(String[] args) {
+		/*
+		 * store username, password and confirm password from a user and check following requirements:
+Username and Password cannot be  empty, if so→ message=”Username and Password cannot be empty”.
+Password should be minimum 8 characters, if less → message=”Password is too short”.
+Password cannot contain username if so, → message=”Password cannot contain username”.
+Password should match confirmed password, if not  → message=“Passwords do not match”.
+Only after all requirements met → message “Your username and password has been created”
+		 */
+        String userName;
+        String password;
+        String confirmPassword;
+
+        Scanner scanner=new Scanner(System.in);
+        System.out.println("Please Enter the userName");
+        userName=scanner.next();
+        System.out.println("Please Enter the password");
+        password=scanner.next();
+        System.out.println("Please Enter the password Again");
+        confirmPassword=scanner.next();
+
+
+        if(userName.isEmpty() || password.isEmpty()) {
+            System.out.println("Username and Password cannot be empty");
+        }else if(password.length()<8) {
+            System.out.println("Password is too short");
+        }else if(password.contains(userName)) {
+            System.out.println("Password cannot contain username");
+        } else if(!password.equals(confirmPassword)) {
+            System.out.println("Passwords do not match");
+        }else {
+            System.out.println("Your username and password has been created");
+        }
+
+
+    }
+}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/InsuranceHW1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/InsuranceHW1.java b/AllSyntaxCodes/src/C27CollectionsFramewors/InsuranceHW1.java
new file mode 100644
--- /dev/null	(date 1668289395455)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/InsuranceHW1.java	(date 1668289395455)
@@ -0,0 +1,21 @@
+package C27CollectionsFramewors;
+import java.util.ArrayList;
+/* Create a class Insurance that will have an attribute as insuranceName and
+unimplemented behaviour as getQuote and cancelInsurance.
+Create 3 subclasses Car, Pet, Health. Car class has its own attribute as carModel
+and Class Pet has petType attribute. Create 3 objects of the subclasses and
+store them in ArrayList.
+Using for loop/advanced for loop/ iterator access all methods of the class.
+    */
+public class InsuranceHW1 {
+    public static void main(String[] args) {
+        ArrayList<Insurance> insurances=new ArrayList<>();
+        insurances.add(new Car("Adam","Tesla Model"));
+        insurances.add(new Pet("Geico","Dog"));
+        insurances.add(new Health("Progressive"));
+        System.out.println(insurances);
+
+        for (Insurance i:insurances){
+            i.getQuote();
+            i.cancelInsurance();
+        }}}
Index: AllSyntaxCodes/src/C13StringClass/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/Notes b/AllSyntaxCodes/src/C13StringClass/Notes
new file mode 100644
--- /dev/null	(date 1667689980638)
+++ b/AllSyntaxCodes/src/C13StringClass/Notes	(date 1667689980638)
@@ -0,0 +1,11 @@
+String class:
+	String is the most widely used class in java. It helps us store and
+	manipulate Text based data.
+Why we should learn about String class and its methods:
+	String class has a lot of methods that can help us manipulate the text based data.
+	That why we don't need to write any logic we can simple create the object of the String
+	class and can use the method from that class.
+Syntax:
+	String str=new String("I can't sleep if i don't solve Repls");
+	String str2="I can't sleep if i don't solve Repls";
+	str2.length();
\ No newline at end of file
Index: AllSyntaxCodes/src/C12OOPs/StringDemo5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo5.java b/AllSyntaxCodes/src/C12OOPs/StringDemo5.java
new file mode 100644
--- /dev/null	(date 1667689624034)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo5.java	(date 1667689624034)
@@ -0,0 +1,22 @@
+package C12OOPs;
+
+public class StringDemo5 {
+    public static void main(String[] args) {
+        // TODO Auto-generated method stub
+
+        String str="I love java programming";
+        /*
+         * charAt returns us the character at a specific index
+         */
+        System.out.println(str.charAt(3));
+
+        for(int i=0; i<str.length();i++) {
+            //print only the characters not spaces
+            if(!(str.charAt(i)==' ')) {
+                System.out.println(str.charAt(i));
+            }
+
+        }
+
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/StringDemo6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo6.java b/AllSyntaxCodes/src/C12OOPs/StringDemo6.java
new file mode 100644
--- /dev/null	(date 1667689644984)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo6.java	(date 1667689644984)
@@ -0,0 +1,28 @@
+package C12OOPs;
+
+import java.util.Arrays;
+
+public class StringDemo6 {
+    public static void main(String[] args) {
+        String str="I love java programming";
+        /*
+         * toCharArray will convert a String to an array of chars
+         */
+        //Break till 1:25
+        char[] charArray=str.toCharArray();
+
+        System.out.println(Arrays.toString(charArray));
+        System.out.println(charArray[7]);
+
+        int counter=0;
+        for(char c:charArray) {
+
+            if(c=='a') {
+                counter++;
+            }
+
+        }
+        System.out.println("letter a has appread "+counter+" times");
+
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/StringDemo7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo7.java b/AllSyntaxCodes/src/C12OOPs/StringDemo7.java
new file mode 100644
--- /dev/null	(date 1667689664549)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo7.java	(date 1667689664549)
@@ -0,0 +1,20 @@
+package C12OOPs;
+
+public class StringDemo7 {
+    public static void main(String[] args) {
+        String str="I am always consfused i was kidding";
+
+        System.out.println(str.indexOf("a"));
+        System.out.println(str.indexOf("s"));
+        System.out.println(str.indexOf(" "));
+        /*
+         * substring() gives you smaller string from a String we can start the starting
+         * part to this method and it will return us the subString from that index
+         */
+        System.out.println(str.substring(5));
+
+        System.out.println(str.substring(5,11));
+
+
+    }
+}
Index: AllSyntaxCodes/src/C12OOPs/StringDemo8.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C12OOPs/StringDemo8.java b/AllSyntaxCodes/src/C12OOPs/StringDemo8.java
new file mode 100644
--- /dev/null	(date 1667689683518)
+++ b/AllSyntaxCodes/src/C12OOPs/StringDemo8.java	(date 1667689683518)
@@ -0,0 +1,11 @@
+package C12OOPs;
+
+public class StringDemo8 {
+    public static void main(String[] args) {
+        String str="Batch 14 is good 81247818!@##%#^ ASAKBSAKJSBN kajbjakfdnb";
+        System.out.println(str.replace("good", "Excellent"));
+        System.out.println(str.replaceAll("[a-z]", "#"));
+
+    }
+
+}
Index: AllSyntaxCodes/src/C13StringClass/Task1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/Task1.java b/AllSyntaxCodes/src/C13StringClass/Task1.java
new file mode 100644
--- /dev/null	(date 1667690225608)
+++ b/AllSyntaxCodes/src/C13StringClass/Task1.java	(date 1667690225608)
@@ -0,0 +1,20 @@
+package C13StringClass;
+
+public class Task1 {
+
+	/*
+    Create a String and if the String is not empty perform the following:
+    if the String has an odd number of characters and has 3 or more characters,
+    print the character in the middle of the String.
+     */
+
+    public static void main(String[] args) {
+        String str="hello";
+        int length=str.length();
+        if(!str.isEmpty()&&length%2!=0&&length>=3) {
+
+            int middleIndex=length/2;
+            System.out.println(str.charAt(middleIndex));
+        }
+    }
+}
Index: AllSyntaxCodes/src/C13StringClass/Task2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/Task2.java b/AllSyntaxCodes/src/C13StringClass/Task2.java
new file mode 100644
--- /dev/null	(date 1667690236988)
+++ b/AllSyntaxCodes/src/C13StringClass/Task2.java	(date 1667690236988)
@@ -0,0 +1,21 @@
+package C13StringClass;
+
+public class Task2 {
+    public static void main(String[] args) {
+        /*
+         * Create a String and print it in reverse order (Sunday → yadnuS).
+         */
+        String str="Sunday";
+
+        for(int i=str.length()-1;i>=0;i--) {
+            System.out.print(str.charAt(i));
+        }
+        System.out.println();
+        char [] charArr=str.toCharArray();
+
+        for(int i=charArr.length-1;i>=0;i--) {
+            System.out.print(charArr[i]);
+        }
+
+    }
+}
Index: AllSyntaxCodes/src/C13StringClass/Task3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/Task3.java b/AllSyntaxCodes/src/C13StringClass/Task3.java
new file mode 100644
--- /dev/null	(date 1667690255986)
+++ b/AllSyntaxCodes/src/C13StringClass/Task3.java	(date 1667690255986)
@@ -0,0 +1,43 @@
+package C13StringClass;
+
+import java.util.Scanner;
+
+public class Task3 {
+    public static void main(String[] args) {
+        /*
+         * Write a program that reads the first name of mother and father
+         *  if they expecting boy
+         * or girl? Based on the input suggests a name for a baby: Example Output: Mom's
+         * first name? Mary Dad's first name? Daniel Boy or Girl? boy Suggested baby
+         * name: DANRY
+         *
+         * Example Output: Mom's first name? Mary Dad's first name? Daniel Boy or Girl?
+         * girl Suggested baby name: MAIEL
+         */
+        String motherName;
+        String fatherName;
+        String babyType;
+        String firstHalf;
+        String secondHalf;
+
+        Scanner scanner=new Scanner(System.in);
+        System.out.println("Please Enter the name of mother");
+        motherName=scanner.next();
+        System.out.println("Please Enter the name of father");
+        fatherName=scanner.next();
+        System.out.println("Are you expecting a boy or girl boy=true girl=false");
+        babyType=scanner.next();
+
+        if(babyType.equals("boy")) {
+            firstHalf=fatherName.substring(0,fatherName.length()/2);
+            secondHalf=motherName.substring(motherName.length()/2);
+
+        }else {
+            firstHalf=motherName.substring(0,motherName.length()/2);
+            secondHalf=fatherName.substring(fatherName.length()/2);
+
+        }
+        System.out.println(firstHalf+secondHalf);
+
+    }
+}
Index: AllSyntaxCodes/src/C29FileHandling/HW1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/HW1.java b/AllSyntaxCodes/src/C29FileHandling/HW1.java
new file mode 100644
--- /dev/null	(date 1668452244322)
+++ b/AllSyntaxCodes/src/C29FileHandling/HW1.java	(date 1668452244322)
@@ -0,0 +1,21 @@
+package C29FileHandling;
+
+import java.util.LinkedHashMap;
+
+public class HW1 {
+    public static void main(String[] args) {
+        /*Create a map of a building. Store floor number and it is associated company name.
+       (Example: 1= Google, 2=Syntax etc..). Insert 7 entries with duplicate keys and values.
+Check how many entries you have? Update company on a 4th floor
+Remove company on the 7th floor. Print your map*/
+        LinkedHashMap<Integer,String>building=new LinkedHashMap<>();
+        building.put(1,"Google");
+        building.put(2,"Syntax");
+        building.put(3,"Google");
+        building.put(4,"Google");
+        building.put(5,"Google");
+        building.put(6,"Google");
+        building.put(7,"Google");
+
+    }
+}
Index: AllSyntaxCodes/src/C29FileHandling/ReadDataFromExcel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/ReadDataFromExcel.java b/AllSyntaxCodes/src/C29FileHandling/ReadDataFromExcel.java
new file mode 100644
--- /dev/null	(date 1668393615273)
+++ b/AllSyntaxCodes/src/C29FileHandling/ReadDataFromExcel.java	(date 1668393615273)
@@ -0,0 +1,42 @@
+package C29FileHandling;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+//ReadingExcelFileDemo1
+public class ReadDataFromExcel {
+    public static void main(String[] args) throws IOException {
+        //Location of the file where your HardsDrive file is stored
+        String path = "C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx";
+        //Reads the data from HardDrive & brings it to RAM in the raw form 101010101010
+        //in simple words: computer has navigated to that file
+        FileInputStream fis = new FileInputStream(path);
+        //this class converts the raw bytes to Excel format
+        //simple: it  is a special software that helps us to read & write data to an Excel file
+        XSSFWorkbook excel = new XSSFWorkbook(fis);
+        Sheet sheet = excel.getSheet("Sheet1");
+        int noOfRow = sheet.getPhysicalNumberOfRows();
+        //create a map,get Header Row/top row to use as keys for our map
+        Row headerRow = sheet.getRow(0);
+        //list that holds Maps
+        ArrayList<LinkedHashMap<String, String>> excelData = new ArrayList<>();
+        // A loop that goes through all the rows that contain the data
+        for (int rowNo = 1; rowNo < noOfRow; rowNo++) {
+            //the Map that will store data for each row
+            LinkedHashMap<String, String> rowMap = new LinkedHashMap<>();
+            Row dataRow = sheet.getRow(rowNo);//get a row from sheet one by one
+            //find how many cells are there
+            int noOfCells = dataRow.getPhysicalNumberOfCells();
+            // A loop to go through all the cells
+            for (int cellNo = 0; cellNo < noOfCells; cellNo++) {
+                //get keys from header row & values from data row
+                //convert the Cells toString
+                rowMap.put(headerRow.getCell(cellNo).toString(), dataRow.getCell(cellNo).toString());
+            }
+            excelData.add(rowMap);
+        }
+        System.out.print(excelData);
+    }}
Index: AllSyntaxCodes/src/C13StringClass/StringDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/StringDemo.java b/AllSyntaxCodes/src/C13StringClass/StringDemo.java
new file mode 100644
--- /dev/null	(date 1667690001919)
+++ b/AllSyntaxCodes/src/C13StringClass/StringDemo.java	(date 1667690001919)
@@ -0,0 +1,22 @@
+package C13StringClass;
+
+import java.util.Arrays;
+
+public class StringDemo {
+    public static void main(String[] args) {
+        String str="Today is Sunday";
+        String str2=new String("Today is Sunday");
+        String day=str.substring(9);
+        System.out.println(day);
+        System.out.println(str.substring(6,8));
+        char c=str.charAt(4); //calling the method charAt on str object
+
+
+        char[] charArr=str.toCharArray();
+        System.out.println(Arrays.toString(charArr));
+        //System.out.println(charArr);
+        int index=str.indexOf("a");
+        System.out.println(index);
+        System.out.println(str.indexOf("a",6));
+    }
+}
Index: AllSyntaxCodes/src/C13StringClass/StringDemo2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/StringDemo2.java b/AllSyntaxCodes/src/C13StringClass/StringDemo2.java
new file mode 100644
--- /dev/null	(date 1667690135693)
+++ b/AllSyntaxCodes/src/C13StringClass/StringDemo2.java	(date 1667690135693)
@@ -0,0 +1,12 @@
+package C13StringClass;
+
+import org.apache.commons.codec.binary.StringUtils;
+
+public class StringDemo2 {
+    public static void main(String[] args) {
+        String str="Thor love and thunder";
+        StringUtils strUtils=new StringUtils();
+        //strUtils.printAllIndexes(str, 'e');
+    }
+
+}
Index: AllSyntaxCodes/src/C13StringClass/StringDemo3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/StringDemo3.java b/AllSyntaxCodes/src/C13StringClass/StringDemo3.java
new file mode 100644
--- /dev/null	(date 1667690170216)
+++ b/AllSyntaxCodes/src/C13StringClass/StringDemo3.java	(date 1667690170216)
@@ -0,0 +1,37 @@
+package C13StringClass;
+
+public class StringDemo3 {
+    public static void main(String[] args) {
+        String str="szfksKAFBDAJKF11493!@#%$%$*$";
+        /*
+         * Replace all numbers from 0 to 9 with @
+         */
+        System.out.println(str.replaceAll("[0-9]","@"));
+        /*
+         * Remove all numbers from 0 to 9
+         */
+        System.out.println(str.replaceAll("[0-9]",""));
+        /*
+         * Remove all letters  from a to z refer the asci table for range info
+         */
+        System.out.println(str.replaceAll("[a-z]",""));
+        /*
+         * Remove all letters  from A to Z refer the asci table for range info
+         */
+        System.out.println(str.replaceAll("[A-Z]",""));
+        /*
+         * Remove all letters  other than A to Z refer the asci table for range info
+         */
+        System.out.println(str.replaceAll("[^A-Z]",""));
+        /*
+         * Remove all letters  other than A to Z and a to z refer
+         *  the asci table for range info
+         */
+        System.out.println(str.replaceAll("[^a-zA-Z]",""));
+        /*
+         * Remove all letters  other than A to Z and a to z and 0 to 9
+         *  refer the asci table for range info
+         */
+        System.out.println(str.replaceAll("[^a-zA-Z0-9]",""));
+    }
+}
Index: AllSyntaxCodes/src/C13StringClass/StringDemo4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C13StringClass/StringDemo4.java b/AllSyntaxCodes/src/C13StringClass/StringDemo4.java
new file mode 100644
--- /dev/null	(date 1667690193761)
+++ b/AllSyntaxCodes/src/C13StringClass/StringDemo4.java	(date 1667690193761)
@@ -0,0 +1,17 @@
+package C13StringClass;
+
+import java.util.Arrays;
+
+public class StringDemo4 {
+    public static void main(String[] args) {
+
+        String str="Batch 14 is really good";
+        String [] arr=str.split(" ");
+        System.out.println(Arrays.toString(arr));
+        System.out.println(arr[4]);
+
+        String str2="Today is Sunday. Sunday is good. Java is also good";
+        String[] arr2=str2.split("[.]");
+        System.out.println(Arrays.toString(arr2));
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/MethodsDemo3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/MethodsDemo3.java b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo3.java
new file mode 100644
--- /dev/null	(date 1667690422402)
+++ b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo3.java	(date 1667690422402)
@@ -0,0 +1,27 @@
+package C14StringMethods;
+
+import java.util.Scanner;
+
+public class MethodsDemo3 {
+    boolean isEven(int number){
+        if(number%2==0){
+            return true;
+        }  else {
+            return false;
+        }
+    }
+
+    public static void main(String[] args) {
+
+        MethodsDemo3 md=new MethodsDemo3();
+
+        if(md.isEven(4)){
+            System.out.println("Number is Even");
+        }else {
+            System.out.println("Number is odd");
+        }
+
+        Scanner scanner=new Scanner(System.in);
+        int number=scanner.nextInt();
+    }
+}
Index: AllSyntaxCodes/src/Utils/ExcelReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Utils/ExcelReader.java b/AllSyntaxCodes/src/Utils/ExcelReader.java
new file mode 100644
--- /dev/null	(date 1668394972411)
+++ b/AllSyntaxCodes/src/Utils/ExcelReader.java	(date 1668394972411)
@@ -0,0 +1,46 @@
+package Utils;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+/*
+reason for another package is: everytime to read the data from excel, call the data from this class
+using ExcelReader.read>provide the path to this method & will get the data in the form of map
+will call this class in another method in Class29 package>public class ReadExcelFile2
+*/
+public class ExcelReader {
+    public static ArrayList<LinkedHashMap<String, String>> read(String path) throws IOException {
+        //Reads the data from HardDrive & brings it to RAM in the raw form 101010101010
+        //in simple words: computer has navigated to that file
+        FileInputStream fis = new FileInputStream(path);
+        //this class converts the raw bytes to Excel format
+        //simple: it  is a special software that helps us to read & write data to an Excel file
+        XSSFWorkbook excel = new XSSFWorkbook(fis);
+        Sheet sheet = excel.getSheet("Sheet1");
+        int noOfRow = sheet.getPhysicalNumberOfRows();
+        //create a map,get Header Row/top row to use as keys for our map
+        Row headerRow = sheet.getRow(0);
+        //list that holds Maps
+        ArrayList<LinkedHashMap<String, String>> excelData = new ArrayList<>();
+        // A loop that goes through all the rows that contain the data
+        for (int rowNo = 1; rowNo < noOfRow; rowNo++) {
+            //the Map that will store data for each row
+            LinkedHashMap<String, String> rowMap = new LinkedHashMap<>();
+            Row dataRow = sheet.getRow(rowNo);//get a row from sheet one by one
+            //find how many cells are there
+            int noOfCells = dataRow.getPhysicalNumberOfCells();
+            // A loop to go through all the cells
+            for (int cellNo = 0; cellNo < noOfCells; cellNo++) {
+                //get keys from header row & values from data row
+                //convert the Cells toString
+                rowMap.put(headerRow.getCell(cellNo).toString(), dataRow.getCell(cellNo).toString());
+            }
+            excelData.add(rowMap);
+        }
+        return excelData;
+    }}
+
+
Index: AllSyntaxCodes/src/C14StringMethods/MethodsDemo4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/MethodsDemo4.java b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo4.java
new file mode 100644
--- /dev/null	(date 1667690466465)
+++ b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo4.java	(date 1667690466465)
@@ -0,0 +1,27 @@
+package C14StringMethods;
+
+public class MethodsDemo4 {
+    boolean mystery(){
+        return true;
+    }
+
+    String mystery2(int num){
+        return "Java";
+    }
+    String method(String word){
+        //return "Java";
+        if(word.equals("Java")){
+            return "python";
+        }else
+        {
+            return "Java";
+        }
+
+    }
+    public static void main(String[] args) {
+        MethodsDemo4 methodsDemo4=new MethodsDemo4();
+        System.out.println(methodsDemo4.mystery());
+        System.out.println(methodsDemo4.mystery2(10));
+        System.out.println(methodsDemo4.method("python"));
+    }
+}
Index: AllSyntaxCodes/src/C29FileHandling/CallExcelReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/CallExcelReader.java b/AllSyntaxCodes/src/C29FileHandling/CallExcelReader.java
new file mode 100644
--- /dev/null	(date 1668449735690)
+++ b/AllSyntaxCodes/src/C29FileHandling/CallExcelReader.java	(date 1668449735690)
@@ -0,0 +1,11 @@
+package C29FileHandling;
+import Utils.ExcelReader;
+import java.io.IOException;
+/*read data from Utils package
+This is a method to read the code from another class
+*/
+public class CallExcelReader {
+    public static void main(String[] args) throws IOException {
+        var excelData=ExcelReader.read("C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx");
+        System.out.println(excelData);
+    }}
Index: AllSyntaxCodes/src/C14StringMethods/StringBufferVsBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/StringBufferVsBuilder.java b/AllSyntaxCodes/src/C14StringMethods/StringBufferVsBuilder.java
new file mode 100644
--- /dev/null	(date 1667690492483)
+++ b/AllSyntaxCodes/src/C14StringMethods/StringBufferVsBuilder.java	(date 1667690492483)
@@ -0,0 +1,25 @@
+package C14StringMethods;
+
+public class StringBufferVsBuilder {
+    public static void main(String[] args) {
+        //Mostly used class newer better faster
+        StringBuilder stringBuilder=new StringBuilder("Today is java class");
+        // older one slow and not used mostly
+        StringBuffer stringBuffer=new StringBuffer("Today is java class");
+
+        String str="Java is very easy";
+    /*
+    If we want to convert the String to a StringBuilder we can use the below
+    syntax
+     */
+        StringBuilder stringBuilder1=new StringBuilder(str);
+        System.out.println("stringBuilder1 = " + stringBuilder1);
+        /*
+        IF we want to convert from a StringBuilder to A String we can use
+        the below syntax
+         */
+        String newStr=stringBuilder1.toString();
+
+
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/StringRecap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/StringRecap.java b/AllSyntaxCodes/src/C14StringMethods/StringRecap.java
new file mode 100644
--- /dev/null	(date 1667690512839)
+++ b/AllSyntaxCodes/src/C14StringMethods/StringRecap.java	(date 1667690512839)
@@ -0,0 +1,19 @@
+package C14StringMethods;
+
+import java.util.Arrays;
+
+public class StringRecap {
+    public static void main(String[] args) {
+        String str="kjfksfAJDSKJD274362374!@##$";
+        str= str.replaceAll("[^a-zA-Z]","");
+        System.out.println("str = " + str);
+
+        String sentence="Batch 14 is Great. Batch 14 is excellent? Batch 14 is just amazing";
+        String[] split = sentence.split("[.?!]");
+        System.out.println("split = " + Arrays.toString(split));
+
+        String str2=" Batch 14 is Great.Batch 14 is Great";
+        String replace = str2.replaceFirst("Great", "Good");
+        System.out.println(replace);
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/Notes b/AllSyntaxCodes/src/C14StringMethods/Notes
new file mode 100644
--- /dev/null	(date 1667690319010)
+++ b/AllSyntaxCodes/src/C14StringMethods/Notes	(date 1667690319010)
@@ -0,0 +1,6 @@
+String Methods:
+    String is the most widely used class in java. We can
+    use it to store text based data.
+Methods in Java:
+    Method in java is simple a block of code or some java
+    statements put together in a block.
Index: AllSyntaxCodes/src/C29FileHandling/CallMethodsWithPath.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/CallMethodsWithPath.java b/AllSyntaxCodes/src/C29FileHandling/CallMethodsWithPath.java
new file mode 100644
--- /dev/null	(date 1668449888281)
+++ b/AllSyntaxCodes/src/C29FileHandling/CallMethodsWithPath.java	(date 1668449888281)
@@ -0,0 +1,16 @@
+package C29FileHandling;
+import Utils.ConfigReader;
+import Utils.ExcelReader;
+import java.io.IOException;
+//FilesDemo
+public class CallMethodsWithPath {
+    public static void main(String[] args) throws IOException {
+        //if I need to read properties from config.properties, I only need the path & just call that method
+    String path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\config.properties";
+        var properties=ConfigReader.read(path);
+        System.out.println(properties.getProperty("browser"));
+//if I need to read properties of Excel, just grab the path & call that method
+        String excelPath="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx";
+        var excelData=ExcelReader.read(excelPath);
+        System.out.println(excelData);
+    }}
Index: AllSyntaxCodes/src/C14StringMethods/Math.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/Math.java b/AllSyntaxCodes/src/C14StringMethods/Math.java
new file mode 100644
--- /dev/null	(date 1667690344644)
+++ b/AllSyntaxCodes/src/C14StringMethods/Math.java	(date 1667690344644)
@@ -0,0 +1,29 @@
+package C14StringMethods;
+
+public class Math {
+    void add(int num1,int num2){
+        System.out.println(num1+num2);
+    }
+    void printFiboSeries(int size){
+
+        int previous=0;
+        int currentNumber=1;
+        int nextNum=0;
+        System.out.println(previous);
+        System.out.println(currentNumber);
+        for(int i=0; i<size;i++) {
+            nextNum=previous+currentNumber;
+            System.out.println(nextNum);
+            previous=currentNumber;
+            currentNumber=nextNum;
+        }
+    }
+
+    public static void main(String[] args) {
+        Math obj=new Math(); // Creating an object of the Math class
+/*        obj.printFiboSeries(5); // this is how we execute the logic present inside the methods
+        System.out.println("***********");
+        obj.printFiboSeries(10);*/
+        obj.add(10,20);
+    }
+}
Index: AllSyntaxCodes/src/Utils/ConfigReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Utils/ConfigReader.java b/AllSyntaxCodes/src/Utils/ConfigReader.java
new file mode 100644
--- /dev/null	(date 1668449069543)
+++ b/AllSyntaxCodes/src/Utils/ConfigReader.java	(date 1668449069543)
@@ -0,0 +1,15 @@
+package Utils;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Properties;
+/*need this method everytime I need to read properties> the Key Value pairs from the properties
+*/
+public class ConfigReader {
+    public static Properties read(String path) throws IOException {
+
+        var fileInputStream=new FileInputStream(path);//Navigate to the file
+        var properties=new Properties();//property class>special software that helps to read data from that file
+        properties.load(fileInputStream);//loads all the data from the file inside(Memory) java code()
+        return properties;
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/MethodsDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/MethodsDemo.java b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo.java
new file mode 100644
--- /dev/null	(date 1667690380744)
+++ b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo.java	(date 1667690380744)
@@ -0,0 +1,24 @@
+package C14StringMethods;
+
+public class MethodsDemo {
+    /*
+   A Method that does not take any parameters and prints some lines on the console
+    */
+    void printHello(){
+        System.out.println("Hello World");
+        System.out.println("Hello Java");
+        System.out.println("Hello Aladin");
+    }
+    /*
+    A Method that takes a single parameter of type String and prints it
+     */
+    void printWord(String word){
+        System.out.println(word);
+    }
+    public static void main(String[] args) {
+        MethodsDemo obj= new MethodsDemo();
+        obj.printHello();
+        obj.printWord("Taivion Don't worry its Java");
+        obj.printWord("No Athira it does not make sense i am confused can you please repeat it");
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/MethodsDemo2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/MethodsDemo2.java b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo2.java
new file mode 100644
--- /dev/null	(date 1667690398512)
+++ b/AllSyntaxCodes/src/C14StringMethods/MethodsDemo2.java	(date 1667690398512)
@@ -0,0 +1,25 @@
+package C14StringMethods;
+
+public class MethodsDemo2 {
+    void printManyTimes(int times){
+        for (int i = 0; i < times; i++) {
+            System.out.println("Hello Java");
+        }
+    }
+
+    /*
+    in Parameters sequence and data type matters
+     */
+    void printCustomWordManyTimes(String word,int times){
+
+        for (int i = 0; i < times; i++) {
+            System.out.println(word);
+        }
+    }
+
+    public static void main(String[] args) {
+        MethodsDemo2 md=new MethodsDemo2();
+        // md.printManyTimes(5);
+        md.printCustomWordManyTimes("Syntax Easy",2);
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/HW5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/HW5.java b/AllSyntaxCodes/src/C14StringMethods/HW5.java
new file mode 100644
--- /dev/null	(date 1667690605916)
+++ b/AllSyntaxCodes/src/C14StringMethods/HW5.java	(date 1667690605916)
@@ -0,0 +1,15 @@
+package C14StringMethods;
+
+public class HW5 {
+    public static void main(String[] args) {
+        String str="abc";
+        StringBuilder stringBuilder=new StringBuilder(str);
+        stringBuilder.reverse();
+        if(stringBuilder.toString().equals(str)){
+            System.out.println("The String is Palindrome");
+        }else {
+            System.out.println("The String not Palindrome");
+        }
+
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/HW6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/HW6.java b/AllSyntaxCodes/src/C14StringMethods/HW6.java
new file mode 100644
--- /dev/null	(date 1667690622242)
+++ b/AllSyntaxCodes/src/C14StringMethods/HW6.java	(date 1667690622242)
@@ -0,0 +1,16 @@
+package C14StringMethods;
+
+public class HW6 {
+    public static void main(String[] args) {
+/*
+How would you swap 2 strings without a temporary variable?
+ */
+        String str1="python";
+        String str2="Java";
+        str1=str1+str2;
+        str2=str1.replace(str2,"");
+        str1=str1.replace(str2,"");
+        System.out.println(str1);
+        System.out.println(str2);
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/Notes b/AllSyntaxCodes/src/C15Methods/Notes
new file mode 100644
--- /dev/null	(date 1667690688674)
+++ b/AllSyntaxCodes/src/C15Methods/Notes	(date 1667690688674)
@@ -0,0 +1,68 @@
+Why we should exclude packages and class from compiling:
+    In intellij if we have a syntax error in any of the file in a project we can't run
+    another file unless and until we fix that error. some time we want to execute
+    code in some files without fixing those issue this is where we should exc
+How to Exclude packages:
+    Double-click the shift button twice quickly and type excludes and hit enter
+    from the pop-up window click on the plus button and select the packages that you
+    want to exclude.
+How Java code is compiled/executed on a computer:
+    We write the code in files with extension .java
+    once we hit the run button a software program called compiler checks this code for errors
+    and convert it to byte code. usually stored in a folder called bin/out.
+    JVM another software further converts this code to binary code and this binary code
+    is what is excluded on your computers.
+Methods in Java:
+    Method is a block of code. or some java statements grouped together.
+Why we should learn about the methods:
+    Methods help us reduce the amount of code that we have to write. For example if a piece of code
+    is being repeated. We can create a method for it and simple call that method
+    whenever we need that logic again.
+Syntax of creating a method:
+    we can create methods only inside a class.
+    [datatype] [method name] [(datatype variableName)][method body]
+    [datatype] can be void boolean String int etc.
+    [method name] They are like variable names.
+    [(datatype variableName)] used to pass data while callinga  method.
+How do we decide that we should use void or a method with a return keyword1:
+    If we are building a method that will be used by others or in other parts of your code which
+    require some data from your method like an if condition we should not create methods with void
+    type
+
+    String str="hello";
+    	int length=str.length();
+    	if(!str.isEmpty()&&length%2!=0&&length>=3) {
+
+    		int middleIndex=length/2;
+    		System.out.println(str.charAt(middleIndex));
+    	}
+
+==============================================================
+Types of variables with respect to their scope:
+    There are three types of variables w.r.t their scope.
+    1) local variables.
+    2) instance variables.
+    3) static variables.
+Local variables:
+    A variables that is created inside a method loop switch case or any block of code is called local variable.
+When we should use local variables:
+    Local variables occupy the computers memory for the shortest amount of time. We should always go with
+    local variables if it is possible, but they are limited in scope we can't use local variables outside the
+    block in which they are declared.
+    for(int i=0; i<5;i++){
+    System.out.println(i);
+    }
+
+Instance variables:
+    Which are declared outside a block of code but inside a class are called instance variables.
+when we should use instance variables:
+    when we are planning to create multiple objects of a class, or we want to share something in multiple
+    methods we should go with instance variables. They occupy the memory for longer as compared to
+    local variables.
+static variables:
+    if an instance variable has a keyword static is called a static variable.
+When we should use static variables.
+    When we need to share something across the objects. we use static variables.
+    but it occupies the memory for longest amount of time.
+
+
Index: AllSyntaxCodes/src/C14StringMethods/HW1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/HW1.java b/AllSyntaxCodes/src/C14StringMethods/HW1.java
new file mode 100644
--- /dev/null	(date 1667690535475)
+++ b/AllSyntaxCodes/src/C14StringMethods/HW1.java	(date 1667690535475)
@@ -0,0 +1,13 @@
+package C14StringMethods;
+
+public class HW1 {
+    public static void main(String[] args) {
+        /*Create a String that will hold a sentence.
+        Write a program to get a new String
+        without any spaces*/
+
+        String str="we love Java";
+        str=str.replaceAll(" ","");
+        System.out.println("str = " + str);
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/HW2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/HW2.java b/AllSyntaxCodes/src/C14StringMethods/HW2.java
new file mode 100644
--- /dev/null	(date 1667690549211)
+++ b/AllSyntaxCodes/src/C14StringMethods/HW2.java	(date 1667690549211)
@@ -0,0 +1,14 @@
+package C14StringMethods;
+
+public class HW2 {
+    /*
+       Create a String that should be combination of letters, numbers and special characters.
+        Find out how many Alphanumeric(abd AZ 284) characters are there in the String.
+        */
+    public static void main(String[] args) {
+        String str="dsfkjAJSKA1263#%6";
+        str=str.replaceAll("[^a-zA-Z0-9]","");
+        System.out.println("str = " + str);
+        System.out.println(str.length());
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/HW3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/HW3.java b/AllSyntaxCodes/src/C14StringMethods/HW3.java
new file mode 100644
--- /dev/null	(date 1667690568948)
+++ b/AllSyntaxCodes/src/C14StringMethods/HW3.java	(date 1667690568948)
@@ -0,0 +1,13 @@
+package C14StringMethods;
+
+public class HW3 {
+    public static void main(String[] args) {
+        /*
+        You have a String a=”Is it saturday? Is it raining? Do we have a Java Class today?”
+       How would you find out how many sentences are in that String?
+         */
+        String a = "Is it saturday? Is it raining? Do we have a Java Class today?";
+        String[] sentences = a.split("[?]");
+        System.out.println(sentences.length);
+    }
+}
Index: AllSyntaxCodes/src/C14StringMethods/HW4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C14StringMethods/HW4.java b/AllSyntaxCodes/src/C14StringMethods/HW4.java
new file mode 100644
--- /dev/null	(date 1667690586116)
+++ b/AllSyntaxCodes/src/C14StringMethods/HW4.java	(date 1667690586116)
@@ -0,0 +1,23 @@
+package C14StringMethods;
+
+public class HW4 {
+    public static void main(String[] args) {
+        /*
+        How would you reverse a String word by word? for example
+        input=>This is sentence i want to reverse
+        output=>sihT si ecnetnes i tnaw ot esrever
+         */
+        String str="This is sentence i want to reverse";
+        String[] arr=str.split(" ");
+        StringBuilder st=new StringBuilder();
+        for (int i = 0; i < arr.length; i++) {
+            String word=arr[i];
+            StringBuilder stringBuilder=new StringBuilder(word);
+            stringBuilder.reverse();
+            arr[i]=stringBuilder.toString();
+            st.append(arr[i]).append(" ");
+        }
+        System.out.println(st);
+
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HW1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW1.java b/AllSyntaxCodes/src/C15Methods/HW1.java
new file mode 100644
--- /dev/null	(date 1667690867416)
+++ b/AllSyntaxCodes/src/C15Methods/HW1.java	(date 1667690867416)
@@ -0,0 +1,32 @@
+package C15Methods;
+
+import java.util.Scanner;
+
+public class HW1 {
+    /*
+   Create a method that will take 2
+parameters as a numbers and prints which
+number is larger
+    */
+    void printLarger (int num1,int num2){
+        if(num1>num2){
+            System.out.println("Number 1 is larger "+num1);
+        }else if(num2>num1){
+            System.out.println("Number 2 is larger "+num2);
+        }else {
+            System.out.println("Numbers are equal");
+        }
+    }
+
+    public static void main(String[] args) {
+        Scanner scanner=new Scanner(System.in);
+        System.out.println("Please Enter the first Number");
+        int number1 = scanner.nextInt();
+        System.out.println("Please Enter the second Number");
+        int number2 = scanner.nextInt();
+        HW1 task1=new HW1();
+        task1.printLarger(number1,number2);
+        task1.printLarger(50,12);
+
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HW2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW2.java b/AllSyntaxCodes/src/C15Methods/HW2.java
new file mode 100644
--- /dev/null	(date 1667690826205)
+++ b/AllSyntaxCodes/src/C15Methods/HW2.java	(date 1667690826205)
@@ -0,0 +1,22 @@
+package C15Methods;
+
+public class HW2 {
+     /*
+    /Create a method that will take a number and prints whether the number is even or odd./
+     */
+
+    void printEvenOdd(int number){
+        if(number%2==0){
+            System.out.println(number+" is Even");
+        }else {
+            System.out.println(number+" is Odd");
+        }
+    }
+
+    public static void main(String[] args) {
+        HW2 task=new HW2();
+        task.printEvenOdd(45);
+        task.printEvenOdd(50);
+
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HW3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW3.java b/AllSyntaxCodes/src/C15Methods/HW3.java
new file mode 100644
--- /dev/null	(date 1667690867295)
+++ b/AllSyntaxCodes/src/C15Methods/HW3.java	(date 1667690867295)
@@ -0,0 +1,23 @@
+package C15Methods;
+
+public class HW3 {
+    /*Create a method that will print whether given String is palindrome or not.*/
+
+    void printPalindrome(String str){
+        str=str.toLowerCase();
+        StringBuilder stringBuilder=new StringBuilder(str);
+        stringBuilder.reverse();
+        if(stringBuilder.toString().equals(str)){
+            System.out.println("The String is Palindrome");
+        }else {
+            System.out.println("The String not Palindrome");
+        }
+    }
+
+    // Break till 11:50
+    public static void main(String[] args) {
+        HW3 task=new HW3();
+        task.printPalindrome("Dad");
+        task.printPalindrome("Thor");
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HW4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW4.java b/AllSyntaxCodes/src/C15Methods/HW4.java
new file mode 100644
--- /dev/null	(date 1667690892039)
+++ b/AllSyntaxCodes/src/C15Methods/HW4.java	(date 1667690892039)
@@ -0,0 +1,40 @@
+package C15Methods;
+
+public class HW4 {
+    /*
+   Create a method that will say Hello in
+different language based on the country
+that will passed when method is executed
+    */
+    void sayHello(String country){
+
+        switch (country) {
+            case "USA":
+                System.out.println("Hello");
+                break;
+            case "India":
+                System.out.println("Namaste");
+                break;
+            case "Turkiye":
+                System.out.println("Merhaba");
+                break;
+            case "Pakistan":
+                System.out.println("AOA");
+                break;
+            case "Japan":
+                System.out.println("Nihau");
+                break;
+            default:
+                System.out.println("Country not supported");
+        }
+
+
+    }
+
+    public static void main(String[] args) {
+        HW4 task4=new HW4();
+        task4.sayHello("USA");
+        task4.sayHello("Turkiye");
+    }
+
+}
Index: AllSyntaxCodes/src/C15Methods/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/Dog.java b/AllSyntaxCodes/src/C15Methods/Dog.java
new file mode 100644
--- /dev/null	(date 1667690705626)
+++ b/AllSyntaxCodes/src/C15Methods/Dog.java	(date 1667690705626)
@@ -0,0 +1,32 @@
+package C15Methods;
+
+public class Dog {
+    String name; //instance
+    static int noOfLegs=4;
+    String color;
+
+    void bark(){
+        int i=10; //local
+        for (int j = 0; j < i; j++) {
+            //int j is also a local variable
+            System.out.println("Barking....");
+        }
+    }
+
+    void printInfo(){
+        System.out.println("name "+name+" color "+color);
+    }
+    void printName(){
+        System.out.println("name "+name);
+    }
+
+    // Break till 1:50
+    public static void main(String[] args) {
+        Dog dog1=new Dog();
+        dog1.name="Tomy";
+        dog1.bark();
+
+        Dog dog2=new Dog();
+        dog2.name="Lucky";
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HondaBike.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HondaBike.java b/AllSyntaxCodes/src/C15Methods/HondaBike.java
new file mode 100644
--- /dev/null	(date 1667690724972)
+++ b/AllSyntaxCodes/src/C15Methods/HondaBike.java	(date 1667690724972)
@@ -0,0 +1,21 @@
+package C15Methods;
+
+public class HondaBike {
+    static int topSpeed=200;
+    static int noOfTyres=2;
+    String model;
+    int year;
+
+    void printTotalDistance(int noOfGallons,int avg ){
+        double distance=noOfGallons/10;
+        System.out.println("Your bike can go max "+distance+
+                " with this much "+noOfGallons);
+    }
+
+    public static void main(String[] args) {
+        System.out.println(HondaBike.noOfTyres);
+        HondaBike ybr=new HondaBike();
+        ybr.model="ybr100";
+        ybr.printTotalDistance(10,20);
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/LocalVarDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/LocalVarDemo.java b/AllSyntaxCodes/src/C15Methods/LocalVarDemo.java
new file mode 100644
--- /dev/null	(date 1667690752069)
+++ b/AllSyntaxCodes/src/C15Methods/LocalVarDemo.java	(date 1667690752069)
@@ -0,0 +1,34 @@
+package C15Methods;
+
+public class LocalVarDemo {
+    static String name="Confused";
+    public static void main(String[] args) {
+        int number=0;
+
+        System.out.println();
+        /*
+        local variables are defined inside blocks of code
+        and can only be used inside those blocks
+         */
+        //System.out.println(name);
+
+        for (int i = 0; i < 10; i++) {
+            System.out.println(i);
+            //System.out.println(HondaBike.noOfTyres);
+
+        }
+        {
+            int i=0;
+        }
+
+        // System.out.println(i);
+
+    }
+
+    void printNumber(){
+        int number=4;
+        System.out.println(name);
+        // System.out.println(number);
+        String name="Allan";
+    }
+}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/DogArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/DogArray.java b/AllSyntaxCodes/src/C27CollectionsFramewors/DogArray.java
new file mode 100644
--- /dev/null	(date 1668289396293)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/DogArray.java	(date 1668289396293)
@@ -0,0 +1,16 @@
+package C27CollectionsFramewors;
+
+import java.util.ArrayList;
+
+public class DogArray {
+    public static void main(String[] args) {
+
+        ArrayList<Dog> dogs=new ArrayList<>();
+        dogs.add(new Dog("Tommy","Black","German Shepard"));
+        dogs.add(new Dog("Jonny","White","Bulldog"));
+        dogs.add(new Dog("Kimi","Brown","Chihuahua"));
+
+        Dog dog=new Dog("Tommy","Black","German Shepard");
+        //System.out.println(dog.toString());//will print one dog
+        System.out.println(dogs);//prints all the dogs
+    }}
Index: AllSyntaxCodes/src/C16JavaVariables/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/Notes b/AllSyntaxCodes/src/C16JavaVariables/Notes
new file mode 100644
--- /dev/null	(date 1667691077940)
+++ b/AllSyntaxCodes/src/C16JavaVariables/Notes	(date 1667691077940)
@@ -0,0 +1,59 @@
+Types of variables in java with respect to their scope:
+    There are three types of variables in java with respect to their
+    scope. Local instance and static.
+Local variables:
+    If a variable is declared inside a block of code like method, loop,
+    if-condition they are called local variables.
+Up-Side of a local variable:
+    The upside is they exist for a very short amount of time in the memory.
+    which means other programs on our computer can use that memory.
+Down-Side of local variables:
+    Their scope is very limited. only inside that block in which they are created.
+    we can't access them outside that block.
+When to use:
+    We should always try to use local variable over instance variables whenever it
+    is possible.
+Instance variables:
+    The variables which are declared inside a class but outside of block of code are called
+    instance variables.
+Up-side:
+    We can use these variables inside any block of code that is inside that class.
+
+DownSide:
+    They occupy the memory for longer than a local variable.
+When we should use instance variables:
+    1) When we need to share a value between two or more methods then we should go with the instance variable.
+    2) When we are planing to create multiple objects of a class and it is possible that all the objects can have
+    a different value for that variable.
+static variable:
+    An instance variable with static keyword is called a static variable.
+Up-side:
+    We can share data across the objects with the help of static variable.
+Down-side:
+    They occupy the memory for the longest period.
+When to use:
+    When we want to share something across all the methods.
+==================================================================
+Access Modifiers:
+    Access modifiers are keywords which control the access of fields or methods or the class itself.
+    There are four access levels and three access modifier keywords. These are only applicable to
+    instance or static variable not to local variables.
+private:
+    Private is the most restricted one. if we use private keyword with any variable or method.
+    we can only access it within the same class.
+When we should use private access modifier.
+    We should always try to create variables as private.
+    The data that we store inside the private variables is secured.
+default access modifier:
+    Default is not a keyword. whenever we don't assign any access modifier keyword like private or
+    public Java assigns default access level to those variables or methods.
+    The variables or methods which have default access level can be accessed wihin the same class or in any other
+    class that is present inside the same package.
+Public access modifier:
+    Public access most unrestricted access modifier. Once used with an variable or method we can access that variable
+    or method anywhere in our project.
+Note:
+
+We can have only one public class in a file and the name of that class should match
+the name of the file.
+
Index: AllSyntaxCodes/src/C16JavaVariables/BankAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/BankAccount.java b/AllSyntaxCodes/src/C16JavaVariables/BankAccount.java
new file mode 100644
--- /dev/null	(date 1667691104380)
+++ b/AllSyntaxCodes/src/C16JavaVariables/BankAccount.java	(date 1667691104380)
@@ -0,0 +1,19 @@
+package C16JavaVariables;
+
+public class BankAccount {
+    private String username;
+    private String password;
+    int accountNumber;
+    public String bankName;
+
+    public void printBankName(){
+        System.out.println(bankName);
+    }
+
+    private  void printUserName(){
+        System.out.println(username);
+    }
+    void printAccountNumber(){
+        System.out.println(accountNumber);
+    }
+}
Index: AllSyntaxCodes/src/C16JavaVariables/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/Person.java b/AllSyntaxCodes/src/C16JavaVariables/Person.java
new file mode 100644
--- /dev/null	(date 1667691137739)
+++ b/AllSyntaxCodes/src/C16JavaVariables/Person.java	(date 1667691137739)
@@ -0,0 +1,19 @@
+package C16JavaVariables;
+
+public class Person {
+    private String password="pass123";
+    double salary=1000;
+
+    public String name="Roman";
+
+    public static void main(String[] args) {
+        Person person1=new Person();
+        System.out.println(person1.password);
+        System.out.println(person1.salary);
+        Bank bank=new Bank();
+    }
+}
+class Bank{
+}
+
+
Index: AllSyntaxCodes/src/C16JavaVariables/PersonTester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/PersonTester.java b/AllSyntaxCodes/src/C16JavaVariables/PersonTester.java
new file mode 100644
--- /dev/null	(date 1667691160093)
+++ b/AllSyntaxCodes/src/C16JavaVariables/PersonTester.java	(date 1667691160093)
@@ -0,0 +1,10 @@
+package C16JavaVariables;
+
+public class PersonTester {
+    public static void main(String[] args) {
+        Person person=new Person();
+        //  System.out.println(person.password);
+        System.out.println(person.salary);
+    }
+}
+
Index: AllSyntaxCodes/src/C15Methods/HW5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW5.java b/AllSyntaxCodes/src/C15Methods/HW5.java
new file mode 100644
--- /dev/null	(date 1667691032638)
+++ b/AllSyntaxCodes/src/C15Methods/HW5.java	(date 1667691032638)
@@ -0,0 +1,22 @@
+package C15Methods;
+
+import GroupProject1.Task5;
+
+public class HW5 {
+      /*   Create a method createEmail(). Based on values of users first name,
+    lastName and email   type, your method should return complete email Address.
+    Example: createEmail(John,   Snow,gmail)-->johnsnow@gmail.com*/
+
+    String createEmail(String firstName,String lastName,String emailType){
+
+        return (firstName+lastName+"@"+emailType+".com").toLowerCase();
+    }
+
+    public static void main(String[] args) {
+        HW5 task5=new HW5();
+        String fullEmail=task5.createEmail("John","Snow","gmail");
+        System.out.println(fullEmail);
+        System.out.println(task5.createEmail("Niazi","Zamir","outlook"));
+
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HW6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW6.java b/AllSyntaxCodes/src/C15Methods/HW6.java
new file mode 100644
--- /dev/null	(date 1667691032464)
+++ b/AllSyntaxCodes/src/C15Methods/HW6.java	(date 1667691032464)
@@ -0,0 +1,27 @@
+package C15Methods;
+
+public class HW6 {
+    /*Write a method to return whether given number is prime or not?*/
+    boolean isPrime(int num){
+        boolean isPrime=true;
+        if (num > 1) {
+
+            for(int i=2;i<num;i++) {
+                if(num%i==0) {
+                    isPrime=false;
+                    break;
+                }
+            }
+        }else {
+            isPrime=false;
+        }
+
+        return isPrime;
+    }
+
+    public static void main(String[] args) {
+        HW6 task6=new HW6();
+        System.out.println(task6.isPrime(12));
+        System.out.println(task6.isPrime(5));
+    }
+}
Index: AllSyntaxCodes/src/C15Methods/HW7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C15Methods/HW7.java b/AllSyntaxCodes/src/C15Methods/HW7.java
new file mode 100644
--- /dev/null	(date 1667691032701)
+++ b/AllSyntaxCodes/src/C15Methods/HW7.java	(date 1667691032701)
@@ -0,0 +1,36 @@
+package C15Methods;
+
+import GroupProject1.Task7;
+
+public class HW7 {
+      /*
+method getGrade. Your method should accept the score of a student and return a grade:
+score > 90 - A
+score >80 - B
+score >70 - C
+score > 50 - D
+anything else - F
+     */
+
+    char getGrade(int score){
+        char grade;
+        if(score>90){
+            grade='A';
+        }else if( score>80){
+            grade='B';
+        }else if(score>70){
+            grade='C';
+        }else if(score>50){
+            grade='D';
+        }else {
+            grade='F';
+        }
+        return grade;
+    }
+
+    public static void main(String[] args) {
+        HW7 task7=new HW7();
+        System.out.println(task7.getGrade(81));
+
+    }
+}
Index: AllSyntaxCodes/src/C17AccessModifiers/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Dog.java b/AllSyntaxCodes/src/C17AccessModifiers/Dog.java
new file mode 100644
--- /dev/null	(date 1667691847483)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Dog.java	(date 1667691847483)
@@ -0,0 +1,48 @@
+package C17AccessModifiers;
+
+import C18Constructors.Animal;
+
+public class Dog extends Animal {
+
+    private String breed;
+    private String color;
+    private int age;
+    private double weight;
+
+    Dog(String dogName,String dogBreed,String dogColor,int dogAge,double dogWeight){
+        name=dogName;
+        breed=dogBreed;
+        color=dogColor;
+        if(dogAge>30){
+            System.out.println("Please enter a valid value");
+        }else {
+            age=dogAge;
+        }
+
+        weight=dogWeight;
+    }
+    void printInfo(){
+        System.out.println("name "+name+" "+" breed "+" age "+age);
+    }
+
+    public static void main(String[] args) {
+       /* Dog dog=new Dog();
+        dog.name="Tomy";
+        dog.breed="Huskey";
+        dog.color="Pink";
+        dog.age=10;
+        dog.weight=30;*/
+        Dog dog=new Dog("Tomy","Huskey","Pink",50,30);
+
+        dog.printInfo();
+
+      /*  Dog dog2=new Dog();
+        dog2.name="Cmi";
+        dog2.breed="German";
+        dog2.color="Green";
+        dog2.age=12;
+        dog2.weight=30;*/
+        Dog dog2=new Dog("Cmi","German","Green",12,30);
+        dog2.printInfo();
+
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/C17AccessModifiers/DogTester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/DogTester.java b/AllSyntaxCodes/src/C17AccessModifiers/DogTester.java
new file mode 100644
--- /dev/null	(date 1667691472473)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/DogTester.java	(date 1667691472473)
@@ -0,0 +1,9 @@
+package C17AccessModifiers;
+
+public class DogTester {
+    public static void main(String[] args) {
+        Dog dog=new Dog("Tomy","Huskey",
+                "Pink",10,30);
+        // dog.breed="dnfks";
+    }
+}
Index: AllSyntaxCodes/src/C17AccessModifiers/EmpTester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/EmpTester.java b/AllSyntaxCodes/src/C17AccessModifiers/EmpTester.java
new file mode 100644
--- /dev/null	(date 1667691494064)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/EmpTester.java	(date 1667691494064)
@@ -0,0 +1,19 @@
+package C17AccessModifiers;
+
+import java.util.Scanner;
+
+public class EmpTester {
+    public static void main(String[] args) {
+        Employee josh=new Employee("Josh"
+                ,"IT",120000,25);
+        josh.printSalary();
+        josh.calculatePrintTax();
+
+        /*
+        Below we have more constrcutor calls
+         */
+        Scanner scanner=new Scanner(System.in);
+        StringBuilder sb=new StringBuilder("Str");
+        String str=new String("value");
+    }
+}
Index: AllSyntaxCodes/src/C17AccessModifiers/Employee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Employee.java b/AllSyntaxCodes/src/C17AccessModifiers/Employee.java
new file mode 100644
--- /dev/null	(date 1667691529507)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Employee.java	(date 1667691529507)
@@ -0,0 +1,29 @@
+package C17AccessModifiers;
+
+public class Employee {
+    private   String name;
+    private String department;
+    private double salary;
+    private String id;
+    private int age;
+    private double actualSalary;
+    static String companyName="Syntax";
+
+    public  Employee(String empName,String empDepart,double empSalary,int empAge ){
+        name=empName;
+        department=empDepart;
+        salary=empSalary;
+        age=empAge;
+    }
+
+    void printSalary(){
+        actualSalary=salary+20000+10000;
+        System.out.println(actualSalary);
+    }
+
+    void calculatePrintTax(){
+        double tax=actualSalary*.3;
+        System.out.println("Tax "+tax);
+    }
+
+}
Index: AllSyntaxCodes/src/C16JavaVariables/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/Student.java b/AllSyntaxCodes/src/C16JavaVariables/Student.java
new file mode 100644
--- /dev/null	(date 1667691273297)
+++ b/AllSyntaxCodes/src/C16JavaVariables/Student.java	(date 1667691273297)
@@ -0,0 +1,30 @@
+package C16JavaVariables;
+
+public class Student {
+    /*
+ Create a Class called Students
+Create three  variables  Name , ID  and  numberOfStudents
+Create three objects of the Students Class
+Set the value for  studentName , studentID and increment  the numberOfStudents for each object
+Print out  total number of students
+ */
+    String name;
+    String id;
+    static int numberOfStudent;
+
+    public static void main(String[] args) {
+        Student roman= new Student();
+        roman.id="1";
+        roman.name="Ivan";
+        Student.numberOfStudent++;
+
+        Student sonamKapor= new Student();
+        sonamKapor.id="2";
+        sonamKapor.name="Sonam";
+        Student.numberOfStudent++;
+
+        System.out.println(Student.numberOfStudent);
+        System.out.println(Student.numberOfStudent);
+
+    }
+}
Index: AllSyntaxCodes/src/C16JavaVariables/SyntaxEmployee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/SyntaxEmployee.java b/AllSyntaxCodes/src/C16JavaVariables/SyntaxEmployee.java
new file mode 100644
--- /dev/null	(date 1667691295782)
+++ b/AllSyntaxCodes/src/C16JavaVariables/SyntaxEmployee.java	(date 1667691295782)
@@ -0,0 +1,15 @@
+package C16JavaVariables;
+
+public class SyntaxEmployee {
+    /*
+    Create a Class called SyntaxEmployee:
+Create three  variables  empID , salary and set the CEO to “Sumair”
+Create two objects of the class SyntaxEmployee
+Set the value of eID, salary for each of the objects
+Print out the eID , salary and  CEO for each of the objects
+     */
+    String empId;
+    double salary;
+    static String CEO="Sumair";
+}
+
Index: AllSyntaxCodes/src/C16JavaVariables/Task1Tester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C16JavaVariables/Task1Tester.java b/AllSyntaxCodes/src/C16JavaVariables/Task1Tester.java
new file mode 100644
--- /dev/null	(date 1667691323717)
+++ b/AllSyntaxCodes/src/C16JavaVariables/Task1Tester.java	(date 1667691323717)
@@ -0,0 +1,17 @@
+package C16JavaVariables;
+
+public class Task1Tester {
+    public static void main(String[] args) {
+        SyntaxEmployee asgharEmp =new SyntaxEmployee();
+        asgharEmp.empId="123";
+        asgharEmp.salary=100000;
+
+
+        System.out.println(SyntaxEmployee.CEO);
+        SyntaxEmployee moazzamEmp =new SyntaxEmployee();
+        moazzamEmp.empId="123";
+        moazzamEmp.salary=100000;
+
+        System.out.println(SyntaxEmployee.CEO);
+    }
+}
Index: AllSyntaxCodes/src/C17AccessModifiers/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Notes b/AllSyntaxCodes/src/C17AccessModifiers/Notes
new file mode 100644
--- /dev/null	(date 1667691369775)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Notes	(date 1667691369775)
@@ -0,0 +1,18 @@
+Access Modifiers:
+    Access modifiers are keywrods in java that control the access of methods fields or the class itself.
+    There are four access levels.
+Private:
+    If something has the access level of private that thing can only be accessed within the same class. This acess
+    level is the most restricted one. For fields/properties/state of a class, we should always try to have private access level so that the data of a class is
+    secured.
+Default:
+    Default is not a keyword. it's an access level. if we don't use any keyword with fields or methods java applies the dafault access
+    level automatically. Once applied we can access those entities within the same class as well as in any class within teh same package.
+Protected:
+    When applied entities can be accessed outside the package as well but only on the class that have parent-child relationship.
+Public:
+     When the public access modifier is applied to an entity that entity can be accessed anywhere inside that project.
+     Usually the classes itself and methods are declared as public.
+Note:
+If we are inside the same class we can call a method inside another by just writing its name. But we need
+to take care that these methods are both either static or non-static.
\ No newline at end of file
Index: AllSyntaxCodes/src/C17AccessModifiers/Task2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Task2.java b/AllSyntaxCodes/src/C17AccessModifiers/Task2.java
new file mode 100644
--- /dev/null	(date 1667691689178)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Task2.java	(date 1667691689178)
@@ -0,0 +1,21 @@
+package C17AccessModifiers;
+
+public class Task2 {
+     /*
+    Create a method that will take a String as a parameter and returns reversed String
+     Method should be available to all classes within your project and accessible by class name.
+     */
+
+    public static String reverseStr(String str){
+       /* String newStr;
+        StringBuilder sb=new StringBuilder(str);
+        sb.reverse();
+        newStr=sb.toString();
+        return newStr;*/
+        return new StringBuilder(str).reverse().toString();
+    }
+
+    public static void main(String[] args) {
+        System.out.println(Task2.reverseStr("Sunday"));
+    }
+}
Index: AllSyntaxCodes/src/C17AccessModifiers/Task3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Task3.java b/AllSyntaxCodes/src/C17AccessModifiers/Task3.java
new file mode 100644
--- /dev/null	(date 1667691706392)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Task3.java	(date 1667691706392)
@@ -0,0 +1,19 @@
+package C17AccessModifiers;
+
+public class Task3 {
+     /*
+    Create a method that will accept a String as a parameter and return a new String that consist only of vowels.
+    Method should be available inside the class only where it was declared and executed by calling it is name.
+     */
+    private static String getVowels(String str){
+     /*   String newStr=str.replaceAll("[^aeiouAEIOU]","");
+        return newStr;*/
+
+        return str.replaceAll("[^aeiouAEIOU]","");
+    }
+
+    public static void main(String[] args) {
+        String humera = getVowels("Humera");
+        System.out.println("humera = " + humera);
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Notes b/AllSyntaxCodes/src/C18Constructors/Notes
new file mode 100644
--- /dev/null	(date 1667691761354)
+++ b/AllSyntaxCodes/src/C18Constructors/Notes	(date 1667691761354)
@@ -0,0 +1,18 @@
+Constructors:
+    Constructor help us give initial values to the fields of a
+    class.
+Why we should use a constructor:
+    1)Constructors help us write cleaner code.
+    2)Constructors give us more control over the values that an end user can
+    assign to the field of a class.
+Syntax of Constructor:
+    Access modifier className (parameters){
+
+    }
+Class Dog{
+String name;
+public Dog(String dogName){
+name=dogName;
+}
+
+}
\ No newline at end of file
Index: AllSyntaxCodes/src/C17AccessModifiers/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Person.java b/AllSyntaxCodes/src/C17AccessModifiers/Person.java
new file mode 100644
--- /dev/null	(date 1667691550898)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Person.java	(date 1667691550898)
@@ -0,0 +1,41 @@
+package C17AccessModifiers;
+
+import java.util.Scanner;
+
+public class Person {
+    String name;
+    String color;
+    String country;
+    int age;
+    double weight;
+    String hairColor;
+    String eyeColor;
+    double height;
+    static char gender='M';
+
+
+    public Person(){
+
+    }
+
+    public Person(String perName){
+        name=perName;
+    }
+    public Person(String name, String color, String country, int age, double weight, String hairColor, String eyeColor, double height, char gender) {
+        this.name = name;
+        this.color = color;
+        this.country = country;
+        this.age = age;
+        this.weight = weight;
+        this.hairColor = hairColor;
+        this.eyeColor = eyeColor;
+        this.height = height;
+        this.gender = gender;
+    }
+
+    public static void main(String[] args) {
+        Person person=new Person();
+        Person person2=new Person("Asma");
+        Scanner scanner=new Scanner(System.in);
+    }
+}
Index: AllSyntaxCodes/src/C17AccessModifiers/Task1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Task1.java b/AllSyntaxCodes/src/C17AccessModifiers/Task1.java
new file mode 100644
--- /dev/null	(date 1667691566124)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Task1.java	(date 1667691566124)
@@ -0,0 +1,19 @@
+package C17AccessModifiers;
+
+public class Task1 {
+    /*
+    Create a method that will accept an array as parameters and will return a sum of all
+    elements from that array.
+    Method should be visibly only within same package and accessible by the creating an
+    instance of the class.
+     */
+
+    int sumArray(int [] arr){
+        int sum=0;
+        for (int num:arr
+        ) {
+            sum+=num;
+        }
+        return sum;
+    }
+}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/Dog.java b/AllSyntaxCodes/src/C27CollectionsFramewors/Dog.java
new file mode 100644
--- /dev/null	(date 1668289396421)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/Dog.java	(date 1668289396421)
@@ -0,0 +1,37 @@
+package C27CollectionsFramewors;
+public class Dog {
+    private String name;
+    private String color;
+    private String breed;
+
+    public Dog(String name, String color, String breed) {
+        this.name = name;
+        this.color = color;
+        this.breed = breed;
+    }
+    public String getName() {
+        return name;
+    }
+    public void setName(String name) {
+        this.name = name;
+    }
+    public String getColor() {
+        return color;
+    }
+    public void setColor(String color) {
+        this.color = color;
+    }
+    public String getBreed() {
+        return breed;
+    }
+    public void setBreed(String breed) {
+        this.breed = breed;
+    }
+    @Override
+    public String toString() {//type to do to get this automatically
+        return "Dog{" +
+                "name='" + name + '\'' +
+                ", color='" + color + '\'' +
+                ", breed='" + breed + '\'' +
+                '}';
+    }}
Index: AllSyntaxCodes/src/C17AccessModifiers/Task1Tester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C17AccessModifiers/Task1Tester.java b/AllSyntaxCodes/src/C17AccessModifiers/Task1Tester.java
new file mode 100644
--- /dev/null	(date 1667691672791)
+++ b/AllSyntaxCodes/src/C17AccessModifiers/Task1Tester.java	(date 1667691672791)
@@ -0,0 +1,12 @@
+package C17AccessModifiers;
+
+public class Task1Tester {
+    public static void main(String[] args) {
+
+        Task1 obj=new Task1();
+        int [] array={10,10,20,30};
+        //    System.out.println(obj.sumArray(array));
+        int sum= obj.sumArray(array);
+
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Dog.java b/AllSyntaxCodes/src/C18Constructors/Dog.java
new file mode 100644
--- /dev/null	(date 1667691929274)
+++ b/AllSyntaxCodes/src/C18Constructors/Dog.java	(date 1667691929274)
@@ -0,0 +1,26 @@
+package C18Constructors;
+
+public class Dog extends Animal {
+
+    String color;
+    double height;
+
+
+    public Dog(String name, String breed, String color, int age, double weight) {
+        this.name = name;
+        this.breed = breed;
+        this.color = color;
+        this.age = age;
+        this.weight = weight;
+    }
+    public Dog(String name, String breed, String color, int age, double weight, double height) {
+       /* this.name = name;
+        this.breed = breed;
+        this.color = color;
+        this.age = age;
+        this.weight = weight;*/
+        this(name, breed, color, age, weight);
+        this.height = height;
+        //break till 1:30
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Horse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Horse.java b/AllSyntaxCodes/src/C18Constructors/Horse.java
new file mode 100644
--- /dev/null	(date 1667691948299)
+++ b/AllSyntaxCodes/src/C18Constructors/Horse.java	(date 1667691948299)
@@ -0,0 +1,16 @@
+package C18Constructors;
+
+public class Horse extends Animal{
+
+    public Horse(String name,String breed,int age,double weight){
+        this.name=name;
+        this.breed=breed;
+        this.age=age;
+        this.weight=weight;
+    }
+    public static void main(String[] args) {
+        Horse horseObject=new Horse("Sprit","Stallion",20,400);
+        horseObject.printInfo();
+    }
+
+}
Index: AllSyntaxCodes/src/C18Constructors/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Student.java b/AllSyntaxCodes/src/C18Constructors/Student.java
new file mode 100644
--- /dev/null	(date 1667691967236)
+++ b/AllSyntaxCodes/src/C18Constructors/Student.java	(date 1667691967236)
@@ -0,0 +1,30 @@
+package C18Constructors;
+
+public class Student {
+    /*
+   Write a java Class Students that have a constructor which takes students name and 3 subject grades.
+    Inside your class also have a method to Calculate Average Grade. Test Student class for 5
+     different students with different marks. Your program should print an average mark of each students name.
+NOTE: please use different names for instance and local variables.
+    */
+    String name;
+    double subj1;
+    double subj2;
+    double subj3;
+
+    Student(String studentName,double sub1,double sub2,double sub3){
+        name=studentName;
+        subj1=sub1;
+        subj2=sub2;
+        subj3=sub3;
+    }
+
+    void calculatePrintAvgGrade(){
+        System.out.println(name+" "+(subj1+subj2+subj3)/3);
+    }
+
+    public static void main(String[] args) {
+        new Student("Sabah",99,98,97.5).calculatePrintAvgGrade();
+
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Task1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Task1.java b/AllSyntaxCodes/src/C18Constructors/Task1.java
new file mode 100644
--- /dev/null	(date 1667692069475)
+++ b/AllSyntaxCodes/src/C18Constructors/Task1.java	(date 1667692069475)
@@ -0,0 +1,16 @@
+package C18Constructors;
+
+public class Task1 {
+    /*
+   Write a java class that will have a constructor: one with parameters and second without any parameters.
+   Create a separate Test class where you will execute both of the constructors 1 by 1.
+    */
+    public Task1(){
+        System.out.println("Empty");
+    }
+
+    public Task1(String str){
+        System.out.println("Str = "+str);
+    }
+
+}
Index: AllSyntaxCodes/src/C18Constructors/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Animal.java b/AllSyntaxCodes/src/C18Constructors/Animal.java
new file mode 100644
--- /dev/null	(date 1667691847443)
+++ b/AllSyntaxCodes/src/C18Constructors/Animal.java	(date 1667691847443)
@@ -0,0 +1,13 @@
+package C18Constructors;
+
+public class Animal {
+    protected   String name;
+    String breed;
+    int age;
+    double weight;
+
+    void printInfo(){
+        String name="now this will be printed";
+        System.out.println("name "+this.name+" Breed "+breed+" age "+age+" Weight "+weight);
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Car.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Car.java b/AllSyntaxCodes/src/C18Constructors/Car.java
new file mode 100644
--- /dev/null	(date 1667691864655)
+++ b/AllSyntaxCodes/src/C18Constructors/Car.java	(date 1667691864655)
@@ -0,0 +1,43 @@
+package C18Constructors;
+
+public class Car {
+    //Common class has many names like parent class super class
+    String model;
+    String make;
+    int year;
+    String color;
+    int topSpeed;
+    double price;
+    // if a field or method has private access modifier in parent class child classes can't use it.
+    private String engineType;
+
+    void printCarDetails(){
+        System.out.println("Model "+model+" Make "+make+" Color "+color);
+    }
+}
+
+class BMW extends Car{
+    // Child classes base classes
+    double engineCC;
+
+}
+
+class Tesla extends Car{
+
+}
+
+class Toyota extends Car{
+    double engineCC;
+}
+
+class CarTester{
+    public static void main(String[] args) {
+        BMW bmw=new BMW();
+        bmw.make="BMW";
+        bmw.color="Black";
+        bmw.model="x8";
+        bmw.engineCC=200;
+        bmw.printCarDetails();
+
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Cat.java b/AllSyntaxCodes/src/C18Constructors/Cat.java
new file mode 100644
--- /dev/null	(date 1667691893675)
+++ b/AllSyntaxCodes/src/C18Constructors/Cat.java	(date 1667691893675)
@@ -0,0 +1,23 @@
+package C18Constructors;
+
+public class Cat extends Animal{
+
+    double height;
+
+    public Cat(String catName,String catBreed
+    ){
+        name=catName;
+        breed=catBreed;
+
+    }
+    public Cat(String catName,String catBreed,
+               int catAge,double catWeight){
+        name=catName;
+        breed=catBreed;
+        age=catAge;
+        weight=catWeight;
+    }
+    public void printInfo(){
+        System.out.println("Name "+name+ " Breed "+breed+
+                " age "+age+" Weight "+weight);
+    }}
Index: AllSyntaxCodes/src/C18Constructors/CatTester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/CatTester.java b/AllSyntaxCodes/src/C18Constructors/CatTester.java
new file mode 100644
--- /dev/null	(date 1667691909524)
+++ b/AllSyntaxCodes/src/C18Constructors/CatTester.java	(date 1667691909524)
@@ -0,0 +1,13 @@
+package C18Constructors;
+
+public class CatTester {
+    public static void main(String[] args) {
+        Cat cat=new Cat("kitty",
+                "Dsh",10,4);
+
+        cat.printInfo();
+
+        Cat cat2=new Cat("Chinki","Leo");
+        cat2.printInfo();
+    }
+}
Index: AllSyntaxCodes/src/C19ThisKeywordInheritance/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C19ThisKeywordInheritance/Notes b/AllSyntaxCodes/src/C19ThisKeywordInheritance/Notes
new file mode 100644
--- /dev/null	(date 1667692173125)
+++ b/AllSyntaxCodes/src/C19ThisKeywordInheritance/Notes	(date 1667692173125)
@@ -0,0 +1,36 @@
+"this" keyword:
+    "this" is a keyword like "class", "void". it is used in many places. For example
+    if we have same name instance and a local variable we can use "this" to
+    explicitly refer to instance variable. We can use "this()" to call a constructor inside another
+    constructor.
+why should we learn about "this" keyword:
+    1)it allows us to have same name local and instance variables.
+    2) if we have same code in two constructors we can reuse that code from one constructor
+    inside another constructor by writing "this()".
+Inheritance:
+    Inheritance is a mechanism in java through which we can use the fields/methods of
+    one class inside another class.
+    There are 4 types of inheritance.
+    1) Single inheritance:
+        In single inheritance we have only one parent and one child class.
+        Employee->Person.
+    2) Multilevel Inheritance:
+        In Multilevel inheritance we have inheritance in multiple levels like we have a grandfather-> father->son->grand son
+    3) Hierarchical inheritance:
+       one parent class and multiple direct child classes.
+    4) Multiple inheritance:
+        one child class can directly inherit from multiple parent classes. it is not supported by java because of diamond problem.
+Why should we learn inheritance?
+    It allows to reduce the duplicate code.
+what is the syntax?
+    we can use this feature by writing extends keyword when declaring a class.
+Footer
+© 2022 GitHub, Inc.
+Footer navigation
+Terms
+Privacy
+Security
+Status
+Docs
+Contact GitHub
+Pricing
Index: AllSyntaxCodes/src/C20inheriance/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C20inheriance/Notes b/AllSyntaxCodes/src/C20inheriance/Notes
new file mode 100644
--- /dev/null	(date 1667692323780)
+++ b/AllSyntaxCodes/src/C20inheriance/Notes	(date 1667692323780)
@@ -0,0 +1,41 @@
+What is inheritance?
+    It's a mechanism through which a class can inherit the properties and methods of another class.
+Why we should learn inheritance?
+    It helps use avoid code duplication.
+    It helps us save space.
+    It helps us improve the execution speed.
+What is the syntax?
+We use the extends keyword and the name of the class from which we want to inherit the fields
+and methods while declaring the class.
+Types of inheritance:
+    There can be 4 types of inheritance but java only supports 3 of them with classes.
+    1) Single.
+    2) Multilevel.
+    3) Hierarchical.
+    4) Multiple(it is not supported by classes in java).
+Single inheritance:
+    When we have only one parent and one child classes in inheritance it is called single inheritance.
+    not widely used.
+Multilevel Inheritance:
+    One top level and one base class and many intermediate classes. For Example A<B<C<D.
+Hierarchical Inheritance:
+    When we have one parent class and multiple child classes it's called Hierarchical Inheritance.
+Multiple Inheritance:
+    One child and multiple parent classes. it is not supported by classes in java. It creates the diamond problem.
+Super keyword:
+    We use the super keyword to explicitly call the variable from the parent class. When we have
+    same name instance variable in child class and parent class.
+    We can also use the super keywrod to call the constructor of the parent class.
+==================================================================================
+MethodOverloading:
+    Method overloading allows us to create multiple methods in a class with same name.
+Why we should create multiple methods with same name?
+    It gives the end user flexibility.
+    The end user can call the same method with different parameters to get same or different results.
+How do we overload a method?
+    1) By passing different number of parameters.
+    2) By changing the datatype.
+    3) By changing the sequence of parameters
+
+
+
Index: AllSyntaxCodes/src/C20inheriance/MethodOverloading.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C20inheriance/MethodOverloading.java b/AllSyntaxCodes/src/C20inheriance/MethodOverloading.java
new file mode 100644
--- /dev/null	(date 1667692361348)
+++ b/AllSyntaxCodes/src/C20inheriance/MethodOverloading.java	(date 1667692361348)
@@ -0,0 +1,39 @@
+package C20inheriance;
+
+import java.util.Scanner;
+
+public class MethodOverloading {
+    int number;
+    double dNumber;
+
+    MethodOverloading() {
+
+    }
+
+    MethodOverloading(double dNumber) {
+        this.dNumber = dNumber;
+    }
+
+    MethodOverloading(int number) {
+        this.number = number;
+    }
+
+    static void add(int num1, int num2) {
+        System.out.println(num1 + num2);
+    }
+
+    static void add(double num1, double num2) {
+        System.out.println(num1 + num2);
+    }
+
+    static void add(double num1, double num2, double num3) {
+        System.out.println(num1 + num2 + num3);
+    }
+
+    public static void main(String[] args) {
+        add(20, 20);
+        new MethodOverloading(45);
+        new Scanner(System.in);
+    }
+
+}
Index: AllSyntaxCodes/src/C18Constructors/Task3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Task3.java b/AllSyntaxCodes/src/C18Constructors/Task3.java
new file mode 100644
--- /dev/null	(date 1667692089783)
+++ b/AllSyntaxCodes/src/C18Constructors/Task3.java	(date 1667692089783)
@@ -0,0 +1,31 @@
+package C18Constructors;
+
+public class Task3 {
+     /*Write a java class that have 4 constructors with 4 different access levels of
+    constructors(private,public,default,protected) and create 4 objects of this
+    class: 1 - inside same class; 2 - from outside the class; 3 - from different class inside different package
+    and observe result.
+     */
+
+    private Task3(){
+        System.out.println("private");
+    }
+
+    Task3(String name){
+        System.out.println("Default");
+    }
+
+    protected Task3(int age){
+        System.out.println("protected");
+    }
+    public Task3(boolean isTrue){
+        System.out.println("public");
+    }
+
+    public static void main(String[] args) {
+        new Task3();
+        new Task3("Thank you Lubna");
+        new Task3(10);
+        new Task3(true);
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Task3Tester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Task3Tester.java b/AllSyntaxCodes/src/C18Constructors/Task3Tester.java
new file mode 100644
--- /dev/null	(date 1667692105886)
+++ b/AllSyntaxCodes/src/C18Constructors/Task3Tester.java	(date 1667692105886)
@@ -0,0 +1,10 @@
+package C18Constructors;
+
+public class Task3Tester {
+    public static void main(String[] args) {
+        //  new Task3(); because it private
+        new Task3("Thank you Lubna");
+        new Task3(10);
+        new Task3(true);
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/Task4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/Task4.java b/AllSyntaxCodes/src/C18Constructors/Task4.java
new file mode 100644
--- /dev/null	(date 1667692122016)
+++ b/AllSyntaxCodes/src/C18Constructors/Task4.java	(date 1667692122016)
@@ -0,0 +1,22 @@
+package C18Constructors;
+
+public class Task4 {
+    /*
+    //Write program that have static constructor and observe result
+     */
+    Task4(){
+
+    }
+    void print(){
+
+    }
+    void print2(){
+
+    }
+
+    public static void main(String[] args) {
+        Task4 task4=new Task4();
+        task4.print();
+        task4.print2();
+    }
+}
Index: AllSyntaxCodes/src/C18Constructors/ThisKeywordDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C18Constructors/ThisKeywordDemo.java b/AllSyntaxCodes/src/C18Constructors/ThisKeywordDemo.java
new file mode 100644
--- /dev/null	(date 1667692141240)
+++ b/AllSyntaxCodes/src/C18Constructors/ThisKeywordDemo.java	(date 1667692141240)
@@ -0,0 +1,16 @@
+package C18Constructors;
+
+public class ThisKeywordDemo {
+    String str="Red";
+
+    void print(){
+        String str="Blue";
+
+        System.out.println(this.str);
+        System.out.println(str);
+    }
+
+    public static void main(String[] args) {
+        new ThisKeywordDemo().print();
+    }
+}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/SearchReturnReplacePrintOneItemOnly.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/SearchReturnReplacePrintOneItemOnly.java b/AllSyntaxCodes/src/C27CollectionsFramewors/SearchReturnReplacePrintOneItemOnly.java
new file mode 100644
--- /dev/null	(date 1668289396603)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/SearchReturnReplacePrintOneItemOnly.java	(date 1668289396603)
@@ -0,0 +1,24 @@
+package C27CollectionsFramewors;
+import java.util.HashMap;
+public class SearchReturnReplacePrintOneItemOnly {
+    public static void main(String[] args) {
+
+        HashMap<String, Double> fruit=new HashMap<>();
+        fruit.put("Apple",1.99);
+        fruit.put("Mango",2.99);
+        fruit.put("Orange",4.99);
+        fruit.put("Banana",10.1);
+
+        System.out.println(fruit);//print all Keys & Values
+        System.out.println(fruit.get("Orange"));//to print only the value of Orange
+        fruit.remove("Mango");//to remove
+        System.out.println(fruit);
+
+        System.out.println(fruit.containsKey("Apple"));//to search for a specific item
+        System.out.println(fruit.containsKey("Kiwi"));//will return false
+        System.out.println(fruit.containsValue(4.99));//searches for the value/price
+        System.out.println(fruit.isEmpty());
+        //replace the value
+        fruit.replace("Apple",2.99);
+        System.out.println(fruit);
+    }}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/PrintAllnClear.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/PrintAllnClear.java b/AllSyntaxCodes/src/C27CollectionsFramewors/PrintAllnClear.java
new file mode 100644
--- /dev/null	(date 1668289394829)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/PrintAllnClear.java	(date 1668289394829)
@@ -0,0 +1,26 @@
+package C27CollectionsFramewors;
+
+import java.util.LinkedHashMap;
+public class PrintAllnClear {
+    public static void main(String[] args) {
+        LinkedHashMap<String,Double> beautyProducts=new LinkedHashMap<>();
+        beautyProducts.put("Foundation",50.5);
+        beautyProducts.put("Blush", 20.0);
+        beautyProducts.put("Lipstick", 10.50);
+
+        LinkedHashMap<String, Double> cosmetics=new LinkedHashMap<>();
+        cosmetics.put("Soap",10.2);
+        cosmetics.put("Conditioner",20.5);
+        cosmetics.put("Shampoo",30.99);
+
+        LinkedHashMap<String, Double> grocery=new LinkedHashMap<>();
+        //will print beauty IN ORDER WITH PRICES
+        grocery.putAll(beautyProducts);
+        System.out.println(grocery);
+        //will print everything Cosm & Beauty
+        grocery.putAll(cosmetics);
+        System.out.println(grocery);
+        //clear everything from the List
+        grocery.clear();
+        System.out.println(grocery);
+    }}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/Duplicates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/Duplicates.java b/AllSyntaxCodes/src/C27CollectionsFramewors/Duplicates.java
new file mode 100644
--- /dev/null	(date 1668289396068)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/Duplicates.java	(date 1668289396068)
@@ -0,0 +1,24 @@
+package C27CollectionsFramewors;
+
+import java.util.HashMap;
+import java.util.Set;
+
+public class Duplicates {
+    public static void main(String[] args) {
+        HashMap<String, Double> fruit=new HashMap<>();
+        fruit.put("Apple",1.99);
+        fruit.put("Mango",2.99);
+        fruit.put("Banana",12.0);
+        fruit.put("Banana",10.1);//replaces the other value > duplicates are not allowed
+        System.out.println(fruit);
+        System.out.println(fruit.get("Banana"));//will be confused
+
+        Set<String> keySet=fruit.keySet();//will only give items=Keys, no duplicates
+        System.out.println(keySet);
+
+        var values=fruit.values();//will give all the values/prices
+        System.out.println(values);
+
+
+    }
+}
Index: AllSyntaxCodes/src/C27CollectionsFramewors/GetAllKeysNremove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/GetAllKeysNremove.java b/AllSyntaxCodes/src/C27CollectionsFramewors/GetAllKeysNremove.java
new file mode 100644
--- /dev/null	(date 1668289394491)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/GetAllKeysNremove.java	(date 1668289394491)
@@ -0,0 +1,28 @@
+package C27CollectionsFramewors;
+
+import java.util.HashMap;
+import java.util.Iterator;
+
+public class GetAllKeysNremove {
+    public static void main(String[] args) {
+        HashMap<String, Double> fruit=new HashMap<>();
+        fruit.put("Apple",1.99);
+        fruit.put("Mango",2.99);
+        fruit.put("Banana",12.0);
+        fruit.put("Orange",11.0);
+
+        var allKeys=fruit.keySet();//print all the items
+        System.out.println(allKeys);
+
+        Iterator<String> iterator=allKeys.iterator();
+        while (iterator.hasNext()){
+            String item= iterator.next();
+            if (item.contains("n")){//remove items with 'n' char
+                iterator.remove();
+            }}
+        //shorter way with lambda
+        fruit.keySet().removeIf(removeThis->removeThis.contains("n"));
+
+        System.out.println(fruit);
+    }
+}
Index: AllSyntaxCodes/src/C20inheriance/MethodOverloadingD2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C20inheriance/MethodOverloadingD2.java b/AllSyntaxCodes/src/C20inheriance/MethodOverloadingD2.java
new file mode 100644
--- /dev/null	(date 1667692381504)
+++ b/AllSyntaxCodes/src/C20inheriance/MethodOverloadingD2.java	(date 1667692381504)
@@ -0,0 +1,28 @@
+package C20inheriance;
+
+public class MethodOverloadingD2 {
+    private static MethodOverloading md;
+
+    void F1(String name, int number){
+        System.out.println("1");
+    }
+
+    // By changing the number of parameters
+    void F1(String name,int number,int number2){
+        System.out.println("2");
+    }
+
+    //By changing the data types
+    void F1(int num1,int number){
+        System.out.println("3");
+    }
+
+    void F1(int number,String name){
+        System.out.println("4");
+    }
+
+    public static void main(String[] args) {
+        MethodOverloadingD2 md=new MethodOverloadingD2();
+        md.F1("Taras",20);
+    }
+}
Index: AllSyntaxCodes/src/C20inheriance/Repl139.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C20inheriance/Repl139.java b/AllSyntaxCodes/src/C20inheriance/Repl139.java
new file mode 100644
--- /dev/null	(date 1667692399382)
+++ b/AllSyntaxCodes/src/C20inheriance/Repl139.java	(date 1667692399382)
@@ -0,0 +1,16 @@
+package C20inheriance;
+
+public class Repl139 {
+    public static void main(String[] args) {
+
+        char c='B';
+        System.out.println((int)c);
+        for (int i = 65; i <120 ; i++) {
+            System.out.println((char)i);
+        }
+
+        if('A'>'B'){
+            System.out.println("its a false");
+        }
+    }
+}
Index: AllSyntaxCodes/src/C21MethodOverloading/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C21MethodOverloading/Notes b/AllSyntaxCodes/src/C21MethodOverloading/Notes
new file mode 100644
--- /dev/null	(date 1667692427089)
+++ b/AllSyntaxCodes/src/C21MethodOverloading/Notes	(date 1667692427089)
@@ -0,0 +1,10 @@
+Method Overloading:
+    Allows us to have same name methods or constructor but with different parameters.
+Why we should use MethodOverloading?
+    1) It gives the flexibility to the end user that he use the same method in different ways.
+    2) It helps us write cleaner code.
+What is the syntax to overload a Method?
+    Create different methods but keep the following points in mind.
+    1) we can overload a method by just passing different number of parameters.
+    2) we can overload a method by changing the data type of parameter.
+    3) we can overload a method by changing the sequence.
\ No newline at end of file
Index: AllSyntaxCodes/src/C27CollectionsFramewors/MapDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/MapDemo.java b/AllSyntaxCodes/src/C27CollectionsFramewors/MapDemo.java
new file mode 100644
--- /dev/null	(date 1668289395220)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/MapDemo.java	(date 1668289395220)
@@ -0,0 +1,14 @@
+package C27CollectionsFramewors;
+import java.util.HashMap;
+//Map is an interface where all the methods are defined
+public class MapDemo {
+    public static void main(String[] args) {
+        HashMap<String,String> data=new HashMap<>();
+        //this is how we store info inside a map
+        data.put("UserName","Anton123");
+        data.put("Passowrd","pass123");
+
+        System.out.println(data);
+        //this is how we can get back the values
+        System.out.println("Password");
+    }}
Index: AllSyntaxCodes/src/Repls/src/R198SetPrintInOrderNremoveDuplicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R198SetPrintInOrderNremoveDuplicate.java b/AllSyntaxCodes/src/Repls/src/R198SetPrintInOrderNremoveDuplicate.java
new file mode 100644
--- /dev/null	(date 1667843997018)
+++ b/AllSyntaxCodes/src/Repls/src/R198SetPrintInOrderNremoveDuplicate.java	(date 1667843997018)
@@ -0,0 +1,21 @@
+import java.util.ArrayList;
+import java.util.TreeSet;
+
+public class R198SetPrintInOrderNremoveDuplicate {
+    public static void main(String[] args) {
+
+       var words=new ArrayList<String>();
+        words.add("India");
+        words.add("Australia");
+        words.add("South Africa");
+        words.add("India");
+        words.add("America");
+        words.add("America");
+
+        System.out.println(removeDuplicates(words));
+    }
+    public static ArrayList<String> removeDuplicates(ArrayList<String> arrayList){
+        TreeSet<String> hashSet=new TreeSet<>(arrayList);
+        return new ArrayList<>(hashSet);
+    }
+}
Index: AllSyntaxCodes/src/Repls/src/R199SetPrintInOrderNforLoop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R199SetPrintInOrderNforLoop.java b/AllSyntaxCodes/src/Repls/src/R199SetPrintInOrderNforLoop.java
new file mode 100644
--- /dev/null	(date 1667856466336)
+++ b/AllSyntaxCodes/src/Repls/src/R199SetPrintInOrderNforLoop.java	(date 1667856466336)
@@ -0,0 +1,25 @@
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class R199SetPrintInOrderNforLoop {
+    public static void main(String[] args) {
+
+        var words = new ArrayList<String>();
+        words.add("null");
+        words.add("Sohil");
+        words.add("Diego");
+        words.add("Alijon");
+        words.add("Asel");
+        words.add("Sumair");
+
+        for (String element:words){
+            System.out.println(element);
+        }
+        Iterator<String> iterator=words.iterator();
+        while (iterator.hasNext()){
+            String print=iterator.next();
+            System.out.println(print);
+        }
+    }
+}
+
Index: AllSyntaxCodes/src/Repls/src/R200MapPreserveOrderPrintRemove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R200MapPreserveOrderPrintRemove.java b/AllSyntaxCodes/src/Repls/src/R200MapPreserveOrderPrintRemove.java
new file mode 100644
--- /dev/null	(date 1667863259842)
+++ b/AllSyntaxCodes/src/Repls/src/R200MapPreserveOrderPrintRemove.java	(date 1667863259842)
@@ -0,0 +1,19 @@
+import java.util.Collection;
+import java.util.LinkedHashMap;
+
+public class R200MapPreserveOrderPrintRemove {
+    public static void main(String[] args) {
+        LinkedHashMap<String,String> data=new LinkedHashMap<>();
+        data.put("Street", "Patrick ST");
+        data.put("Suite", "265");
+        data.put("City", "Vienna");
+        data.put("Zip", "22180");
+        data.put("Country", "United State");
+
+        Collection<String> info=data.values();
+        var iterator=info.iterator();
+        while(iterator.hasNext()){
+            var word=iterator.next();
+            System.out.println(word);
+
+        }}}
Index: AllSyntaxCodes/src/Repls/src/R201MapCountOccuranceRemove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R201MapCountOccuranceRemove.java b/AllSyntaxCodes/src/Repls/src/R201MapCountOccuranceRemove.java
new file mode 100644
--- /dev/null	(date 1667847224824)
+++ b/AllSyntaxCodes/src/Repls/src/R201MapCountOccuranceRemove.java	(date 1667847224824)
@@ -0,0 +1,16 @@
+import java.util.HashMap;
+
+public class R201MapCountOccuranceRemove {
+    public static void main(String[] args) {
+        HashMap<String, String> data = new HashMap<>();
+        data.put("Street", "Patrick ST");
+        data.put("Suite", "265");
+        data.put("City", "Vienna");
+        data.put("Zip", "22180");
+        data.put("Country", "United State");
+
+        System.out.println(data.size());
+
+        data.clear();
+        System.out.println(data.size());
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/C27CollectionsFramewors/GetSpecificValueWithLambda.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/GetSpecificValueWithLambda.java b/AllSyntaxCodes/src/C27CollectionsFramewors/GetSpecificValueWithLambda.java
new file mode 100644
--- /dev/null	(date 1668289394598)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/GetSpecificValueWithLambda.java	(date 1668289394598)
@@ -0,0 +1,24 @@
+package C27CollectionsFramewors;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+public class GetSpecificValueWithLambda {
+    public static void main(String[] args) {
+            HashMap<String, Double> fruit=new HashMap<>();
+            fruit.put("Apple",1.99);
+            fruit.put("Mango",1.99);
+            fruit.put("Banana",12.0);
+            fruit.put("Orange",11.0);
+
+            Collection<Double> values=fruit.values();//returns all the values from a map
+        Iterator<Double> iterator=values.iterator();
+        while (iterator.hasNext()){
+            Double value= iterator.next();
+            if (value>2){
+                iterator.remove();
+            }}
+        System.out.println(fruit+"with WHILE LOOP");
+//this is a shorter way to get the same as above > through lambda
+        fruit.values().removeIf(removeThis->removeThis>2);
+        System.out.println(fruit+" with LAMBDA");
+    }}
Index: AllSyntaxCodes/src/Repls/src/R195RemoveDuplicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R195RemoveDuplicate.java b/AllSyntaxCodes/src/Repls/src/R195RemoveDuplicate.java
new file mode 100644
--- /dev/null	(date 1667841058416)
+++ b/AllSyntaxCodes/src/Repls/src/R195RemoveDuplicate.java	(date 1667841058416)
@@ -0,0 +1,19 @@
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+
+public class R195RemoveDuplicate {
+    public static void main(String[] args) {
+        ArrayList<Integer> nums=new ArrayList<>();
+        nums.add(111);
+        nums.add(111);
+        nums.add(111);
+        nums.add(999);
+        nums.add(999);
+        nums.add(999);
+
+        HashSet<Integer> unique=new HashSet<Integer>(nums);
+        List<Integer>unique2=new ArrayList<Integer>(unique);
+        for (Object ob : unique2) {
+            System.out.println(ob);
+        }}}
Index: AllSyntaxCodes/src/Repls/src/R196Remove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R196Remove.java b/AllSyntaxCodes/src/Repls/src/R196Remove.java
new file mode 100644
--- /dev/null	(date 1667841600159)
+++ b/AllSyntaxCodes/src/Repls/src/R196Remove.java	(date 1667841600159)
@@ -0,0 +1,13 @@
+import java.util.ArrayList;
+
+public class R196Remove {
+    public static void main(String[] args) {
+        ArrayList<String> words=new ArrayList<>();
+        words.add("third");
+        words.add("first");
+        words.add("second");
+        System.out.println(words);
+
+        words.removeAll(words);
+        System.out.println(words);
+    }}
Index: AllSyntaxCodes/src/Repls/src/R197SetNoOrderNcount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R197SetNoOrderNcount.java b/AllSyntaxCodes/src/Repls/src/R197SetNoOrderNcount.java
new file mode 100644
--- /dev/null	(date 1667855532425)
+++ b/AllSyntaxCodes/src/Repls/src/R197SetNoOrderNcount.java	(date 1667855532425)
@@ -0,0 +1,18 @@
+import java.util.HashSet;
+import java.util.Set;
+
+public class R197SetNoOrderNcount {
+    public static void main(String[] args) {
+
+        Set<String> words = new HashSet<>();
+        words.add("Red");
+        words.add("Pink");
+        words.add("White");
+        words.add("Yellow");
+        words.add("Black");
+            System.out.println("Original Hash Set: "+words);
+
+        System.out.println("Size of the Hash Set: "+words.size());
+        }}
+
+
Index: AllSyntaxCodes/src/Repls/src/R206HashMapRemoveWithForLoopEntrySet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R206HashMapRemoveWithForLoopEntrySet.java b/AllSyntaxCodes/src/Repls/src/R206HashMapRemoveWithForLoopEntrySet.java
new file mode 100644
--- /dev/null	(date 1667852963224)
+++ b/AllSyntaxCodes/src/Repls/src/R206HashMapRemoveWithForLoopEntrySet.java	(date 1667852963224)
@@ -0,0 +1,31 @@
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+public class R206HashMapRemoveWithForLoopEntrySet {
+    public static void main(String[] args) {
+        HashMap<String, String> data = new HashMap<>();
+        data.put("ONE", "AAA");
+        data.put("TWO", "BBB");
+        data.put("THREE", "CCC");
+        data.put("FOUR", "DDD");
+        data.put("FIVE", "EEE");
+
+        Set<Map.Entry<String, String>> info = data.entrySet();
+        System.out.println("HashMap Before Remove :");
+        for(Map.Entry<String,String>print:info){
+            System.out.println(print.getKey()+" : "+print.getValue());
+        }
+        data.remove("ONE");
+        data.remove("FOUR");
+        Set<Map.Entry<String, String>> infos = data.entrySet();
+        System.out.println("------------------");
+        System.out.println("HashMap After Remove :");
+        for(Map.Entry<String,String>print:infos){
+            System.out.println(print.getKey()+" : "+print.getValue());
+        }
+
+    }
+}
+
+
Index: AllSyntaxCodes/src/Repls/src/R202MapPrintInOrderKeysNvaluesSeparately.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R202MapPrintInOrderKeysNvaluesSeparately.java b/AllSyntaxCodes/src/Repls/src/R202MapPrintInOrderKeysNvaluesSeparately.java
new file mode 100644
--- /dev/null	(date 1667848010992)
+++ b/AllSyntaxCodes/src/Repls/src/R202MapPrintInOrderKeysNvaluesSeparately.java	(date 1667848010992)
@@ -0,0 +1,25 @@
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.Set;
+
+public class R202MapPrintInOrderKeysNvaluesSeparately {
+    public static void main(String[] args) {
+        LinkedHashMap<String,String> data=new LinkedHashMap<>();
+        data.put("1 item", "apple");
+        data.put("2 item", "banana");
+        data.put("3 item", "pear");
+        data.put("4 item", "tomato");
+        data.put("5 item", "mango");
+        data.put("6 item", "kiwi");
+
+        Set<String> allKeys=data.keySet();
+        Collection<String> allValues=data.values();
+        //System.out.println(allKeys+" "+allValues);
+        var iterator=allKeys.iterator();
+        var it = allValues.iterator();
+        while(iterator.hasNext()){
+            while ((it.hasNext())){
+                var key=iterator.next();
+                var value=it.next();
+                System.out.println("Key is "+key+" and values is "+value);
+            }}}}
Index: AllSyntaxCodes/src/Repls/src/R203MapPrintWithIteratorNoDuplicates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R203MapPrintWithIteratorNoDuplicates.java b/AllSyntaxCodes/src/Repls/src/R203MapPrintWithIteratorNoDuplicates.java
new file mode 100644
--- /dev/null	(date 1667848317058)
+++ b/AllSyntaxCodes/src/Repls/src/R203MapPrintWithIteratorNoDuplicates.java	(date 1667848317058)
@@ -0,0 +1,27 @@
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Set;
+
+public class R203MapPrintWithIteratorNoDuplicates {
+    public static void main(String[] args) {
+        HashMap<String,Integer> data=new HashMap<>();
+        data.put("mango", 10);
+        data.put("apple", 30);
+        data.put("orange", 20);
+        data.put("mango", 40);
+        data.put("mango", 40);
+
+
+        Set<String> allKeys=data.keySet();
+        Collection<Integer> allValues=data.values();
+        //System.out.println(allKeys+" "+allValues);
+        var iterator=allKeys.iterator();
+        var it = allValues.iterator();
+        while(iterator.hasNext()){
+            while ((it.hasNext())){
+                var key=iterator.next();
+                var value=it.next();
+                System.out.println("Key is "+key+" and values is "+value);
+            }}}}
+
+
Index: AllSyntaxCodes/src/Repls/src/R204PrintAllIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R204PrintAllIterator.java b/AllSyntaxCodes/src/Repls/src/R204PrintAllIterator.java
new file mode 100644
--- /dev/null	(date 1667856705134)
+++ b/AllSyntaxCodes/src/Repls/src/R204PrintAllIterator.java	(date 1667856705134)
@@ -0,0 +1,21 @@
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+public class R204PrintAllIterator {
+    public static void main(String[] args) {
+        Map<String, String> data = new LinkedHashMap<>();
+       data.put("Street", "Patrick ST");
+       data.put("Suite", "265");
+       data.put("City", "Vienna");
+       data.put("Zip", "22180");
+       data.put("Country", "United State");
+
+        Iterator<Map.Entry<String,String>>iterator = data.entrySet().iterator();
+        while(iterator.hasNext()){
+            Map.Entry<String,String>entry=iterator.next();
+            System.out.println(entry.getValue());
+        }}}
+
+
+
Index: AllSyntaxCodes/src/Repls/src/R205HashMapPrintUpperCase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R205HashMapPrintUpperCase.java b/AllSyntaxCodes/src/Repls/src/R205HashMapPrintUpperCase.java
new file mode 100644
--- /dev/null	(date 1667851374409)
+++ b/AllSyntaxCodes/src/Repls/src/R205HashMapPrintUpperCase.java	(date 1667851374409)
@@ -0,0 +1,18 @@
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+public class R205HashMapPrintUpperCase {
+    public static void main(String[] args) {
+        HashMap<String, String> data = new HashMap<>();
+        data.put("Street", "Patrick ST");
+        data.put("Suite", "265");
+        data.put("City", "Vienna");
+        data.put("Zip", "22180");
+        data.put("Country", "United State");
+
+        Set<Map.Entry<String, String>> info = data.entrySet();
+        for(Map.Entry<String,String>printUpper:info){
+            System.out.println(printUpper.getValue().toUpperCase());
+        }}}
+
Index: AllSyntaxCodes/src/ReviewLists/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewLists/Student.java b/AllSyntaxCodes/src/ReviewLists/Student.java
new file mode 100644
--- /dev/null	(date 1667874637803)
+++ b/AllSyntaxCodes/src/ReviewLists/Student.java	(date 1667874637803)
@@ -0,0 +1,43 @@
+package ReviewLists;
+
+import java.util.Objects;
+
+public class Student {
+    private String firstName;
+    private String lastName;
+    private String rollNumber;
+
+    public Student(String firstName, String lastName, String rollNumber) {
+        this.firstName = firstName;
+        this.lastName = lastName;
+        this.rollNumber = rollNumber;
+    }
+    void printName(){
+        System.out.println(firstName+" "+lastName);
+    }
+
+    @Override
+    public String toString() {//type todo & will generate the override method automatically
+        return "Student{" +
+                "firstName='" + firstName + '\'' +
+                ", lastName='" + lastName + '\'' +
+                ", rollNumber='" + rollNumber + '\'' +
+                '}';
+    }
+/*
+if we don't override this method java by default checks address to figure out if
+2 objects are same or not
+ */
+    @Override
+    public boolean equals(Object o) {//type eq>select second option will generate this
+        if (this == o) return true;//to print true
+        if (o == null || getClass() != o.getClass()) return false;
+        Student student = (Student) o;
+        return Objects.equals(firstName, student.firstName) && Objects.equals(lastName, student.lastName) && Objects.equals(rollNumber, student.rollNumber);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(firstName, lastName, rollNumber);
+    }
+}
Index: AllSyntaxCodes/src/ReviewLists/StudentPrint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewLists/StudentPrint.java b/AllSyntaxCodes/src/ReviewLists/StudentPrint.java
new file mode 100644
--- /dev/null	(date 1667874637897)
+++ b/AllSyntaxCodes/src/ReviewLists/StudentPrint.java	(date 1667874637897)
@@ -0,0 +1,27 @@
+package ReviewLists;
+
+import java.util.ArrayList;
+
+public class StudentPrint {
+    public static void main(String[] args) {
+        ArrayList<Student> student=new ArrayList<>();
+        student.add(new Student("Janel","Sai","123"));
+        student.add(new Student("Ben","B","124"));
+        student.add(new Student("Puskar","P","423"));
+
+        System.out.println(student);
+
+        //remove elements, how to access methods from a class
+        for (Student student1 : student) {
+            student1.printName();
+
+        }
+        //will print false, to get true do Override in line 29 in Student class
+        Student janel=new Student("Janel","Sai","123");
+        System.out.println(student.contains(janel));
+        //will print the location of students
+        System.out.println(student);
+        System.out.println(janel);//prints the array of students
+
+    }
+}
Index: AllSyntaxCodes/src/ReviewSets/PrintSpecificLine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewSets/PrintSpecificLine.java b/AllSyntaxCodes/src/ReviewSets/PrintSpecificLine.java
new file mode 100644
--- /dev/null	(date 1667875136894)
+++ b/AllSyntaxCodes/src/ReviewSets/PrintSpecificLine.java	(date 1667875136894)
@@ -0,0 +1,29 @@
+package ReviewSets;
+
+import ReviewLists.Student;
+
+import java.util.*;
+
+public class PrintSpecificLine {
+    public static void main(String[] args) {
+        /*if we don't override equals method in our custom classes most of the collections
+        framework will not work properly with those classes*/
+        //Set<Student> students=new HashSet<>();
+        List<Student> students=new LinkedList<>();
+
+        students.add(new Student("Janel","Sai","123"));
+        students.add(new Student("Zorah","Sai","352"));
+        students.add(new Student("Rimma","R","321"));
+        students.add(new Student("Puskar","P","421"));
+
+        System.out.println(students);//will print 1 st because of equals override method
+        //sets don't have get method
+        //do this to print a specific line
+        List<Student> setStudents=new ArrayList<>(students);
+        System.out.println(setStudents.get(1));
+        //won't print Zorah, cause HashSet doesn't follow order
+        //will print Zorah with LinkedList
+
+
+    }
+}
Index: AllSyntaxCodes/src/ReviewLists/PrintCountOfLettersInWord.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewLists/PrintCountOfLettersInWord.java b/AllSyntaxCodes/src/ReviewLists/PrintCountOfLettersInWord.java
new file mode 100644
--- /dev/null	(date 1667874637689)
+++ b/AllSyntaxCodes/src/ReviewLists/PrintCountOfLettersInWord.java	(date 1667874637689)
@@ -0,0 +1,23 @@
+package ReviewLists;
+
+import java.util.ArrayList;
+
+public class PrintCountOfLettersInWord {
+    public static void main(String[] args) {
+        ArrayList<String> animals=new ArrayList<>();
+        animals.add("Dog");
+        animals.add("Cat");
+        animals.add("Lion");
+        animals.add("Monkey");
+        animals.add("Tiger");
+        animals.add("Panda");
+        animals.add("Horse");
+        System.out.println(animals);
+//print the size of each word from this list
+        for (String animal : animals) {//shortcut> type iter & it will give this code
+            System.out.println(animal.length());
+        }
+
+        }
+    }
+
Index: AllSyntaxCodes/src/ReviewLists/ReplaceElementBiggerThan4Letters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewLists/ReplaceElementBiggerThan4Letters.java b/AllSyntaxCodes/src/ReviewLists/ReplaceElementBiggerThan4Letters.java
new file mode 100644
--- /dev/null	(date 1667874637600)
+++ b/AllSyntaxCodes/src/ReviewLists/ReplaceElementBiggerThan4Letters.java	(date 1667874637600)
@@ -0,0 +1,37 @@
+package ReviewLists;
+
+import java.util.ArrayList;
+import java.util.ListIterator;
+
+public class ReplaceElementBiggerThan4Letters {
+    public static void main(String[] args) {
+        ArrayList<String> animals = new ArrayList<>();
+        animals.add("Dog");
+        animals.add("Cat");
+        animals.add("Lion");
+        animals.add("Monkey");
+        animals.add("Tiger");
+        animals.add("Panda");
+        animals.add("Horse");
+        //System.out.println(animals);print all
+
+        /*if element is more than 4 letter replace with Camel
+        don't use iterator,because we are not performing any operation
+        that can change the size of the list
+        Don't use enhanced for loop, as we are not printing the data, we are printing the data.
+        Since we need an index to update the data, use simple for loop*/
+        for (int i = 0; i < animals.size(); i++) {
+            if (animals.get(i).length()>4) {
+                animals.set(i, "Camel");//set method replace the elements
+            }
+        }
+        System.out.println(animals);
+
+        System.out.println(animals.subList(0,3));
+
+        ListIterator<String> stringListIterator=animals.listIterator();
+        while (stringListIterator.hasNext()){
+            System.out.println(stringListIterator.next());
+        }
+    }
+}
Index: AllSyntaxCodes/src/ReviewLists/RemoveWordsWithMoreThan4Letters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewLists/RemoveWordsWithMoreThan4Letters.java b/AllSyntaxCodes/src/ReviewLists/RemoveWordsWithMoreThan4Letters.java
new file mode 100644
--- /dev/null	(date 1667874637733)
+++ b/AllSyntaxCodes/src/ReviewLists/RemoveWordsWithMoreThan4Letters.java	(date 1667874637733)
@@ -0,0 +1,21 @@
+package ReviewLists;
+
+import java.util.ArrayList;
+
+public class RemoveWordsWithMoreThan4Letters {
+    public static void main(String[] args) {
+        ArrayList<String> animals = new ArrayList<>();
+        animals.add("Dog");
+        animals.add("Cat");
+        animals.add("Lion");
+        animals.add("Monkey");
+        animals.add("Tiger");
+        animals.add("Panda");
+        animals.add("Horse");
+        System.out.println(animals);
+
+        //remove words that have more than 4 letters
+        animals.removeIf(removeL->removeL.length()>4);
+        System.out.println(animals);
+    }
+}
\ No newline at end of file
Index: AllSyntaxCodes/src/ReviewLists/PrintArrayListToStringInNewLine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewLists/PrintArrayListToStringInNewLine.java b/AllSyntaxCodes/src/ReviewLists/PrintArrayListToStringInNewLine.java
new file mode 100644
--- /dev/null	(date 1667874637284)
+++ b/AllSyntaxCodes/src/ReviewLists/PrintArrayListToStringInNewLine.java	(date 1667874637284)
@@ -0,0 +1,20 @@
+package ReviewLists;
+
+import java.util.ArrayList;
+import java.util.ListIterator;
+
+public class PrintArrayListToStringInNewLine {
+    public static void main(String[] args) {
+        ArrayList<String> animals = new ArrayList<>();
+        animals.add("Dog");
+        animals.add("Cat");
+        animals.add("Lion");
+        animals.add("Monkey");
+        animals.add("Tiger");
+        animals.add("Panda");
+        animals.add("Horse");
+
+        ListIterator<String> stringListIterator=animals.listIterator();
+        while (stringListIterator.hasNext()){
+            System.out.println(stringListIterator.next());
+}}}
Index: AllSyntaxCodes/src/Practice/T1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Practice/T1.java b/AllSyntaxCodes/src/Practice/T1.java
new file mode 100644
--- /dev/null	(date 1666479891128)
+++ b/AllSyntaxCodes/src/Practice/T1.java	(date 1666479891128)
@@ -0,0 +1,47 @@
+package Practice;
+/*
+   Create an Interface 'Shape' with undefined methods as calculateArea and calculatePerimiter. Create 2 classes Circle &
+    Square that implements functionality defined in the Shape Interface. Test your code.
+   */
+public class T1 {
+    public static void main(String[] args) {
+        Shape [] print={new Circle(7,8,5), new Square(8)};
+        for(Shape printA:print){
+            printA.calculatePerimiter();
+            printA.calculateArea();
+        }}}
+interface Shape{
+    void calculateArea();
+    void calculatePerimiter();
+}
+class Circle implements Shape{
+    double length;
+    double width;
+    double r;
+    Circle(double length, double width, double r){
+        this.length=length;
+        this.width=width;
+        this.r=r;
+    }
+    @Override
+    public void calculateArea() {
+        System.out.println("the area of circle is "+(length*width));
+    }
+    @Override
+    public void calculatePerimiter() {
+        System.out.println("parameter of circle "+(2*Math.PI*r));
+    }}
+class Square implements Shape{
+    int lenght;
+    public  Square(int lenght){
+        this.lenght=lenght;
+    }
+
+    @Override
+    public void calculateArea() {
+        System.out.println("the area of square is "+(lenght*lenght));
+    }
+    @Override
+    public void calculatePerimiter() {
+        System.out.println("the perimiter of square is "+(lenght*4));
+    }}
Index: AllSyntaxCodes/src/ReviewSets/RemoveDuplicatesFromArrayListAndSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewSets/RemoveDuplicatesFromArrayListAndSort.java b/AllSyntaxCodes/src/ReviewSets/RemoveDuplicatesFromArrayListAndSort.java
new file mode 100644
--- /dev/null	(date 1667875427642)
+++ b/AllSyntaxCodes/src/ReviewSets/RemoveDuplicatesFromArrayListAndSort.java	(date 1667875427642)
@@ -0,0 +1,26 @@
+package ReviewSets;
+
+import java.util.ArrayList;
+import java.util.Set;
+import java.util.TreeSet;
+
+public class RemoveDuplicatesFromArrayListAndSort {
+    public static void main(String[] args) {
+        //sort & remove duplicate from ArrayList
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(150000);
+        numbers.add(180000);
+        numbers.add(160000);
+        numbers.add(140000);
+        numbers.add(140000);
+
+        Set<Integer> set=new TreeSet<>(numbers);//converts the ArrayList to a TreeSet
+        System.out.println(set);//1st way
+        /* numbers.clear(); 2nd way
+        numbers.addAll(set);
+        System.out.println(numbers);*/
+        //3rd way
+        ArrayList<Integer> numbers2=new ArrayList<>(set);
+        System.out.println(numbers2);
+    }
+}
Index: AllSyntaxCodes/src/ReviewSets/Demo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewSets/Demo.java b/AllSyntaxCodes/src/ReviewSets/Demo.java
new file mode 100644
--- /dev/null	(date 1667875427716)
+++ b/AllSyntaxCodes/src/ReviewSets/Demo.java	(date 1667875427716)
@@ -0,0 +1,28 @@
+package ReviewSets;
+
+import java.util.ArrayList;
+import java.util.Set;
+import java.util.TreeSet;
+
+public class Demo {
+    public static void main(String[] args) {
+        //sort & remove duplicate from ArrayList
+        ArrayList<Integer> numbers=new ArrayList<>();
+        numbers.add(150000);
+        numbers.add(180000);
+        numbers.add(160000);
+        numbers.add(140000);
+        numbers.add(140000);
+
+        Set<Integer> set=new TreeSet<>(numbers);//converts the ArrayList to a TreeSet
+        System.out.println(set);//1st way
+        /* numbers.clear(); 2nd way
+        numbers.addAll(set);
+        System.out.println(numbers);*/
+        //3rd way
+        ArrayList<Integer> numbers2=new ArrayList<>(set);
+        System.out.println(numbers2);
+    }
+}
+
+
Index: AllSyntaxCodes/src/ReviewMap/Demo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/ReviewMap/Demo.java b/AllSyntaxCodes/src/ReviewMap/Demo.java
new file mode 100644
--- /dev/null	(date 1667875807794)
+++ b/AllSyntaxCodes/src/ReviewMap/Demo.java	(date 1667875807794)
@@ -0,0 +1,20 @@
+package ReviewMap;
+
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+public class Demo {
+    public static void main(String[] args) {
+        /*
+        HashMap: doesn't retain the order. but it is the fastest
+        LinkedHashMap: retains the order, but it is slower than HashSet
+        TreesMap: to sort the data, but it's the slowest
+         */
+        Map<String,Double> veggieList=new LinkedHashMap<>();
+        HashSet<String> hashSet=new HashSet<>();
+        hashSet.add(null);
+        System.out.println(hashSet);
+
+    }
+}
Index: AllSyntaxCodes/src/LambdaS/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/LambdaS/Notes b/AllSyntaxCodes/src/LambdaS/Notes
new file mode 100644
--- /dev/null	(date 1668212535817)
+++ b/AllSyntaxCodes/src/LambdaS/Notes	(date 1668212535817)
@@ -0,0 +1,30 @@
+Why Lambdas?
+    --> Enables functional programming
+    --> Readable and concise code
+    --> Easier to use APIs and libraries
+    --> Enables support for parallel processing
+Function as Values
+    Inline values --> String name="foo";
+Example of Lambda expression:
+    Regular expression:
+       --> aBlockOfCode=public void print(){System.out.println("Hello World!");}
+    Lambda Expression:
+       --> aBlockOfCode=() -> System.out.println("Hello World!"); // If We have just one line we can delete curly braces.
+
+greetingFunction = () -> System.out.println("Hello World!");
+
+greet(greetingFunction);  // one way
+greet(() -> System.out.println("Hello World!")) ; // Other way
+
+Regular Expression:
+doubleNumberFunction =  public int double(int a){
+                                return a2;
+                        }
+Lambda Expression:
+    doubleNumberFunction = (int a) -> a2;
+    addFunction = (int a, int b) -> a+b;
+    safeDivideFunction = (int a, int b) -> {
+                             if(b==0) return 0;
+                                return a/b;
+                          };
+    stringLengthCountFunction = (String s) -> s.length();
\ No newline at end of file
Index: AllSyntaxCodes/src/C27CollectionsFramewors/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/Notes b/AllSyntaxCodes/src/C27CollectionsFramewors/Notes
new file mode 100644
--- /dev/null	(date 1668275221513)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/Notes	(date 1668275221513)
@@ -0,0 +1,26 @@
+ArrayList vs LinkedList:
+    ArrayList and LinkedList both implement the list interface. But internal implementation is different.
+    LinkedList is better for manipulation of data (adding new data at run time, in-between or in the start
+    of the list, or removing data). ArrayList is better when most of the time we use the Get method.
+Sets:
+    Sets are another set of datastructures in collections framework that allow us to store only unique data.
+    As we can convert any data structure in collections framework, we can use sets to remove duplicate
+    data from Lists. We can also use sets.
+Types of sets:
+    There are many types of Sets, but we will be discussing only 1) HashSet 2) LinkedHashset 3) TreeSet.
+HashSet:
+    Upside: It is most memory efficient, and it requires less space as compared to other types of sets.
+    Downside: HashSet does not maintain the insertion order.
+LinkedHashSet:
+    UpSide: order of the elements is maintained.
+    DownSide: it takes more memory, and it is slower than Hashset.
+TreeSet:
+    UpSide: Data is sorted in natural order.
+    DownSide: It is slowest, and it takes more memory than Hashset.
+Demos of storing the objects of a custom class and how we can iterate through sets
+
+Important interview question:
+What is toString() method?
+toString method is used to print instance fields of a class whenever we try to print the object
+of a class println method internally calls this method. This method is inherited from the Object class.
+All the cLasses that we create in java are automatically inherited from Object class.
\ No newline at end of file
Index: AllSyntaxCodes/src/C28MapsAndexcel/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/Notes b/AllSyntaxCodes/src/C28MapsAndexcel/Notes
new file mode 100644
--- /dev/null	(date 1668351395179)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/Notes	(date 1668351395179)
@@ -0,0 +1,28 @@
+Maps in Java:
+    Maps are datastructures that allow us to store key value pairs.
+Why we should use Maps?
+    Whenever we have to store key value pairs instead of using arrays or 2D arrays or ArrayLists we
+    should use Maps because they provide very good performance and have built-in methods
+    to process the data.
+What is the syntax of Maps?
+    Map<DataTypeOfKey,DataTypeOfValue> anyName=new MapClass<>();
+    for example if we have to store fruit and their prices we will do something like this
+    HashMap<String,Double> fruit=new HashMap<>();
+Types Of Maps:
+    1) HashMap 2) LinkedHashMap 3) TreeMap
+HashMap:
+    This is the most widely used type of map because it is the fastest and occupies less memory.
+    We should always use Hashmap if there are no requirements for insertion order or sorting.
+LinkedHashMap:
+    LinkedHashMap keeps the insertion order, but it takes a little more memory than HashMap and
+    is a little slower.
+TreeMap:
+    TreeMap sorts the data in natural order but insertion is very slow. It takes more memory
+    to keep the data in sorted order.
+FileHandling:
+    Reading, writing data to files with the help of java is called file handling.
+Steps to read data from any files on any computer:
+    1) location of file on our computer.
+    2) we need to go to that location.
+    3) we need a software that can read and write data to that file for example we need
+    Microsoft Excel if we want to work with xlsx files.
\ No newline at end of file
Index: AllSyntaxCodes/Data/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/AllSyntaxCodes/Data/config.properties b/AllSyntaxCodes/Data/config.properties
new file mode 100644
--- /dev/null	(date 1668359972250)
+++ b/AllSyntaxCodes/Data/config.properties	(date 1668359972250)
@@ -0,0 +1,4 @@
+URL=www.facebook.com
+userName=user123
+password=Pass123
+browser=Chrome
Index: AllSyntaxCodes/src/C27CollectionsFramewors/HashMapReturnKeysNValuesPrintValueOf1Key.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/HashMapReturnKeysNValuesPrintValueOf1Key.java b/AllSyntaxCodes/src/C27CollectionsFramewors/HashMapReturnKeysNValuesPrintValueOf1Key.java
new file mode 100644
--- /dev/null	(date 1668289394709)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/HashMapReturnKeysNValuesPrintValueOf1Key.java	(date 1668289394709)
@@ -0,0 +1,21 @@
+package C27CollectionsFramewors;
+import java.util.Collection;
+import java.util.HashMap;
+public class HashMapReturnKeysNValuesPrintValueOf1Key {
+    public static void main(String[] args) {
+        HashMap<String,Double> fruit=new HashMap<>();
+        fruit.put("Apple",1.99); // to Store the values in a map
+        fruit.put("Mango",1.99);
+        fruit.put("Orange",4.99);
+        fruit.put("Banana",10.1);
+        fruit.put("Banana",12.0);
+        System.out.println(fruit);//print all
+        System.out.println(fruit.get("Banana"));//print value of Banana
+        //returns all the keys in the form of Set
+        Collection<String> keySet=fruit.keySet();
+        System.out.println(keySet);
+        // returns all the values in the form of a collection
+        Collection<Double> values=fruit.values();
+        System.out.println(values);
+    }}
+
Index: AllSyntaxCodes/src/Repls/src/R227.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R227.java b/AllSyntaxCodes/src/Repls/src/R227.java
new file mode 100644
--- /dev/null	(date 1669164340989)
+++ b/AllSyntaxCodes/src/Repls/src/R227.java	(date 1669164340989)
@@ -0,0 +1,25 @@
+import java.util.Arrays;
+import java.util.LinkedList;
+
+public class R227 {
+    public static void main(String[] args) {
+        System.out.println(HTMLElements("<div><b><p>hello</p></b></div>"));
+        System.out.println(HTMLElements("<div><div><b></b></div></p>")); System.out.println(HTMLElements("<div>abc</div><p><em><i>test test test</b></em></p>"));
+    }
+    public static String HTMLElements(String str){
+        var open = new LinkedList<String>();
+        var openTags = Arrays.asList("b", "i", "em", "div", "p");
+        var closeTags = Arrays.asList("/b", "/i", "/em", "/div", "/p");
+        String[] splits = str.split("[><]");
+        for (String split : splits) {
+            if (openTags.contains(split)) {
+                open.add(split);
+            }
+            if (closeTags.contains(split) && open.size() != 0) {
+                if (open.getLast().equals(split.substring(1))) open.removeLast();
+                else {
+                    return open.getLast();
+                }}}
+        return "true";
+    }}
+
Index: AllSyntaxCodes/src/C27CollectionsFramewors/RemoveCharLambdaHashMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C27CollectionsFramewors/RemoveCharLambdaHashMap.java b/AllSyntaxCodes/src/C27CollectionsFramewors/RemoveCharLambdaHashMap.java
new file mode 100644
--- /dev/null	(date 1668289395551)
+++ b/AllSyntaxCodes/src/C27CollectionsFramewors/RemoveCharLambdaHashMap.java	(date 1668289395551)
@@ -0,0 +1,26 @@
+package C27CollectionsFramewors;
+
+import java.util.HashMap;
+
+public class RemoveCharLambdaHashMap {
+    public static void main(String[] args) {
+        HashMap<String,Double> fruit=new HashMap<>();
+        fruit.put("Apple",1.99); // to Store the values in a map
+        fruit.put("Mango",1.99);
+        fruit.put("Orange",4.99);
+        fruit.put("Banana",10.1);
+        //THIS WON'T WORK
+        /*Collection<String> allKeys=fruit.keySet(); // getting all the  keys in the form of a set
+        System.out.println(allKeys);
+        Iterator<String> iterator= allKeys.iterator(); // Getting an iterator on that  set
+        while (iterator.hasNext()){
+            String item=iterator.next();
+            if(item.contains("n")){
+                iterator.remove();
+            }}*/
+
+        //remove strings containing "n"
+        fruit.keySet().removeIf(x-> x.contains("n"));
+        System.out.println(fruit);
+    }}
+
Index: AllSyntaxCodes/src/Repls/src/R218.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R218.java b/AllSyntaxCodes/src/Repls/src/R218.java
new file mode 100644
--- /dev/null	(date 1669165310314)
+++ b/AllSyntaxCodes/src/Repls/src/R218.java	(date 1669165310314)
@@ -0,0 +1,39 @@
+import java.util.*;
+public class R218 {
+    public static void main(String[] args) {
+        List<String>name=new LinkedList<>();
+        name.add("switch");
+        name.add("tv");
+        name.add("switch");
+        name.add("tv");
+        name.add("switch");
+        name.add("tv");
+        name.add("radio");
+        name.add("switch");
+
+        List<String> listWord = countDeviceNames(name);
+        System.out.println(listWord);
+    }
+    public static ArrayList<String> countDeviceNames(List<String> deviceNames) {
+        Map<String,Integer> myMap=new LinkedHashMap<>();
+
+        for(String s:deviceNames) {
+            if (myMap.get(s) != null) {
+                int count = myMap.get(s);
+                String s1 = s.concat(String.valueOf(count));
+                if (myMap.get(s1) != null) {
+                    while (true) {
+                        s1 = s.concat(String.valueOf(count));
+                        if (myMap.get(s1) == null) {
+                            break;
+                        }
+                        count++;
+                    }
+                    myMap.put(s1, count);
+                } else myMap.put(s1, count++);
+            } else myMap.put(s, 1);
+        }
+        var result=new ArrayList<String>();
+        result.addAll(myMap.keySet());
+        return result;
+    }}
Index: AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsPrintValues.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsPrintValues.java b/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsPrintValues.java
new file mode 100644
--- /dev/null	(date 1668367438106)
+++ b/AllSyntaxCodes/src/C28MapsAndexcel/RemoveContainsPrintValues.java	(date 1668367438106)
@@ -0,0 +1,25 @@
+package C28MapsAndexcel;
+import java.util.HashMap;
+//Demo 6 Remove letter that contains "e"
+public class RemoveContainsPrintValues {
+    public static void main(String[] args) {
+        HashMap<String, Double> items = new HashMap<>();
+        items.put("Iphone 14", 1000.0);
+        items.put("Eggs", 2.40);
+        items.put("Apples", 5.0);
+        items.put("Keyboard", 100.0);
+        items.put("Flower", 1.0);
+   /* //remove "e", also print Keys & Values = longer code
+        var iterator=items.entrySet().iterator();
+        while (iterator.hasNext()){
+            var item=iterator.next();
+            var key=item.getKey();
+            var value=item.getValue();
+            if (key.contains("e")&& value>10){
+                iterator.remove();
+            }}*/
+
+        //Lambda for shorter code
+        items.entrySet().removeIf(entry->entry.getKey().contains("e")&& entry.getValue()>10);
+        System.out.println(items);
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/C28Excel/PropertiesDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28Excel/PropertiesDemo.java b/AllSyntaxCodes/src/C28Excel/PropertiesDemo.java
new file mode 100644
--- /dev/null	(date 1668448877414)
+++ b/AllSyntaxCodes/src/C28Excel/PropertiesDemo.java	(date 1668448877414)
@@ -0,0 +1,19 @@
+package C28Excel;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Properties;
+
+public class PropertiesDemo {
+    public static void main(String[] args) throws IOException {
+    var path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\config.properties";//location of the file
+        var fileInputStream=new FileInputStream(path);//Navigate to the file
+    var properties=new Properties();//property class>special software that helps to read data from that file
+    properties.load(fileInputStream);//loads all the data from the file inside(Memory) java code()
+        System.out.println(properties.getProperty("URL"));
+        //will print the value of the key=FB.com
+        System.out.println("password");
+        fileInputStream.close();
+
+    }
+}
Index: AllSyntaxCodes/src/C29FileHandling/HeaderRowCells.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/HeaderRowCells.java b/AllSyntaxCodes/src/C29FileHandling/HeaderRowCells.java
new file mode 100644
--- /dev/null	(date 1668389516782)
+++ b/AllSyntaxCodes/src/C29FileHandling/HeaderRowCells.java	(date 1668389516782)
@@ -0,0 +1,37 @@
+package C29FileHandling;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.LinkedHashMap;
+
+public class HeaderRowCells {
+    public static void main(String[] args) throws IOException {
+        //Location of the file where your HardsDrive file is stored
+        String path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx";
+        //Reads the data from HardDrive & brings it to RAM in the raw form 101010101010
+        //in simple words: computer has navigated to that file
+        FileInputStream fis=new FileInputStream(path);
+        //this class converts the raw bytes to Excel format
+        //simple: it  is a special software that helps us to read & write data to an Excel file
+        XSSFWorkbook excel=new XSSFWorkbook(fis);
+        Sheet sheet=excel.getSheet("Sheet1");
+        int noOfRow=sheet.getPhysicalNumberOfRows();
+        //create a map,get Header Row/top row to use as keys for our map
+        Row headerRow=sheet.getRow(0);
+        //the Map that will store data for each row
+        LinkedHashMap<String, String> rowMap=new LinkedHashMap<>();
+        // A loop that goes through all the rows that contain the data
+        for (int rowNo = 1; rowNo < noOfRow; rowNo++) {
+            Row dataRow= sheet.getRow(rowNo);//get a row from sheet one by one
+            //find how many cells are there
+            int noOfCells=dataRow.getPhysicalNumberOfCells();
+            // A loop to go through all the cells
+            for (int cellNo = 0; cellNo < noOfCells; cellNo++) {
+                //get keys from header row & values from data row
+        //convert the Cells toString
+                rowMap.put(headerRow.getCell(cellNo).toString(),dataRow.getCell(cellNo).toString());
+            }
+            System.out.println(rowMap);
+        }}}
Index: AllSyntaxCodes/src/Repls/src/R219.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R219.java b/AllSyntaxCodes/src/Repls/src/R219.java
new file mode 100644
--- /dev/null	(date 1669086596134)
+++ b/AllSyntaxCodes/src/Repls/src/R219.java	(date 1669086596134)
@@ -0,0 +1,34 @@
+import java.util.LinkedList;
+import java.util.List;
+public class R219 {
+    public static void main(String[] args) {
+        List<String> names=new LinkedList<>();
+        names.add("steve");
+        names.add("stevens");
+        names.add("danny");
+        names.add("steves");
+        names.add("dan");
+
+        List<String>query=new LinkedList<>();
+        query.add("steve");
+        query.add("alex");
+        query.add("joe");
+        query.add("john");
+        query.add("dan");
+
+        List<Integer> noOfPrefix = countOnlyPrefixes(names, query);
+        System.out.println(noOfPrefix);
+    }
+    public static List<Integer> countOnlyPrefixes(List<String> names, List<String> query){
+        var counter = new LinkedList<Integer>();
+        int count=0;
+        var iterator= names.listIterator();
+
+        for (String prefix : query) {
+            count=0;
+            for(String name:names)
+                if (name.startsWith(prefix) && (!name.equals(prefix))) count++;
+            counter.add(count);
+        }
+        return counter;
+    }}
Index: AllSyntaxCodes/src/C29FileHandling/Notes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C29FileHandling/Notes b/AllSyntaxCodes/src/C29FileHandling/Notes
new file mode 100644
--- /dev/null	(date 1668367300151)
+++ b/AllSyntaxCodes/src/C29FileHandling/Notes	(date 1668367300151)
@@ -0,0 +1,11 @@
+FileHandling in java:
+    Reading, writing and manipulating files using java code is called fileHandling.
+Why should we learn FileHandling:
+    1) When we perform data driven testing we need to store data in files.
+    2) Storing critical data like userNames and passwords inside the code is bad, because when we
+    push the code to GitHub that info will also be pushed with it, to avoid this we use properties files.
+    3) Sometimes data can be huge in GBs, and it is a very bad practice to push GBS to GitHub.
+How can we read data from a file?
+    1) First we need to know the location(path) of the file.
+    2) Navigate to that location where file is stored.
+    3) We need a special class/Software that can help us read/write to that file.
Index: AllSyntaxCodes/src/PrivateClass/CountChars.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/PrivateClass/CountChars.java b/AllSyntaxCodes/src/PrivateClass/CountChars.java
new file mode 100644
--- /dev/null	(date 1668475665175)
+++ b/AllSyntaxCodes/src/PrivateClass/CountChars.java	(date 1668475665175)
@@ -0,0 +1,21 @@
+package PrivateClass;
+
+public class CountChars {
+   /* public static void main(String[] args) {
+        String str = "Java course";
+        char c = 'a';
+    }
+
+    public static char printCount(String str, char c) {
+        int count = 0;
+        for (int i = 0; i < str.length(); i++) {
+            if (str.charAt(i) == 'a') {
+                count++;
+                System.out.println("Java Course");
+            }
+        }
+
+    }*/}
+
+
+
Index: AllSyntaxCodes/src/Repls/src/R210.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R210.java b/AllSyntaxCodes/src/Repls/src/R210.java
new file mode 100644
--- /dev/null	(date 1669245087268)
+++ b/AllSyntaxCodes/src/Repls/src/R210.java	(date 1669245087268)
@@ -0,0 +1,10 @@
+public class R210 {
+    public static void main(String[] args) {
+        int a=10, b=0, result;
+        try {
+            result = a / b;
+        }catch (ArithmeticException e){
+            e.printStackTrace();
+        }
+    }
+}
Index: AllSyntaxCodes/src/Repls/src/R223.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R223.java b/AllSyntaxCodes/src/Repls/src/R223.java
new file mode 100644
--- /dev/null	(date 1669077150063)
+++ b/AllSyntaxCodes/src/Repls/src/R223.java	(date 1669077150063)
@@ -0,0 +1,16 @@
+import java.util.Scanner;
+import java.util.stream.IntStream;
+
+public class R223 {
+    public static void main(String[] args) { Scanner input=new Scanner(System.in);
+        int num = input.nextInt();
+        int i=1;
+        while (i<=num) {
+            for(int j=i;j<num;j++){
+                System.out.print(" ");
+            }
+            IntStream.range(1, (i * 2)).mapToObj(k -> num + " ").forEachOrdered(System.out::print);
+            System.out.println();
+            i++;
+        }
+    }}
\ No newline at end of file
Index: AllSyntaxCodes/src/C28Excel/GetDataFromSheetAndRow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28Excel/GetDataFromSheetAndRow.java b/AllSyntaxCodes/src/C28Excel/GetDataFromSheetAndRow.java
new file mode 100644
--- /dev/null	(date 1668362900384)
+++ b/AllSyntaxCodes/src/C28Excel/GetDataFromSheetAndRow.java	(date 1668362900384)
@@ -0,0 +1,24 @@
+package C28Excel;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+public class GetDataFromSheetAndRow {
+    public static void main(String[] args) throws IOException {
+        //need to know the path of the file
+    String path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx";
+    //navigate to the folder & open the file
+        FileInputStream fileInputStream=new FileInputStream(path);
+        //that special that can handle the xlsx files
+        XSSFWorkbook excelFile=new XSSFWorkbook(fileInputStream);
+        //navigate to Sheet inside Excel File
+        Sheet sheet=excelFile.getSheet("Sheet1");
+        // get the Row that contains the data, rows are index based,will start from zero
+        Row row0=sheet.getRow(0);
+        System.out.println(row0.getCell(0));//prints the FirstName
+        //get the data from row 1
+        Row row1=sheet.getRow(1);
+        System.out.println(row1.getCell(0));//prints Janel
+    }}
Index: AllSyntaxCodes/src/C28Excel/GetAllDataFromExcel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/C28Excel/GetAllDataFromExcel.java b/AllSyntaxCodes/src/C28Excel/GetAllDataFromExcel.java
new file mode 100644
--- /dev/null	(date 1668364158027)
+++ b/AllSyntaxCodes/src/C28Excel/GetAllDataFromExcel.java	(date 1668364158027)
@@ -0,0 +1,31 @@
+package C28Excel;
+import org.apache.poi.ss.usermodel.Cell;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+public class GetAllDataFromExcel {
+    public static void main(String[] args) throws IOException {
+        //find the path
+        String path="C:\\Users\\ryan_\\IdeaProjects\\SDETBatch14Java\\AllSyntaxCodes\\Data\\ExcelTest.xlsx";
+        FileInputStream fileInputStream=new FileInputStream(path);
+        //locate the excel
+        XSSFWorkbook excel=new XSSFWorkbook(fileInputStream);
+        //locate the sheet
+        Sheet sheet=excel.getSheet("Sheet1");
+        //get the number of rows that contains data in the sheet
+        int noOfRows=sheet.getPhysicalNumberOfRows();
+        //System.out.println(noOfRows);//print the number of rows
+        for (int i = 0; i < noOfRows; i++) {
+            Row row=sheet.getRow(i);//number of rows
+            //returns the total number of cells that contains data
+            int noOfCell=row.getPhysicalNumberOfCells();
+            for (int j = 0; j < noOfCell; j++) {
+                Cell cell= row.getCell(j);
+                //System.out.println(cell);//will print in new line each data
+                System.out.print(cell+" ");//print in 1 line with space
+            }
+            System.out.println();//add this to print each Row in a separate line
+        }}}
Index: AllSyntaxCodes/src/Repls/src/R216.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R216.java b/AllSyntaxCodes/src/Repls/src/R216.java
new file mode 100644
--- /dev/null	(date 1669085909478)
+++ b/AllSyntaxCodes/src/Repls/src/R216.java	(date 1669085909478)
@@ -0,0 +1,40 @@
+import java.util.Arrays;
+public class R216 {
+    public static void main(String[] args) {
+        System.out.println(Arrays.toString(arraySumToZero(4)));
+    }
+    public static int[] arraySumToZero(int N) {
+        var arr = new int[N];
+        int i = 0;
+        while (i < N - 1) {
+            arr[i] = i + 1;
+            arr[i + 1] = -(i + 1);
+            i += 2;
+        }
+        return arr;
+    }}
+
+    /*static  Scanner scan = new Scanner (System.in);
+    public static void main(String [] args){
+        int n = scan.nextInt();
+        printMethod(arraySumToZero(n));
+    }
+    public static int[] arraySumToZero(int N) {
+        var arr = new int[N];
+        var sum=0;
+        Random r = new Random();
+
+        var rand = r.nextInt(2 ^ (31 - 1));
+        for(int i=0;i<N;i++){
+            arr[i]=(i%2!=0)?rand:rand*(-1);
+            sum+=arr[i];
+            if (i == N - 1) {
+                arr[i] = (N % 2 != 0) ? 0 : rand;
+            }}
+        return arr;
+    }
+    public static void printMethod(int []nums){
+        for(int i:nums) System.out.print(i + " ");
+    }}
+*/
+
Index: AllSyntaxCodes/src/Repls/src/R217.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AllSyntaxCodes/src/Repls/src/R217.java b/AllSyntaxCodes/src/Repls/src/R217.java
new file mode 100644
--- /dev/null	(date 1669086246179)
+++ b/AllSyntaxCodes/src/Repls/src/R217.java	(date 1669086246179)
@@ -0,0 +1,30 @@
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class R217 {
+    public static void main(String[] args ){
+        var number=new ArrayList<Integer>();
+        number.add(5);
+        number.add(5);
+        number.add(3);
+        number.add(2);
+        number.add(5);
+        System.out.println(countDuplicates(number));
+    }
+    public static int countDuplicates(List<Integer> numbers){
+        Iterator<Integer> iterator=numbers.iterator();
+        Iterator<Integer> iterator1=numbers.iterator();
+        int count=0;
+        while (iterator.hasNext()) {
+            var number = iterator.next();
+            while (iterator1.hasNext()) {
+                Integer number1 = iterator1.next();
+                if (!number.equals(number1)) {
+                    continue;
+                }
+                count++;
+            }}
+        return count;
+    }}
+
